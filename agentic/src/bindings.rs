// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod agentic {
            #[allow(dead_code, clippy::all)]
            pub mod guest {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct TextType {
                    pub language_code: _rt::String,
                }
                impl ::core::fmt::Debug for TextType {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("TextType")
                            .field("language-code", &self.language_code)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum ParameterType {
                    Text(TextType),
                }
                impl ::core::fmt::Debug for ParameterType {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            ParameterType::Text(e) => {
                                f.debug_tuple("ParameterType::Text").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Structured {
                    pub parameters: _rt::Vec<ParameterType>,
                }
                impl ::core::fmt::Debug for Structured {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Structured")
                            .field("parameters", &self.parameters)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Multimodal {
                    pub text: Option<_rt::Vec<TextType>>,
                }
                impl ::core::fmt::Debug for Multimodal {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("Multimodal").field("text", &self.text).finish()
                    }
                }
                #[derive(Clone)]
                pub enum DataSchema {
                    Structured(Structured),
                    Multimodal(Multimodal),
                }
                impl ::core::fmt::Debug for DataSchema {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            DataSchema::Structured(e) => {
                                f.debug_tuple("DataSchema::Structured").field(e).finish()
                            }
                            DataSchema::Multimodal(e) => {
                                f.debug_tuple("DataSchema::Multimodal").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub struct AgentMethod {
                    pub name: _rt::String,
                    pub description: _rt::String,
                    pub prompt_hint: Option<_rt::String>,
                    pub input_schema: DataSchema,
                    pub output_schema: DataSchema,
                }
                impl ::core::fmt::Debug for AgentMethod {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AgentMethod")
                            .field("name", &self.name)
                            .field("description", &self.description)
                            .field("prompt-hint", &self.prompt_hint)
                            .field("input-schema", &self.input_schema)
                            .field("output-schema", &self.output_schema)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct AgentDependency {
                    pub agent_name: _rt::String,
                    pub methods: _rt::Vec<AgentMethod>,
                }
                impl ::core::fmt::Debug for AgentDependency {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AgentDependency")
                            .field("agent-name", &self.agent_name)
                            .field("methods", &self.methods)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct AgentDefinition {
                    pub agent_name: _rt::String,
                    pub description: _rt::String,
                    pub methods: _rt::Vec<AgentMethod>,
                    pub requires: _rt::Vec<AgentDependency>,
                }
                impl ::core::fmt::Debug for AgentDefinition {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("AgentDefinition")
                            .field("agent-name", &self.agent_name)
                            .field("description", &self.description)
                            .field("methods", &self.methods)
                            .field("requires", &self.requires)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct ProgressCounter {
                    pub steps: u32,
                    pub total: u32,
                }
                impl ::core::fmt::Debug for ProgressCounter {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ProgressCounter")
                            .field("steps", &self.steps)
                            .field("total", &self.total)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct ProgressReport {
                    pub description: _rt::String,
                    pub counter: Option<ProgressCounter>,
                }
                impl ::core::fmt::Debug for ProgressReport {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        f.debug_struct("ProgressReport")
                            .field("description", &self.description)
                            .field("counter", &self.counter)
                            .finish()
                    }
                }
                #[derive(Clone, Copy)]
                pub enum Error {
                    NetworkError,
                }
                impl ::core::fmt::Debug for Error {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            Error::NetworkError => {
                                f.debug_tuple("Error::NetworkError").finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub enum StatusUpdate {
                    Error(Error),
                    Progress(Option<ProgressReport>),
                    Emit(_rt::String),
                }
                impl ::core::fmt::Debug for StatusUpdate {
                    fn fmt(
                        &self,
                        f: &mut ::core::fmt::Formatter<'_>,
                    ) -> ::core::fmt::Result {
                        match self {
                            StatusUpdate::Error(e) => {
                                f.debug_tuple("StatusUpdate::Error").field(e).finish()
                            }
                            StatusUpdate::Progress(e) => {
                                f.debug_tuple("StatusUpdate::Progress").field(e).finish()
                            }
                            StatusUpdate::Emit(e) => {
                                f.debug_tuple("StatusUpdate::Emit").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Agent {
                    handle: _rt::Resource<Agent>,
                }
                type _AgentRep<T> = Option<T>;
                impl Agent {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Agent`.
                    pub fn new<T: GuestAgent>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _AgentRep<T> = Some(val);
                        let ptr: *mut _AgentRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestAgent>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestAgent>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestAgent>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _AgentRep<T>);
                    }
                    fn as_ptr<T: GuestAgent>(&self) -> *mut _AgentRep<T> {
                        Agent::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Agent`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct AgentBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Agent>,
                }
                impl<'a> AgentBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestAgent>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _AgentRep<T> {
                        Agent::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Agent {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agentic/guest")]
                            extern "C" {
                                #[link_name = "[resource-drop]agent"]
                                fn drop(_: u32);
                            }
                            drop(_handle);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_agent_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = Agent::new(
                        T::new(_rt::string_lift(bytes0), _rt::string_lift(bytes1)),
                    );
                    (result2).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_invoke_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let base4 = arg3;
                    let len4 = arg4;
                    let mut result4 = _rt::Vec::with_capacity(len4);
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        let e4 = {
                            let l1 = *base.add(0).cast::<*mut u8>();
                            let l2 = *base.add(4).cast::<usize>();
                            let len3 = l2;
                            let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                            _rt::string_lift(bytes3)
                        };
                        result4.push(e4);
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                    let result5 = T::invoke(
                        AgentBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                        result4,
                    );
                    let ptr6 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result5 {
                        StatusUpdate::Error(e) => {
                            *ptr6.add(0).cast::<u8>() = (0i32) as u8;
                            match e {
                                Error::NetworkError => {
                                    *ptr6.add(4).cast::<u8>() = (0i32) as u8;
                                }
                            }
                        }
                        StatusUpdate::Progress(e) => {
                            *ptr6.add(0).cast::<u8>() = (1i32) as u8;
                            match e {
                                Some(e) => {
                                    *ptr6.add(4).cast::<u8>() = (1i32) as u8;
                                    let ProgressReport {
                                        description: description7,
                                        counter: counter7,
                                    } = e;
                                    let vec8 = (description7.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr6.add(12).cast::<usize>() = len8;
                                    *ptr6.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                    match counter7 {
                                        Some(e) => {
                                            *ptr6.add(16).cast::<u8>() = (1i32) as u8;
                                            let ProgressCounter { steps: steps9, total: total9 } = e;
                                            *ptr6.add(20).cast::<i32>() = _rt::as_i32(steps9);
                                            *ptr6.add(24).cast::<i32>() = _rt::as_i32(total9);
                                        }
                                        None => {
                                            *ptr6.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr6.add(4).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        StatusUpdate::Emit(e) => {
                            *ptr6.add(0).cast::<u8>() = (2i32) as u8;
                            let vec10 = (e.into_bytes()).into_boxed_slice();
                            let ptr10 = vec10.as_ptr().cast::<u8>();
                            let len10 = vec10.len();
                            ::core::mem::forget(vec10);
                            *ptr6.add(8).cast::<usize>() = len10;
                            *ptr6.add(4).cast::<*mut u8>() = ptr10.cast_mut();
                        }
                    }
                    ptr6
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_invoke<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        1 => {
                            let l1 = i32::from(*arg0.add(4).cast::<u8>());
                            match l1 {
                                0 => {}
                                _ => {
                                    let l2 = *arg0.add(8).cast::<*mut u8>();
                                    let l3 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                            }
                        }
                        _ => {
                            let l4 = *arg0.add(4).cast::<*mut u8>();
                            let l5 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_get_definition_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_definition(
                        AgentBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let AgentDefinition {
                        agent_name: agent_name2,
                        description: description2,
                        methods: methods2,
                        requires: requires2,
                    } = result0;
                    let vec3 = (agent_name2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (description2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(12).cast::<usize>() = len4;
                    *ptr1.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec25 = methods2;
                    let len25 = vec25.len();
                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec25.len() * 60,
                        4,
                    );
                    let result25 = if layout25.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout25);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec25.into_iter().enumerate() {
                        let base = result25.add(i * 60);
                        {
                            let AgentMethod {
                                name: name5,
                                description: description5,
                                prompt_hint: prompt_hint5,
                                input_schema: input_schema5,
                                output_schema: output_schema5,
                            } = e;
                            let vec6 = (name5.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *base.add(4).cast::<usize>() = len6;
                            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                            let vec7 = (description5.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base.add(12).cast::<usize>() = len7;
                            *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                            match prompt_hint5 {
                                Some(e) => {
                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base.add(24).cast::<usize>() = len8;
                                    *base.add(20).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match input_schema5 {
                                DataSchema::Structured(e) => {
                                    *base.add(28).cast::<u8>() = (0i32) as u8;
                                    let Structured { parameters: parameters9 } = e;
                                    let vec12 = parameters9;
                                    let len12 = vec12.len();
                                    let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec12.len() * 12,
                                        4,
                                    );
                                    let result12 = if layout12.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout12);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec12.into_iter().enumerate() {
                                        let base = result12.add(i * 12);
                                        {
                                            match e {
                                                ParameterType::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let TextType { language_code: language_code10 } = e;
                                                    let vec11 = (language_code10.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr11 = vec11.as_ptr().cast::<u8>();
                                                    let len11 = vec11.len();
                                                    ::core::mem::forget(vec11);
                                                    *base.add(8).cast::<usize>() = len11;
                                                    *base.add(4).cast::<*mut u8>() = ptr11.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *base.add(36).cast::<usize>() = len12;
                                    *base.add(32).cast::<*mut u8>() = result12;
                                }
                                DataSchema::Multimodal(e) => {
                                    *base.add(28).cast::<u8>() = (1i32) as u8;
                                    let Multimodal { text: text13 } = e;
                                    match text13 {
                                        Some(e) => {
                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                            let vec16 = e;
                                            let len16 = vec16.len();
                                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec16.len() * 8,
                                                4,
                                            );
                                            let result16 = if layout16.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout16);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec16.into_iter().enumerate() {
                                                let base = result16.add(i * 8);
                                                {
                                                    let TextType { language_code: language_code14 } = e;
                                                    let vec15 = (language_code14.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                    let len15 = vec15.len();
                                                    ::core::mem::forget(vec15);
                                                    *base.add(4).cast::<usize>() = len15;
                                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                }
                                            }
                                            *base.add(40).cast::<usize>() = len16;
                                            *base.add(36).cast::<*mut u8>() = result16;
                                        }
                                        None => {
                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                            match output_schema5 {
                                DataSchema::Structured(e) => {
                                    *base.add(44).cast::<u8>() = (0i32) as u8;
                                    let Structured { parameters: parameters17 } = e;
                                    let vec20 = parameters17;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * 12,
                                        4,
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 12);
                                        {
                                            match e {
                                                ParameterType::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let TextType { language_code: language_code18 } = e;
                                                    let vec19 = (language_code18.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                    let len19 = vec19.len();
                                                    ::core::mem::forget(vec19);
                                                    *base.add(8).cast::<usize>() = len19;
                                                    *base.add(4).cast::<*mut u8>() = ptr19.cast_mut();
                                                }
                                            }
                                        }
                                    }
                                    *base.add(52).cast::<usize>() = len20;
                                    *base.add(48).cast::<*mut u8>() = result20;
                                }
                                DataSchema::Multimodal(e) => {
                                    *base.add(44).cast::<u8>() = (1i32) as u8;
                                    let Multimodal { text: text21 } = e;
                                    match text21 {
                                        Some(e) => {
                                            *base.add(48).cast::<u8>() = (1i32) as u8;
                                            let vec24 = e;
                                            let len24 = vec24.len();
                                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec24.len() * 8,
                                                4,
                                            );
                                            let result24 = if layout24.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout24);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec24.into_iter().enumerate() {
                                                let base = result24.add(i * 8);
                                                {
                                                    let TextType { language_code: language_code22 } = e;
                                                    let vec23 = (language_code22.into_bytes())
                                                        .into_boxed_slice();
                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                    let len23 = vec23.len();
                                                    ::core::mem::forget(vec23);
                                                    *base.add(4).cast::<usize>() = len23;
                                                    *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                                }
                                            }
                                            *base.add(56).cast::<usize>() = len24;
                                            *base.add(52).cast::<*mut u8>() = result24;
                                        }
                                        None => {
                                            *base.add(48).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                            }
                        }
                    }
                    *ptr1.add(20).cast::<usize>() = len25;
                    *ptr1.add(16).cast::<*mut u8>() = result25;
                    let vec49 = requires2;
                    let len49 = vec49.len();
                    let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec49.len() * 16,
                        4,
                    );
                    let result49 = if layout49.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout49);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec49.into_iter().enumerate() {
                        let base = result49.add(i * 16);
                        {
                            let AgentDependency {
                                agent_name: agent_name26,
                                methods: methods26,
                            } = e;
                            let vec27 = (agent_name26.into_bytes()).into_boxed_slice();
                            let ptr27 = vec27.as_ptr().cast::<u8>();
                            let len27 = vec27.len();
                            ::core::mem::forget(vec27);
                            *base.add(4).cast::<usize>() = len27;
                            *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                            let vec48 = methods26;
                            let len48 = vec48.len();
                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec48.len() * 60,
                                4,
                            );
                            let result48 = if layout48.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout48);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec48.into_iter().enumerate() {
                                let base = result48.add(i * 60);
                                {
                                    let AgentMethod {
                                        name: name28,
                                        description: description28,
                                        prompt_hint: prompt_hint28,
                                        input_schema: input_schema28,
                                        output_schema: output_schema28,
                                    } = e;
                                    let vec29 = (name28.into_bytes()).into_boxed_slice();
                                    let ptr29 = vec29.as_ptr().cast::<u8>();
                                    let len29 = vec29.len();
                                    ::core::mem::forget(vec29);
                                    *base.add(4).cast::<usize>() = len29;
                                    *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                    let vec30 = (description28.into_bytes()).into_boxed_slice();
                                    let ptr30 = vec30.as_ptr().cast::<u8>();
                                    let len30 = vec30.len();
                                    ::core::mem::forget(vec30);
                                    *base.add(12).cast::<usize>() = len30;
                                    *base.add(8).cast::<*mut u8>() = ptr30.cast_mut();
                                    match prompt_hint28 {
                                        Some(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            let vec31 = (e.into_bytes()).into_boxed_slice();
                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                            let len31 = vec31.len();
                                            ::core::mem::forget(vec31);
                                            *base.add(24).cast::<usize>() = len31;
                                            *base.add(20).cast::<*mut u8>() = ptr31.cast_mut();
                                        }
                                        None => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match input_schema28 {
                                        DataSchema::Structured(e) => {
                                            *base.add(28).cast::<u8>() = (0i32) as u8;
                                            let Structured { parameters: parameters32 } = e;
                                            let vec35 = parameters32;
                                            let len35 = vec35.len();
                                            let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec35.len() * 12,
                                                4,
                                            );
                                            let result35 = if layout35.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout35);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec35.into_iter().enumerate() {
                                                let base = result35.add(i * 12);
                                                {
                                                    match e {
                                                        ParameterType::Text(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let TextType { language_code: language_code33 } = e;
                                                            let vec34 = (language_code33.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                                            let len34 = vec34.len();
                                                            ::core::mem::forget(vec34);
                                                            *base.add(8).cast::<usize>() = len34;
                                                            *base.add(4).cast::<*mut u8>() = ptr34.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base.add(36).cast::<usize>() = len35;
                                            *base.add(32).cast::<*mut u8>() = result35;
                                        }
                                        DataSchema::Multimodal(e) => {
                                            *base.add(28).cast::<u8>() = (1i32) as u8;
                                            let Multimodal { text: text36 } = e;
                                            match text36 {
                                                Some(e) => {
                                                    *base.add(32).cast::<u8>() = (1i32) as u8;
                                                    let vec39 = e;
                                                    let len39 = vec39.len();
                                                    let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec39.len() * 8,
                                                        4,
                                                    );
                                                    let result39 = if layout39.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout39);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec39.into_iter().enumerate() {
                                                        let base = result39.add(i * 8);
                                                        {
                                                            let TextType { language_code: language_code37 } = e;
                                                            let vec38 = (language_code37.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr38 = vec38.as_ptr().cast::<u8>();
                                                            let len38 = vec38.len();
                                                            ::core::mem::forget(vec38);
                                                            *base.add(4).cast::<usize>() = len38;
                                                            *base.add(0).cast::<*mut u8>() = ptr38.cast_mut();
                                                        }
                                                    }
                                                    *base.add(40).cast::<usize>() = len39;
                                                    *base.add(36).cast::<*mut u8>() = result39;
                                                }
                                                None => {
                                                    *base.add(32).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    match output_schema28 {
                                        DataSchema::Structured(e) => {
                                            *base.add(44).cast::<u8>() = (0i32) as u8;
                                            let Structured { parameters: parameters40 } = e;
                                            let vec43 = parameters40;
                                            let len43 = vec43.len();
                                            let layout43 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec43.len() * 12,
                                                4,
                                            );
                                            let result43 = if layout43.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout43).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout43);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec43.into_iter().enumerate() {
                                                let base = result43.add(i * 12);
                                                {
                                                    match e {
                                                        ParameterType::Text(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let TextType { language_code: language_code41 } = e;
                                                            let vec42 = (language_code41.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr42 = vec42.as_ptr().cast::<u8>();
                                                            let len42 = vec42.len();
                                                            ::core::mem::forget(vec42);
                                                            *base.add(8).cast::<usize>() = len42;
                                                            *base.add(4).cast::<*mut u8>() = ptr42.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base.add(52).cast::<usize>() = len43;
                                            *base.add(48).cast::<*mut u8>() = result43;
                                        }
                                        DataSchema::Multimodal(e) => {
                                            *base.add(44).cast::<u8>() = (1i32) as u8;
                                            let Multimodal { text: text44 } = e;
                                            match text44 {
                                                Some(e) => {
                                                    *base.add(48).cast::<u8>() = (1i32) as u8;
                                                    let vec47 = e;
                                                    let len47 = vec47.len();
                                                    let layout47 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec47.len() * 8,
                                                        4,
                                                    );
                                                    let result47 = if layout47.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout47).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout47);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec47.into_iter().enumerate() {
                                                        let base = result47.add(i * 8);
                                                        {
                                                            let TextType { language_code: language_code45 } = e;
                                                            let vec46 = (language_code45.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                                            let len46 = vec46.len();
                                                            ::core::mem::forget(vec46);
                                                            *base.add(4).cast::<usize>() = len46;
                                                            *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                                        }
                                                    }
                                                    *base.add(56).cast::<usize>() = len47;
                                                    *base.add(52).cast::<*mut u8>() = result47;
                                                }
                                                None => {
                                                    *base.add(48).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *base.add(12).cast::<usize>() = len48;
                            *base.add(8).cast::<*mut u8>() = result48;
                        }
                    }
                    *ptr1.add(28).cast::<usize>() = len49;
                    *ptr1.add(24).cast::<*mut u8>() = result49;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_get_definition<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = *arg0.add(16).cast::<*mut u8>();
                    let l5 = *arg0.add(20).cast::<usize>();
                    let base39 = l4;
                    let len39 = l5;
                    for i in 0..len39 {
                        let base = base39.add(i * 60);
                        {
                            let l6 = *base.add(0).cast::<*mut u8>();
                            let l7 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l6, l7, 1);
                            let l8 = *base.add(8).cast::<*mut u8>();
                            let l9 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                            let l10 = i32::from(*base.add(16).cast::<u8>());
                            match l10 {
                                0 => {}
                                _ => {
                                    let l11 = *base.add(20).cast::<*mut u8>();
                                    let l12 = *base.add(24).cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                            }
                            let l13 = i32::from(*base.add(28).cast::<u8>());
                            match l13 {
                                0 => {
                                    let l14 = *base.add(32).cast::<*mut u8>();
                                    let l15 = *base.add(36).cast::<usize>();
                                    let base19 = l14;
                                    let len19 = l15;
                                    for i in 0..len19 {
                                        let base = base19.add(i * 12);
                                        {
                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                            match l16 {
                                                _ => {
                                                    let l17 = *base.add(4).cast::<*mut u8>();
                                                    let l18 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l17, l18, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base19, len19 * 12, 4);
                                }
                                _ => {
                                    let l20 = i32::from(*base.add(32).cast::<u8>());
                                    match l20 {
                                        0 => {}
                                        _ => {
                                            let l21 = *base.add(36).cast::<*mut u8>();
                                            let l22 = *base.add(40).cast::<usize>();
                                            let base25 = l21;
                                            let len25 = l22;
                                            for i in 0..len25 {
                                                let base = base25.add(i * 8);
                                                {
                                                    let l23 = *base.add(0).cast::<*mut u8>();
                                                    let l24 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base25, len25 * 8, 4);
                                        }
                                    }
                                }
                            }
                            let l26 = i32::from(*base.add(44).cast::<u8>());
                            match l26 {
                                0 => {
                                    let l27 = *base.add(48).cast::<*mut u8>();
                                    let l28 = *base.add(52).cast::<usize>();
                                    let base32 = l27;
                                    let len32 = l28;
                                    for i in 0..len32 {
                                        let base = base32.add(i * 12);
                                        {
                                            let l29 = i32::from(*base.add(0).cast::<u8>());
                                            match l29 {
                                                _ => {
                                                    let l30 = *base.add(4).cast::<*mut u8>();
                                                    let l31 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l30, l31, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base32, len32 * 12, 4);
                                }
                                _ => {
                                    let l33 = i32::from(*base.add(48).cast::<u8>());
                                    match l33 {
                                        0 => {}
                                        _ => {
                                            let l34 = *base.add(52).cast::<*mut u8>();
                                            let l35 = *base.add(56).cast::<usize>();
                                            let base38 = l34;
                                            let len38 = l35;
                                            for i in 0..len38 {
                                                let base = base38.add(i * 8);
                                                {
                                                    let l36 = *base.add(0).cast::<*mut u8>();
                                                    let l37 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l36, l37, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base38, len38 * 8, 4);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(base39, len39 * 60, 4);
                    let l40 = *arg0.add(24).cast::<*mut u8>();
                    let l41 = *arg0.add(28).cast::<usize>();
                    let base80 = l40;
                    let len80 = l41;
                    for i in 0..len80 {
                        let base = base80.add(i * 16);
                        {
                            let l42 = *base.add(0).cast::<*mut u8>();
                            let l43 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l42, l43, 1);
                            let l44 = *base.add(8).cast::<*mut u8>();
                            let l45 = *base.add(12).cast::<usize>();
                            let base79 = l44;
                            let len79 = l45;
                            for i in 0..len79 {
                                let base = base79.add(i * 60);
                                {
                                    let l46 = *base.add(0).cast::<*mut u8>();
                                    let l47 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l46, l47, 1);
                                    let l48 = *base.add(8).cast::<*mut u8>();
                                    let l49 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l48, l49, 1);
                                    let l50 = i32::from(*base.add(16).cast::<u8>());
                                    match l50 {
                                        0 => {}
                                        _ => {
                                            let l51 = *base.add(20).cast::<*mut u8>();
                                            let l52 = *base.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l51, l52, 1);
                                        }
                                    }
                                    let l53 = i32::from(*base.add(28).cast::<u8>());
                                    match l53 {
                                        0 => {
                                            let l54 = *base.add(32).cast::<*mut u8>();
                                            let l55 = *base.add(36).cast::<usize>();
                                            let base59 = l54;
                                            let len59 = l55;
                                            for i in 0..len59 {
                                                let base = base59.add(i * 12);
                                                {
                                                    let l56 = i32::from(*base.add(0).cast::<u8>());
                                                    match l56 {
                                                        _ => {
                                                            let l57 = *base.add(4).cast::<*mut u8>();
                                                            let l58 = *base.add(8).cast::<usize>();
                                                            _rt::cabi_dealloc(l57, l58, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base59, len59 * 12, 4);
                                        }
                                        _ => {
                                            let l60 = i32::from(*base.add(32).cast::<u8>());
                                            match l60 {
                                                0 => {}
                                                _ => {
                                                    let l61 = *base.add(36).cast::<*mut u8>();
                                                    let l62 = *base.add(40).cast::<usize>();
                                                    let base65 = l61;
                                                    let len65 = l62;
                                                    for i in 0..len65 {
                                                        let base = base65.add(i * 8);
                                                        {
                                                            let l63 = *base.add(0).cast::<*mut u8>();
                                                            let l64 = *base.add(4).cast::<usize>();
                                                            _rt::cabi_dealloc(l63, l64, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base65, len65 * 8, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l66 = i32::from(*base.add(44).cast::<u8>());
                                    match l66 {
                                        0 => {
                                            let l67 = *base.add(48).cast::<*mut u8>();
                                            let l68 = *base.add(52).cast::<usize>();
                                            let base72 = l67;
                                            let len72 = l68;
                                            for i in 0..len72 {
                                                let base = base72.add(i * 12);
                                                {
                                                    let l69 = i32::from(*base.add(0).cast::<u8>());
                                                    match l69 {
                                                        _ => {
                                                            let l70 = *base.add(4).cast::<*mut u8>();
                                                            let l71 = *base.add(8).cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base72, len72 * 12, 4);
                                        }
                                        _ => {
                                            let l73 = i32::from(*base.add(48).cast::<u8>());
                                            match l73 {
                                                0 => {}
                                                _ => {
                                                    let l74 = *base.add(52).cast::<*mut u8>();
                                                    let l75 = *base.add(56).cast::<usize>();
                                                    let base78 = l74;
                                                    let len78 = l75;
                                                    for i in 0..len78 {
                                                        let base = base78.add(i * 8);
                                                        {
                                                            let l76 = *base.add(0).cast::<*mut u8>();
                                                            let l77 = *base.add(4).cast::<usize>();
                                                            _rt::cabi_dealloc(l76, l77, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base78, len78 * 8, 4);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base79, len79 * 60, 4);
                        }
                    }
                    _rt::cabi_dealloc(base80, len80 * 16, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_discover_agent_definitions_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::discover_agent_definitions();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec50 = result0;
                    let len50 = vec50.len();
                    let layout50 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec50.len() * 32,
                        4,
                    );
                    let result50 = if layout50.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout50).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout50);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec50.into_iter().enumerate() {
                        let base = result50.add(i * 32);
                        {
                            let AgentDefinition {
                                agent_name: agent_name2,
                                description: description2,
                                methods: methods2,
                                requires: requires2,
                            } = e;
                            let vec3 = (agent_name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base.add(4).cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (description2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base.add(12).cast::<usize>() = len4;
                            *base.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec25 = methods2;
                            let len25 = vec25.len();
                            let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec25.len() * 60,
                                4,
                            );
                            let result25 = if layout25.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout25);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec25.into_iter().enumerate() {
                                let base = result25.add(i * 60);
                                {
                                    let AgentMethod {
                                        name: name5,
                                        description: description5,
                                        prompt_hint: prompt_hint5,
                                        input_schema: input_schema5,
                                        output_schema: output_schema5,
                                    } = e;
                                    let vec6 = (name5.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base.add(4).cast::<usize>() = len6;
                                    *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
                                    let vec7 = (description5.into_bytes()).into_boxed_slice();
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    ::core::mem::forget(vec7);
                                    *base.add(12).cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                    match prompt_hint5 {
                                        Some(e) => {
                                            *base.add(16).cast::<u8>() = (1i32) as u8;
                                            let vec8 = (e.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base.add(24).cast::<usize>() = len8;
                                            *base.add(20).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        None => {
                                            *base.add(16).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match input_schema5 {
                                        DataSchema::Structured(e) => {
                                            *base.add(28).cast::<u8>() = (0i32) as u8;
                                            let Structured { parameters: parameters9 } = e;
                                            let vec12 = parameters9;
                                            let len12 = vec12.len();
                                            let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec12.len() * 12,
                                                4,
                                            );
                                            let result12 = if layout12.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout12);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec12.into_iter().enumerate() {
                                                let base = result12.add(i * 12);
                                                {
                                                    match e {
                                                        ParameterType::Text(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let TextType { language_code: language_code10 } = e;
                                                            let vec11 = (language_code10.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                                            let len11 = vec11.len();
                                                            ::core::mem::forget(vec11);
                                                            *base.add(8).cast::<usize>() = len11;
                                                            *base.add(4).cast::<*mut u8>() = ptr11.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base.add(36).cast::<usize>() = len12;
                                            *base.add(32).cast::<*mut u8>() = result12;
                                        }
                                        DataSchema::Multimodal(e) => {
                                            *base.add(28).cast::<u8>() = (1i32) as u8;
                                            let Multimodal { text: text13 } = e;
                                            match text13 {
                                                Some(e) => {
                                                    *base.add(32).cast::<u8>() = (1i32) as u8;
                                                    let vec16 = e;
                                                    let len16 = vec16.len();
                                                    let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec16.len() * 8,
                                                        4,
                                                    );
                                                    let result16 = if layout16.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout16);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec16.into_iter().enumerate() {
                                                        let base = result16.add(i * 8);
                                                        {
                                                            let TextType { language_code: language_code14 } = e;
                                                            let vec15 = (language_code14.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                                            let len15 = vec15.len();
                                                            ::core::mem::forget(vec15);
                                                            *base.add(4).cast::<usize>() = len15;
                                                            *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                        }
                                                    }
                                                    *base.add(40).cast::<usize>() = len16;
                                                    *base.add(36).cast::<*mut u8>() = result16;
                                                }
                                                None => {
                                                    *base.add(32).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    match output_schema5 {
                                        DataSchema::Structured(e) => {
                                            *base.add(44).cast::<u8>() = (0i32) as u8;
                                            let Structured { parameters: parameters17 } = e;
                                            let vec20 = parameters17;
                                            let len20 = vec20.len();
                                            let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec20.len() * 12,
                                                4,
                                            );
                                            let result20 = if layout20.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout20);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec20.into_iter().enumerate() {
                                                let base = result20.add(i * 12);
                                                {
                                                    match e {
                                                        ParameterType::Text(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let TextType { language_code: language_code18 } = e;
                                                            let vec19 = (language_code18.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                            let len19 = vec19.len();
                                                            ::core::mem::forget(vec19);
                                                            *base.add(8).cast::<usize>() = len19;
                                                            *base.add(4).cast::<*mut u8>() = ptr19.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                            *base.add(52).cast::<usize>() = len20;
                                            *base.add(48).cast::<*mut u8>() = result20;
                                        }
                                        DataSchema::Multimodal(e) => {
                                            *base.add(44).cast::<u8>() = (1i32) as u8;
                                            let Multimodal { text: text21 } = e;
                                            match text21 {
                                                Some(e) => {
                                                    *base.add(48).cast::<u8>() = (1i32) as u8;
                                                    let vec24 = e;
                                                    let len24 = vec24.len();
                                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec24.len() * 8,
                                                        4,
                                                    );
                                                    let result24 = if layout24.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout24);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec24.into_iter().enumerate() {
                                                        let base = result24.add(i * 8);
                                                        {
                                                            let TextType { language_code: language_code22 } = e;
                                                            let vec23 = (language_code22.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                                            let len23 = vec23.len();
                                                            ::core::mem::forget(vec23);
                                                            *base.add(4).cast::<usize>() = len23;
                                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                                        }
                                                    }
                                                    *base.add(56).cast::<usize>() = len24;
                                                    *base.add(52).cast::<*mut u8>() = result24;
                                                }
                                                None => {
                                                    *base.add(48).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *base.add(20).cast::<usize>() = len25;
                            *base.add(16).cast::<*mut u8>() = result25;
                            let vec49 = requires2;
                            let len49 = vec49.len();
                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec49.len() * 16,
                                4,
                            );
                            let result49 = if layout49.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout49);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec49.into_iter().enumerate() {
                                let base = result49.add(i * 16);
                                {
                                    let AgentDependency {
                                        agent_name: agent_name26,
                                        methods: methods26,
                                    } = e;
                                    let vec27 = (agent_name26.into_bytes()).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *base.add(4).cast::<usize>() = len27;
                                    *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                    let vec48 = methods26;
                                    let len48 = vec48.len();
                                    let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec48.len() * 60,
                                        4,
                                    );
                                    let result48 = if layout48.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout48);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec48.into_iter().enumerate() {
                                        let base = result48.add(i * 60);
                                        {
                                            let AgentMethod {
                                                name: name28,
                                                description: description28,
                                                prompt_hint: prompt_hint28,
                                                input_schema: input_schema28,
                                                output_schema: output_schema28,
                                            } = e;
                                            let vec29 = (name28.into_bytes()).into_boxed_slice();
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            ::core::mem::forget(vec29);
                                            *base.add(4).cast::<usize>() = len29;
                                            *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                            let vec30 = (description28.into_bytes()).into_boxed_slice();
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();
                                            ::core::mem::forget(vec30);
                                            *base.add(12).cast::<usize>() = len30;
                                            *base.add(8).cast::<*mut u8>() = ptr30.cast_mut();
                                            match prompt_hint28 {
                                                Some(e) => {
                                                    *base.add(16).cast::<u8>() = (1i32) as u8;
                                                    let vec31 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                                    let len31 = vec31.len();
                                                    ::core::mem::forget(vec31);
                                                    *base.add(24).cast::<usize>() = len31;
                                                    *base.add(20).cast::<*mut u8>() = ptr31.cast_mut();
                                                }
                                                None => {
                                                    *base.add(16).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match input_schema28 {
                                                DataSchema::Structured(e) => {
                                                    *base.add(28).cast::<u8>() = (0i32) as u8;
                                                    let Structured { parameters: parameters32 } = e;
                                                    let vec35 = parameters32;
                                                    let len35 = vec35.len();
                                                    let layout35 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec35.len() * 12,
                                                        4,
                                                    );
                                                    let result35 = if layout35.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout35).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout35);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec35.into_iter().enumerate() {
                                                        let base = result35.add(i * 12);
                                                        {
                                                            match e {
                                                                ParameterType::Text(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let TextType { language_code: language_code33 } = e;
                                                                    let vec34 = (language_code33.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr34 = vec34.as_ptr().cast::<u8>();
                                                                    let len34 = vec34.len();
                                                                    ::core::mem::forget(vec34);
                                                                    *base.add(8).cast::<usize>() = len34;
                                                                    *base.add(4).cast::<*mut u8>() = ptr34.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base.add(36).cast::<usize>() = len35;
                                                    *base.add(32).cast::<*mut u8>() = result35;
                                                }
                                                DataSchema::Multimodal(e) => {
                                                    *base.add(28).cast::<u8>() = (1i32) as u8;
                                                    let Multimodal { text: text36 } = e;
                                                    match text36 {
                                                        Some(e) => {
                                                            *base.add(32).cast::<u8>() = (1i32) as u8;
                                                            let vec39 = e;
                                                            let len39 = vec39.len();
                                                            let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec39.len() * 8,
                                                                4,
                                                            );
                                                            let result39 = if layout39.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout39);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec39.into_iter().enumerate() {
                                                                let base = result39.add(i * 8);
                                                                {
                                                                    let TextType { language_code: language_code37 } = e;
                                                                    let vec38 = (language_code37.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr38 = vec38.as_ptr().cast::<u8>();
                                                                    let len38 = vec38.len();
                                                                    ::core::mem::forget(vec38);
                                                                    *base.add(4).cast::<usize>() = len38;
                                                                    *base.add(0).cast::<*mut u8>() = ptr38.cast_mut();
                                                                }
                                                            }
                                                            *base.add(40).cast::<usize>() = len39;
                                                            *base.add(36).cast::<*mut u8>() = result39;
                                                        }
                                                        None => {
                                                            *base.add(32).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                            match output_schema28 {
                                                DataSchema::Structured(e) => {
                                                    *base.add(44).cast::<u8>() = (0i32) as u8;
                                                    let Structured { parameters: parameters40 } = e;
                                                    let vec43 = parameters40;
                                                    let len43 = vec43.len();
                                                    let layout43 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec43.len() * 12,
                                                        4,
                                                    );
                                                    let result43 = if layout43.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout43).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout43);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec43.into_iter().enumerate() {
                                                        let base = result43.add(i * 12);
                                                        {
                                                            match e {
                                                                ParameterType::Text(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let TextType { language_code: language_code41 } = e;
                                                                    let vec42 = (language_code41.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr42 = vec42.as_ptr().cast::<u8>();
                                                                    let len42 = vec42.len();
                                                                    ::core::mem::forget(vec42);
                                                                    *base.add(8).cast::<usize>() = len42;
                                                                    *base.add(4).cast::<*mut u8>() = ptr42.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base.add(52).cast::<usize>() = len43;
                                                    *base.add(48).cast::<*mut u8>() = result43;
                                                }
                                                DataSchema::Multimodal(e) => {
                                                    *base.add(44).cast::<u8>() = (1i32) as u8;
                                                    let Multimodal { text: text44 } = e;
                                                    match text44 {
                                                        Some(e) => {
                                                            *base.add(48).cast::<u8>() = (1i32) as u8;
                                                            let vec47 = e;
                                                            let len47 = vec47.len();
                                                            let layout47 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec47.len() * 8,
                                                                4,
                                                            );
                                                            let result47 = if layout47.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout47).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout47);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec47.into_iter().enumerate() {
                                                                let base = result47.add(i * 8);
                                                                {
                                                                    let TextType { language_code: language_code45 } = e;
                                                                    let vec46 = (language_code45.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr46 = vec46.as_ptr().cast::<u8>();
                                                                    let len46 = vec46.len();
                                                                    ::core::mem::forget(vec46);
                                                                    *base.add(4).cast::<usize>() = len46;
                                                                    *base.add(0).cast::<*mut u8>() = ptr46.cast_mut();
                                                                }
                                                            }
                                                            *base.add(56).cast::<usize>() = len47;
                                                            *base.add(52).cast::<*mut u8>() = result47;
                                                        }
                                                        None => {
                                                            *base.add(48).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len48;
                                    *base.add(8).cast::<*mut u8>() = result48;
                                }
                            }
                            *base.add(28).cast::<usize>() = len49;
                            *base.add(24).cast::<*mut u8>() = result49;
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len50;
                    *ptr1.add(0).cast::<*mut u8>() = result50;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_discover_agent_definitions<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base83 = l0;
                    let len83 = l1;
                    for i in 0..len83 {
                        let base = base83.add(i * 32);
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base.add(8).cast::<*mut u8>();
                            let l5 = *base.add(12).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = *base.add(16).cast::<*mut u8>();
                            let l7 = *base.add(20).cast::<usize>();
                            let base41 = l6;
                            let len41 = l7;
                            for i in 0..len41 {
                                let base = base41.add(i * 60);
                                {
                                    let l8 = *base.add(0).cast::<*mut u8>();
                                    let l9 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                    let l10 = *base.add(8).cast::<*mut u8>();
                                    let l11 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l10, l11, 1);
                                    let l12 = i32::from(*base.add(16).cast::<u8>());
                                    match l12 {
                                        0 => {}
                                        _ => {
                                            let l13 = *base.add(20).cast::<*mut u8>();
                                            let l14 = *base.add(24).cast::<usize>();
                                            _rt::cabi_dealloc(l13, l14, 1);
                                        }
                                    }
                                    let l15 = i32::from(*base.add(28).cast::<u8>());
                                    match l15 {
                                        0 => {
                                            let l16 = *base.add(32).cast::<*mut u8>();
                                            let l17 = *base.add(36).cast::<usize>();
                                            let base21 = l16;
                                            let len21 = l17;
                                            for i in 0..len21 {
                                                let base = base21.add(i * 12);
                                                {
                                                    let l18 = i32::from(*base.add(0).cast::<u8>());
                                                    match l18 {
                                                        _ => {
                                                            let l19 = *base.add(4).cast::<*mut u8>();
                                                            let l20 = *base.add(8).cast::<usize>();
                                                            _rt::cabi_dealloc(l19, l20, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base21, len21 * 12, 4);
                                        }
                                        _ => {
                                            let l22 = i32::from(*base.add(32).cast::<u8>());
                                            match l22 {
                                                0 => {}
                                                _ => {
                                                    let l23 = *base.add(36).cast::<*mut u8>();
                                                    let l24 = *base.add(40).cast::<usize>();
                                                    let base27 = l23;
                                                    let len27 = l24;
                                                    for i in 0..len27 {
                                                        let base = base27.add(i * 8);
                                                        {
                                                            let l25 = *base.add(0).cast::<*mut u8>();
                                                            let l26 = *base.add(4).cast::<usize>();
                                                            _rt::cabi_dealloc(l25, l26, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base27, len27 * 8, 4);
                                                }
                                            }
                                        }
                                    }
                                    let l28 = i32::from(*base.add(44).cast::<u8>());
                                    match l28 {
                                        0 => {
                                            let l29 = *base.add(48).cast::<*mut u8>();
                                            let l30 = *base.add(52).cast::<usize>();
                                            let base34 = l29;
                                            let len34 = l30;
                                            for i in 0..len34 {
                                                let base = base34.add(i * 12);
                                                {
                                                    let l31 = i32::from(*base.add(0).cast::<u8>());
                                                    match l31 {
                                                        _ => {
                                                            let l32 = *base.add(4).cast::<*mut u8>();
                                                            let l33 = *base.add(8).cast::<usize>();
                                                            _rt::cabi_dealloc(l32, l33, 1);
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(base34, len34 * 12, 4);
                                        }
                                        _ => {
                                            let l35 = i32::from(*base.add(48).cast::<u8>());
                                            match l35 {
                                                0 => {}
                                                _ => {
                                                    let l36 = *base.add(52).cast::<*mut u8>();
                                                    let l37 = *base.add(56).cast::<usize>();
                                                    let base40 = l36;
                                                    let len40 = l37;
                                                    for i in 0..len40 {
                                                        let base = base40.add(i * 8);
                                                        {
                                                            let l38 = *base.add(0).cast::<*mut u8>();
                                                            let l39 = *base.add(4).cast::<usize>();
                                                            _rt::cabi_dealloc(l38, l39, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base40, len40 * 8, 4);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base41, len41 * 60, 4);
                            let l42 = *base.add(24).cast::<*mut u8>();
                            let l43 = *base.add(28).cast::<usize>();
                            let base82 = l42;
                            let len82 = l43;
                            for i in 0..len82 {
                                let base = base82.add(i * 16);
                                {
                                    let l44 = *base.add(0).cast::<*mut u8>();
                                    let l45 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l44, l45, 1);
                                    let l46 = *base.add(8).cast::<*mut u8>();
                                    let l47 = *base.add(12).cast::<usize>();
                                    let base81 = l46;
                                    let len81 = l47;
                                    for i in 0..len81 {
                                        let base = base81.add(i * 60);
                                        {
                                            let l48 = *base.add(0).cast::<*mut u8>();
                                            let l49 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l48, l49, 1);
                                            let l50 = *base.add(8).cast::<*mut u8>();
                                            let l51 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l50, l51, 1);
                                            let l52 = i32::from(*base.add(16).cast::<u8>());
                                            match l52 {
                                                0 => {}
                                                _ => {
                                                    let l53 = *base.add(20).cast::<*mut u8>();
                                                    let l54 = *base.add(24).cast::<usize>();
                                                    _rt::cabi_dealloc(l53, l54, 1);
                                                }
                                            }
                                            let l55 = i32::from(*base.add(28).cast::<u8>());
                                            match l55 {
                                                0 => {
                                                    let l56 = *base.add(32).cast::<*mut u8>();
                                                    let l57 = *base.add(36).cast::<usize>();
                                                    let base61 = l56;
                                                    let len61 = l57;
                                                    for i in 0..len61 {
                                                        let base = base61.add(i * 12);
                                                        {
                                                            let l58 = i32::from(*base.add(0).cast::<u8>());
                                                            match l58 {
                                                                _ => {
                                                                    let l59 = *base.add(4).cast::<*mut u8>();
                                                                    let l60 = *base.add(8).cast::<usize>();
                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base61, len61 * 12, 4);
                                                }
                                                _ => {
                                                    let l62 = i32::from(*base.add(32).cast::<u8>());
                                                    match l62 {
                                                        0 => {}
                                                        _ => {
                                                            let l63 = *base.add(36).cast::<*mut u8>();
                                                            let l64 = *base.add(40).cast::<usize>();
                                                            let base67 = l63;
                                                            let len67 = l64;
                                                            for i in 0..len67 {
                                                                let base = base67.add(i * 8);
                                                                {
                                                                    let l65 = *base.add(0).cast::<*mut u8>();
                                                                    let l66 = *base.add(4).cast::<usize>();
                                                                    _rt::cabi_dealloc(l65, l66, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base67, len67 * 8, 4);
                                                        }
                                                    }
                                                }
                                            }
                                            let l68 = i32::from(*base.add(44).cast::<u8>());
                                            match l68 {
                                                0 => {
                                                    let l69 = *base.add(48).cast::<*mut u8>();
                                                    let l70 = *base.add(52).cast::<usize>();
                                                    let base74 = l69;
                                                    let len74 = l70;
                                                    for i in 0..len74 {
                                                        let base = base74.add(i * 12);
                                                        {
                                                            let l71 = i32::from(*base.add(0).cast::<u8>());
                                                            match l71 {
                                                                _ => {
                                                                    let l72 = *base.add(4).cast::<*mut u8>();
                                                                    let l73 = *base.add(8).cast::<usize>();
                                                                    _rt::cabi_dealloc(l72, l73, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(base74, len74 * 12, 4);
                                                }
                                                _ => {
                                                    let l75 = i32::from(*base.add(48).cast::<u8>());
                                                    match l75 {
                                                        0 => {}
                                                        _ => {
                                                            let l76 = *base.add(52).cast::<*mut u8>();
                                                            let l77 = *base.add(56).cast::<usize>();
                                                            let base80 = l76;
                                                            let len80 = l77;
                                                            for i in 0..len80 {
                                                                let base = base80.add(i * 8);
                                                                {
                                                                    let l78 = *base.add(0).cast::<*mut u8>();
                                                                    let l79 = *base.add(4).cast::<usize>();
                                                                    _rt::cabi_dealloc(l78, l79, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(base80, len80 * 8, 4);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base81, len81 * 60, 4);
                                }
                            }
                            _rt::cabi_dealloc(base82, len82 * 16, 4);
                        }
                    }
                    _rt::cabi_dealloc(base83, len83 * 32, 4);
                }
                pub trait Guest {
                    type Agent: GuestAgent;
                    fn discover_agent_definitions() -> _rt::Vec<AgentDefinition>;
                }
                pub trait GuestAgent: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agentic/guest")]
                            extern "C" {
                                #[link_name = "[resource-new]agent"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agentic/guest")]
                            extern "C" {
                                #[link_name = "[resource-rep]agent"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn new(agent_name: _rt::String, agent_id: _rt::String) -> Self;
                    fn invoke(
                        &self,
                        method_name: _rt::String,
                        input: _rt::Vec<_rt::String>,
                    ) -> StatusUpdate;
                    fn get_definition(&self) -> AgentDefinition;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_agentic_guest_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[export_name =
                        "golem:agentic/guest#[constructor]agent"] unsafe extern "C" fn
                        export_constructor_agent(arg0 : * mut u8, arg1 : usize, arg2 : *
                        mut u8, arg3 : usize,) -> i32 { $($path_to_types)*::
                        _export_constructor_agent_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0, arg1, arg2, arg3) } #[export_name =
                        "golem:agentic/guest#[method]agent.invoke"] unsafe extern "C" fn
                        export_method_agent_invoke(arg0 : * mut u8, arg1 : * mut u8, arg2
                        : usize, arg3 : * mut u8, arg4 : usize,) -> * mut u8 {
                        $($path_to_types)*:: _export_method_agent_invoke_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0, arg1, arg2, arg3,
                        arg4) } #[export_name =
                        "cabi_post_golem:agentic/guest#[method]agent.invoke"] unsafe
                        extern "C" fn _post_return_method_agent_invoke(arg0 : * mut u8,)
                        { $($path_to_types)*:: __post_return_method_agent_invoke::<<$ty
                        as $($path_to_types)*:: Guest >::Agent > (arg0) } #[export_name =
                        "golem:agentic/guest#[method]agent.get-definition"] unsafe extern
                        "C" fn export_method_agent_get_definition(arg0 : * mut u8,) -> *
                        mut u8 { $($path_to_types)*::
                        _export_method_agent_get_definition_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } #[export_name =
                        "cabi_post_golem:agentic/guest#[method]agent.get-definition"]
                        unsafe extern "C" fn
                        _post_return_method_agent_get_definition(arg0 : * mut u8,) {
                        $($path_to_types)*::
                        __post_return_method_agent_get_definition::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } #[export_name =
                        "golem:agentic/guest#discover-agent-definitions"] unsafe extern
                        "C" fn export_discover_agent_definitions() -> * mut u8 {
                        $($path_to_types)*::
                        _export_discover_agent_definitions_cabi::<$ty > () }
                        #[export_name =
                        "cabi_post_golem:agentic/guest#discover-agent-definitions"]
                        unsafe extern "C" fn _post_return_discover_agent_definitions(arg0
                        : * mut u8,) { $($path_to_types)*::
                        __post_return_discover_agent_definitions::<$ty > (arg0) } const _
                        : () = { #[doc(hidden)] #[export_name =
                        "golem:agentic/guest#[dtor]agent"] #[allow(non_snake_case)]
                        unsafe extern "C" fn dtor(rep : * mut u8) { $($path_to_types)*::
                        Agent::dtor::< <$ty as $($path_to_types)*:: Guest >::Agent >
                        (rep) } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_agentic_guest_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 32],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_agentic_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::agentic::guest::__export_golem_agentic_guest_cabi!($ty
        with_types_in $($path_to_types_root)*:: exports::golem::agentic::guest);
    };
}
#[doc(inline)]
pub(crate) use __export_agentic_impl as export;
#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.36.0:golem:agentic:agentic:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1024] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x82\x07\x01A\x02\x01\
A\x02\x01B2\x01q\x01\x04text\x01s\0\x04\0\x0fparameter-value\x03\0\0\x01p\x01\x01\
q\x02\x04text\x01s\0\x0astructured\x01\x02\0\x04\0\x0adata-value\x03\0\x03\x01r\x01\
\x0dlanguage-codes\x04\0\x09text-type\x03\0\x05\x01q\x01\x04text\x01\x06\0\x04\0\
\x0eparameter-type\x03\0\x07\x01p\x08\x01r\x01\x0aparameters\x09\x04\0\x0astruct\
ured\x03\0\x0a\x01p\x06\x01k\x0c\x01r\x01\x04text\x0d\x04\0\x0amultimodal\x03\0\x0e\
\x01q\x02\x0astructured\x01\x0b\0\x0amultimodal\x01\x0f\0\x04\0\x0bdata-schema\x03\
\0\x10\x01ks\x01r\x05\x04names\x0bdescriptions\x0bprompt-hint\x12\x0cinput-schem\
a\x11\x0doutput-schema\x11\x04\0\x0cagent-method\x03\0\x13\x01p\x14\x01r\x02\x0a\
agent-names\x07methods\x15\x04\0\x10agent-dependency\x03\0\x16\x01p\x17\x01r\x04\
\x0aagent-names\x0bdescriptions\x07methods\x15\x08requires\x18\x04\0\x10agent-de\
finition\x03\0\x19\x01r\x02\x05stepsy\x05totaly\x04\0\x10progress-counter\x03\0\x1b\
\x01k\x1c\x01r\x02\x0bdescriptions\x07counter\x1d\x04\0\x0fprogress-report\x03\0\
\x1e\x01q\x01\x0dnetwork-error\0\0\x04\0\x05error\x03\0\x20\x01k\x1f\x01q\x03\x05\
error\x01!\0\x08progress\x01\"\0\x04emit\x01s\0\x04\0\x0dstatus-update\x03\0#\x04\
\0\x05agent\x03\x01\x01i%\x01@\x02\x0aagent-names\x08agent-ids\0&\x04\0\x12[cons\
tructor]agent\x01'\x01h%\x01ps\x01@\x03\x04self(\x0bmethod-names\x05input)\0$\x04\
\0\x14[method]agent.invoke\x01*\x01@\x01\x04self(\0\x1a\x04\0\x1c[method]agent.g\
et-definition\x01+\x01p\x1a\x01@\0\0,\x04\0\x1adiscover-agent-definitions\x01-\x04\
\0\x13golem:agentic/guest\x05\0\x04\0\x15golem:agentic/agentic\x04\0\x0b\x0d\x01\
\0\x07agentic\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x07\
0.220.0\x10wit-bindgen-rust\x060.36.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
