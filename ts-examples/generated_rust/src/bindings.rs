// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod agent {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod common {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type WitType = super::super::super::golem::rpc::types::WitType;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type Url = _rt::String;
            #[derive(Clone)]
            pub struct TextType {
                pub language_code: _rt::String,
            }
            impl ::core::fmt::Debug for TextType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextType")
                        .field("language-code", &self.language_code)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TextSource {
                pub data: _rt::String,
                pub text_type: Option<TextType>,
            }
            impl ::core::fmt::Debug for TextSource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextSource")
                        .field("data", &self.data)
                        .field("text-type", &self.text_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum TextReference {
                Url(_rt::String),
                Inline(TextSource),
            }
            impl ::core::fmt::Debug for TextReference {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        TextReference::Url(e) => {
                            f.debug_tuple("TextReference::Url").field(e).finish()
                        }
                        TextReference::Inline(e) => {
                            f.debug_tuple("TextReference::Inline").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct TextDescriptor {
                pub restrictions: Option<_rt::Vec<TextType>>,
            }
            impl ::core::fmt::Debug for TextDescriptor {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextDescriptor")
                        .field("restrictions", &self.restrictions)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BinaryType {
                pub mime_type: _rt::String,
            }
            impl ::core::fmt::Debug for BinaryType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinaryType")
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BinaryDescriptor {
                pub restrictions: Option<_rt::Vec<BinaryType>>,
            }
            impl ::core::fmt::Debug for BinaryDescriptor {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinaryDescriptor")
                        .field("restrictions", &self.restrictions)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum ElementSchema {
                ComponentModel(WitType),
                UnstructuredText(TextDescriptor),
                UnstructuredBinary(BinaryDescriptor),
            }
            impl ::core::fmt::Debug for ElementSchema {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ElementSchema::ComponentModel(e) => {
                            f.debug_tuple("ElementSchema::ComponentModel")
                                .field(e)
                                .finish()
                        }
                        ElementSchema::UnstructuredText(e) => {
                            f.debug_tuple("ElementSchema::UnstructuredText")
                                .field(e)
                                .finish()
                        }
                        ElementSchema::UnstructuredBinary(e) => {
                            f.debug_tuple("ElementSchema::UnstructuredBinary")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum DataSchema {
                /// List of named elements
                Tuple(_rt::Vec<(_rt::String, ElementSchema)>),
                /// List of named variants that can be used 0 or more times in a multimodal `data-value`
                Multimodal(_rt::Vec<(_rt::String, ElementSchema)>),
            }
            impl ::core::fmt::Debug for DataSchema {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DataSchema::Tuple(e) => {
                            f.debug_tuple("DataSchema::Tuple").field(e).finish()
                        }
                        DataSchema::Multimodal(e) => {
                            f.debug_tuple("DataSchema::Multimodal").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct AgentMethod {
                pub name: _rt::String,
                pub description: _rt::String,
                pub prompt_hint: Option<_rt::String>,
                pub input_schema: DataSchema,
                pub output_schema: DataSchema,
            }
            impl ::core::fmt::Debug for AgentMethod {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentMethod")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("prompt-hint", &self.prompt_hint)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AgentConstructor {
                pub name: Option<_rt::String>,
                pub description: _rt::String,
                pub prompt_hint: Option<_rt::String>,
                pub input_schema: DataSchema,
            }
            impl ::core::fmt::Debug for AgentConstructor {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentConstructor")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("prompt-hint", &self.prompt_hint)
                        .field("input-schema", &self.input_schema)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AgentDependency {
                pub type_name: _rt::String,
                pub description: Option<_rt::String>,
                pub constructor: AgentConstructor,
                pub methods: _rt::Vec<AgentMethod>,
            }
            impl ::core::fmt::Debug for AgentDependency {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentDependency")
                        .field("type-name", &self.type_name)
                        .field("description", &self.description)
                        .field("constructor", &self.constructor)
                        .field("methods", &self.methods)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AgentType {
                pub type_name: _rt::String,
                pub description: _rt::String,
                pub constructor: AgentConstructor,
                pub methods: _rt::Vec<AgentMethod>,
                pub dependencies: _rt::Vec<AgentDependency>,
            }
            impl ::core::fmt::Debug for AgentType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentType")
                        .field("type-name", &self.type_name)
                        .field("description", &self.description)
                        .field("constructor", &self.constructor)
                        .field("methods", &self.methods)
                        .field("dependencies", &self.dependencies)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BinarySource {
                pub data: _rt::Vec<u8>,
                pub binary_type: BinaryType,
            }
            impl ::core::fmt::Debug for BinarySource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinarySource")
                        .field("data", &self.data)
                        .field("binary-type", &self.binary_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum BinaryReference {
                Url(Url),
                Inline(BinarySource),
            }
            impl ::core::fmt::Debug for BinaryReference {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        BinaryReference::Url(e) => {
                            f.debug_tuple("BinaryReference::Url").field(e).finish()
                        }
                        BinaryReference::Inline(e) => {
                            f.debug_tuple("BinaryReference::Inline").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum ElementValue {
                ComponentModel(WitValue),
                UnstructuredText(TextReference),
                UnstructuredBinary(BinaryReference),
            }
            impl ::core::fmt::Debug for ElementValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ElementValue::ComponentModel(e) => {
                            f.debug_tuple("ElementValue::ComponentModel")
                                .field(e)
                                .finish()
                        }
                        ElementValue::UnstructuredText(e) => {
                            f.debug_tuple("ElementValue::UnstructuredText")
                                .field(e)
                                .finish()
                        }
                        ElementValue::UnstructuredBinary(e) => {
                            f.debug_tuple("ElementValue::UnstructuredBinary")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum DataValue {
                /// List of element values, each corresponding to an element of the tuple `data-schema`
                Tuple(_rt::Vec<ElementValue>),
                /// List of element values and their schema names; each name points to one named element of the corresponding
                /// multimodal `data-schema`.
                Multimodal(_rt::Vec<(_rt::String, ElementValue)>),
            }
            impl ::core::fmt::Debug for DataValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DataValue::Tuple(e) => {
                            f.debug_tuple("DataValue::Tuple").field(e).finish()
                        }
                        DataValue::Multimodal(e) => {
                            f.debug_tuple("DataValue::Multimodal").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum AgentError {
                InvalidInput(_rt::String),
                InvalidMethod(_rt::String),
                InvalidType(_rt::String),
                InvalidAgentId(_rt::String),
                CustomError(DataValue),
            }
            impl ::core::fmt::Debug for AgentError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentError::InvalidInput(e) => {
                            f.debug_tuple("AgentError::InvalidInput").field(e).finish()
                        }
                        AgentError::InvalidMethod(e) => {
                            f.debug_tuple("AgentError::InvalidMethod").field(e).finish()
                        }
                        AgentError::InvalidType(e) => {
                            f.debug_tuple("AgentError::InvalidType").field(e).finish()
                        }
                        AgentError::InvalidAgentId(e) => {
                            f.debug_tuple("AgentError::InvalidAgentId").field(e).finish()
                        }
                        AgentError::CustomError(e) => {
                            f.debug_tuple("AgentError::CustomError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for AgentError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for AgentError {}
        }
    }
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type ComponentId = super::super::super::golem::rpc::types::ComponentId;
            pub type Uuid = super::super::super::golem::rpc::types::Uuid;
            pub type WorkerId = super::super::super::golem::rpc::types::WorkerId;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => {
                            f.debug_tuple("WorkerStatus::Running").finish()
                        }
                        WorkerStatus::Idle => {
                            f.debug_tuple("WorkerStatus::Idle").finish()
                        }
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => {
                            f.debug_tuple("WorkerStatus::Retrying").finish()
                        }
                        WorkerStatus::Failed => {
                            f.debug_tuple("WorkerStatus::Failed").finish()
                        }
                        WorkerStatus::Exited => {
                            f.debug_tuple("WorkerStatus::Exited").finish()
                        }
                    }
                }
            }
            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Name").field(e).finish()
                        }
                        WorkerPropertyFilter::Status(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Version(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("WorkerPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }
            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Target parameter for the `revert-worker` operation
            #[derive(Clone, Copy)]
            pub enum RevertWorkerTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertWorkerTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Indicates which worker the code is running on after `fork`
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ForkResult {
                /// The original worker that called `fork`
                Original,
                /// The new worker
                Forked,
            }
            impl ::core::fmt::Debug for ForkResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ForkResult::Original => {
                            f.debug_tuple("ForkResult::Original").finish()
                        }
                        ForkResult::Forked => {
                            f.debug_tuple("ForkResult::Forked").finish()
                        }
                    }
                }
            }
            impl ForkResult {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ForkResult {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ForkResult::Original,
                        1 => ForkResult::Forked,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid0,
                        } = component_id;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result14_0, result14_1, result14_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec13 = filters2;
                                let len13 = vec13.len();
                                let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result13 = if layout13.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout13);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec13.into_iter().enumerate() {
                                    let base = result13
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec12 = filters3;
                                        let len12 = vec12.len();
                                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec12.len()
                                                * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let result12 = if layout12.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout12);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec12.into_iter().enumerate() {
                                            let base = result12
                                                .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len11;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len12;
                                        *base.add(0).cast::<*mut u8>() = result12;
                                        cleanup_list.extend_from_slice(&[(result12, layout12)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result13, layout13)]);
                                (1i32, result13, len13)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import15(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import15(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import15(
                                _rt::as_i64(high_bits1),
                                _rt::as_i64(low_bits1),
                                result14_0,
                                result14_1,
                                result14_2,
                                match &precise {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { GetWorkers::from_handle(ret as u32) }
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result29 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base28 = l3;
                                    let len28 = l4;
                                    let mut result28 = _rt::Vec::with_capacity(len28);
                                    for i in 0..len28 {
                                        let base = base28
                                            .add(i * (40 + 6 * ::core::mem::size_of::<*const u8>()));
                                        let e28 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = *base.add(8).cast::<i64>();
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(
                                                base15,
                                                len15 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l16 = *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l16;
                                            let len24 = l17;
                                            let mut result24 = _rt::Vec::with_capacity(len24);
                                            for i in 0..len24 {
                                                let base = base24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e24 = {
                                                    let l18 = *base.add(0).cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let bytes23 = _rt::Vec::from_raw_parts(
                                                        l21.cast(),
                                                        len23,
                                                        len23,
                                                    );
                                                    (_rt::string_lift(bytes20), _rt::string_lift(bytes23))
                                                };
                                                result24.push(e24);
                                            }
                                            _rt::cabi_dealloc(
                                                base24,
                                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l25 = i32::from(
                                                *base
                                                    .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l26 = *base
                                                .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            let l27 = *base
                                                .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            WorkerMetadata {
                                                worker_id: super::super::super::golem::rpc::types::WorkerId {
                                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                                            high_bits: l5 as u64,
                                                            low_bits: l6 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes9),
                                                },
                                                args: result15,
                                                env: result24,
                                                status: WorkerStatus::_lift(l25 as u8),
                                                component_version: l26 as u64,
                                                retry_count: l27 as u64,
                                            }
                                        };
                                        result28.push(e28);
                                    }
                                    _rt::cabi_dealloc(
                                        base28,
                                        len28 * (40 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result28
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result29
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result8 = PromiseId {
                        worker_id: super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes6),
                        },
                        oplog_idx: l7 as u64,
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5,
                        )
                    };
                    let l7 = *ptr5.add(0).cast::<*mut u8>();
                    let l8 = *ptr5
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len9 = l8;
                    let result10 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Checks whether the given promise is completed. If not, it returns None. If the promise is completed,
            /// it returns the payload passed to the promise completion.
            pub fn poll_promise(promise_id: &PromiseId) -> Option<_rt::Vec<u8>> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "poll-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5,
                        )
                    };
                    let l7 = i32::from(*ptr5.add(0).cast::<u8>());
                    let result11 = match l7 {
                        0 => None,
                        1 => {
                            let e = {
                                let l8 = *ptr5
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *ptr5
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                _rt::Vec::from_raw_parts(l8.cast(), len10, len10)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5.cast_mut(),
                            len5,
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) -> () {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(oplog_idx)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&replicas)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(begin)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i32>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<i64>();
                    let l5 = *ptr0.add(24).cast::<f64>();
                    let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                    let result8 = RetryPolicy {
                        max_attempts: l2 as u32,
                        min_delay: l3 as u64,
                        max_delay: l4 as u64,
                        multiplier: l5,
                        max_jitter_factor: match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = *ptr0.add(40).cast::<f64>();
                                    l7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) -> () {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import2(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: i64,
                        _: i64,
                        _: f64,
                        _: i32,
                        _: f64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i32(max_attempts0),
                            _rt::as_i64(min_delay0),
                            _rt::as_i64(max_delay0),
                            _rt::as_f64(multiplier0),
                            result1_0,
                            result1_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    let v1 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v1
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(
                new_persistence_level: PersistenceLevel,
            ) -> () {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            match &idempotent {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let result4 = super::super::super::golem::rpc::types::Uuid {
                        high_bits: l2 as u64,
                        low_bits: l3 as u64,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(target_version),
                            mode.clone() as i32,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *ptr0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l7;
                    let len12 = l8;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l9 = *base.add(0).cast::<*mut u8>();
                            let l10 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            _rt::string_lift(bytes11)
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l13 = *ptr0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *ptr0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base21 = l13;
                    let len21 = l14;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e21 = {
                            let l15 = *base.add(0).cast::<*mut u8>();
                            let l16 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            let l18 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(
                                l18.cast(),
                                len20,
                                len20,
                            );
                            (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(
                        base21,
                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l22 = i32::from(
                        *ptr0
                            .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l23 = *ptr0
                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l24 = *ptr0
                        .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result25 = WorkerMetadata {
                        worker_id: super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes6),
                        },
                        args: result12,
                        env: result21,
                        status: WorkerStatus::_lift(l22 as u8),
                        component_version: l23 as u64,
                        retry_count: l24 as u64,
                    };
                    result25
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 6 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result30 = match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = *ptr4.add(16).cast::<i64>();
                                let l9 = *ptr4.add(24).cast::<*mut u8>();
                                let l10 = *ptr4
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *ptr4
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr4
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l12;
                                let len17 = l13;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr4
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr4
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l18;
                                let len26 = l19;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l20 = *base.add(0).cast::<*mut u8>();
                                        let l21 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = i32::from(
                                    *ptr4
                                        .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l28 = *ptr4
                                    .add(32 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l29 = *ptr4
                                    .add(40 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                WorkerMetadata {
                                    worker_id: super::super::super::golem::rpc::types::WorkerId {
                                        component_id: super::super::super::golem::rpc::types::ComponentId {
                                            uuid: super::super::super::golem::rpc::types::Uuid {
                                                high_bits: l7 as u64,
                                                low_bits: l8 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes11),
                                    },
                                    args: result17,
                                    env: result26,
                                    status: WorkerStatus::_lift(l27 as u8),
                                    component_version: l28 as u64,
                                    retry_count: l29 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result30
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork a worker to another worker at a given oplog index
            pub fn fork_worker(
                source_worker_id: &WorkerId,
                target_worker_id: &WorkerId,
                oplog_idx_cut_off: OplogIndex,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = source_worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id4,
                        worker_name: worker_name4,
                    } = target_worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid5,
                    } = component_id4;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits6,
                        low_bits: low_bits6,
                    } = uuid5;
                    let vec7 = worker_name4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork-worker"]
                        fn wit_import8(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(high_bits6),
                            _rt::as_i64(low_bits6),
                            ptr7.cast_mut(),
                            len7,
                            _rt::as_i64(oplog_idx_cut_off),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert a worker to a previous state
            pub fn revert_worker(
                worker_id: &WorkerId,
                revert_target: RevertWorkerTarget,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "revert-worker"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            result4_0,
                            result4_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            ///     1: "{component_name}" -> will resolve in current account and project
            ///     2: "{project_name}/{component_name}" -> will resolve in current account
            ///     3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l4 as u64,
                                        low_bits: l5 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_worker_id(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-worker-id"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::WorkerId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified component-reference or no worker with the specified worker-name exists.
            pub fn resolve_worker_id_strict(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-worker-id-strict"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::WorkerId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Forks the current worker at the current execution point. The new worker gets the `new-name` worker name,
            /// and this worker continues running as well. The return value is going to be different in this worker and
            /// the forked worker.
            pub fn fork(new_name: &str) -> ForkResult {
                unsafe {
                    let vec0 = new_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ForkResult::_lift(ret as u8)
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            pub type NodeIndex = i32;
            pub type ResourceId = u64;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                Owned,
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub enum WitTypeNode {
                RecordType(_rt::Vec<(_rt::String, NodeIndex)>),
                VariantType(_rt::Vec<(_rt::String, Option<NodeIndex>)>),
                EnumType(_rt::Vec<_rt::String>),
                FlagsType(_rt::Vec<_rt::String>),
                TupleType(_rt::Vec<NodeIndex>),
                ListType(NodeIndex),
                OptionType(NodeIndex),
                ResultType((Option<NodeIndex>, Option<NodeIndex>)),
                PrimU8Type,
                PrimU16Type,
                PrimU32Type,
                PrimU64Type,
                PrimS8Type,
                PrimS16Type,
                PrimS32Type,
                PrimS64Type,
                PrimF32Type,
                PrimF64Type,
                PrimCharType,
                PrimBoolType,
                PrimStringType,
                HandleType((ResourceId, ResourceMode)),
            }
            impl ::core::fmt::Debug for WitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitTypeNode::RecordType(e) => {
                            f.debug_tuple("WitTypeNode::RecordType").field(e).finish()
                        }
                        WitTypeNode::VariantType(e) => {
                            f.debug_tuple("WitTypeNode::VariantType").field(e).finish()
                        }
                        WitTypeNode::EnumType(e) => {
                            f.debug_tuple("WitTypeNode::EnumType").field(e).finish()
                        }
                        WitTypeNode::FlagsType(e) => {
                            f.debug_tuple("WitTypeNode::FlagsType").field(e).finish()
                        }
                        WitTypeNode::TupleType(e) => {
                            f.debug_tuple("WitTypeNode::TupleType").field(e).finish()
                        }
                        WitTypeNode::ListType(e) => {
                            f.debug_tuple("WitTypeNode::ListType").field(e).finish()
                        }
                        WitTypeNode::OptionType(e) => {
                            f.debug_tuple("WitTypeNode::OptionType").field(e).finish()
                        }
                        WitTypeNode::ResultType(e) => {
                            f.debug_tuple("WitTypeNode::ResultType").field(e).finish()
                        }
                        WitTypeNode::PrimU8Type => {
                            f.debug_tuple("WitTypeNode::PrimU8Type").finish()
                        }
                        WitTypeNode::PrimU16Type => {
                            f.debug_tuple("WitTypeNode::PrimU16Type").finish()
                        }
                        WitTypeNode::PrimU32Type => {
                            f.debug_tuple("WitTypeNode::PrimU32Type").finish()
                        }
                        WitTypeNode::PrimU64Type => {
                            f.debug_tuple("WitTypeNode::PrimU64Type").finish()
                        }
                        WitTypeNode::PrimS8Type => {
                            f.debug_tuple("WitTypeNode::PrimS8Type").finish()
                        }
                        WitTypeNode::PrimS16Type => {
                            f.debug_tuple("WitTypeNode::PrimS16Type").finish()
                        }
                        WitTypeNode::PrimS32Type => {
                            f.debug_tuple("WitTypeNode::PrimS32Type").finish()
                        }
                        WitTypeNode::PrimS64Type => {
                            f.debug_tuple("WitTypeNode::PrimS64Type").finish()
                        }
                        WitTypeNode::PrimF32Type => {
                            f.debug_tuple("WitTypeNode::PrimF32Type").finish()
                        }
                        WitTypeNode::PrimF64Type => {
                            f.debug_tuple("WitTypeNode::PrimF64Type").finish()
                        }
                        WitTypeNode::PrimCharType => {
                            f.debug_tuple("WitTypeNode::PrimCharType").finish()
                        }
                        WitTypeNode::PrimBoolType => {
                            f.debug_tuple("WitTypeNode::PrimBoolType").finish()
                        }
                        WitTypeNode::PrimStringType => {
                            f.debug_tuple("WitTypeNode::PrimStringType").finish()
                        }
                        WitTypeNode::HandleType(e) => {
                            f.debug_tuple("WitTypeNode::HandleType").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct NamedWitTypeNode {
                pub name: Option<_rt::String>,
                pub type_: WitTypeNode,
            }
            impl ::core::fmt::Debug for NamedWitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("NamedWitTypeNode")
                        .field("name", &self.name)
                        .field("type", &self.type_)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WitType {
                pub nodes: _rt::Vec<NamedWitTypeNode>,
            }
            impl ::core::fmt::Debug for WitType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitType").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct ValueAndType {
                pub value: WitValue,
                pub typ: WitType,
            }
            impl ::core::fmt::Debug for ValueAndType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValueAndType")
                        .field("value", &self.value)
                        .field("typ", &self.typ)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result9 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l4 as u64,
                                    low_bits: l5 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(8).cast::<*mut u8>();
                                let l7 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import2(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(high_bits0),
                            _rt::as_i64(low_bits0),
                            ptr1,
                        )
                    };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId) -> Self {
                    unsafe {
                        let WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import4(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                            )
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ephemeral(component_id: ComponentId) -> WasmRpc {
                    unsafe {
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid { high_bits: high_bits1, low_bits: low_bits1 } = uuid0;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[static]wasm-rpc.ephemeral"]
                            fn wit_import2(_: i64, _: i64) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(_: i64, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(_rt::as_i64(high_bits1), _rt::as_i64(low_bits1))
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result78 = match l15 {
                            0 => {
                                let e = {
                                    let l16 = *ptr13
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *ptr13
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base63 = l16;
                                    let len63 = l17;
                                    let mut result63 = _rt::Vec::with_capacity(len63);
                                    for i in 0..len63 {
                                        let base = base63
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e63 = {
                                            let l18 = i32::from(*base.add(0).cast::<u8>());
                                            let v62 = match l18 {
                                                0 => {
                                                    let e62 = {
                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                        let l20 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                    };
                                                    WitNode::RecordValue(e62)
                                                }
                                                1 => {
                                                    let e62 = {
                                                        let l22 = *base.add(8).cast::<i32>();
                                                        let l23 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l22 as u32,
                                                            match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *base.add(16).cast::<i32>();
                                                                        l24
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e62)
                                                }
                                                2 => {
                                                    let e62 = {
                                                        let l25 = *base.add(8).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    WitNode::EnumValue(e62)
                                                }
                                                3 => {
                                                    let e62 = {
                                                        let l26 = *base.add(8).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l26;
                                                        let len29 = l27;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29.add(i * 1);
                                                            let e29 = {
                                                                let l28 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l28 as u8)
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(base29, len29 * 1, 1);
                                                        result29
                                                    };
                                                    WitNode::FlagsValue(e62)
                                                }
                                                4 => {
                                                    let e62 = {
                                                        let l30 = *base.add(8).cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                    };
                                                    WitNode::TupleValue(e62)
                                                }
                                                5 => {
                                                    let e62 = {
                                                        let l33 = *base.add(8).cast::<*mut u8>();
                                                        let l34 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35)
                                                    };
                                                    WitNode::ListValue(e62)
                                                }
                                                6 => {
                                                    let e62 = {
                                                        let l36 = i32::from(*base.add(8).cast::<u8>());
                                                        match l36 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l37 = *base.add(12).cast::<i32>();
                                                                    l37
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e62)
                                                }
                                                7 => {
                                                    let e62 = {
                                                        let l38 = i32::from(*base.add(8).cast::<u8>());
                                                        match l38 {
                                                            0 => {
                                                                let e = {
                                                                    let l39 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l39 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l40 = *base.add(16).cast::<i32>();
                                                                                l40
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *base.add(16).cast::<i32>();
                                                                                l42
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e62)
                                                }
                                                8 => {
                                                    let e62 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u8>());
                                                        l43 as u8
                                                    };
                                                    WitNode::PrimU8(e62)
                                                }
                                                9 => {
                                                    let e62 = {
                                                        let l44 = i32::from(*base.add(8).cast::<u16>());
                                                        l44 as u16
                                                    };
                                                    WitNode::PrimU16(e62)
                                                }
                                                10 => {
                                                    let e62 = {
                                                        let l45 = *base.add(8).cast::<i32>();
                                                        l45 as u32
                                                    };
                                                    WitNode::PrimU32(e62)
                                                }
                                                11 => {
                                                    let e62 = {
                                                        let l46 = *base.add(8).cast::<i64>();
                                                        l46 as u64
                                                    };
                                                    WitNode::PrimU64(e62)
                                                }
                                                12 => {
                                                    let e62 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i8>());
                                                        l47 as i8
                                                    };
                                                    WitNode::PrimS8(e62)
                                                }
                                                13 => {
                                                    let e62 = {
                                                        let l48 = i32::from(*base.add(8).cast::<i16>());
                                                        l48 as i16
                                                    };
                                                    WitNode::PrimS16(e62)
                                                }
                                                14 => {
                                                    let e62 = {
                                                        let l49 = *base.add(8).cast::<i32>();
                                                        l49
                                                    };
                                                    WitNode::PrimS32(e62)
                                                }
                                                15 => {
                                                    let e62 = {
                                                        let l50 = *base.add(8).cast::<i64>();
                                                        l50
                                                    };
                                                    WitNode::PrimS64(e62)
                                                }
                                                16 => {
                                                    let e62 = {
                                                        let l51 = *base.add(8).cast::<f32>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat32(e62)
                                                }
                                                17 => {
                                                    let e62 = {
                                                        let l52 = *base.add(8).cast::<f64>();
                                                        l52
                                                    };
                                                    WitNode::PrimFloat64(e62)
                                                }
                                                18 => {
                                                    let e62 = {
                                                        let l53 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l53 as u32)
                                                    };
                                                    WitNode::PrimChar(e62)
                                                }
                                                19 => {
                                                    let e62 = {
                                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    WitNode::PrimBool(e62)
                                                }
                                                20 => {
                                                    let e62 = {
                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    WitNode::PrimString(e62)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e62 = {
                                                        let l58 = *base.add(8).cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes60),
                                                            },
                                                            l61 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e62)
                                                }
                                            };
                                            v62
                                        };
                                        result63.push(e63);
                                    }
                                    _rt::cabi_dealloc(
                                        base63,
                                        len63 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    WitValue { nodes: result63 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l64 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v77 = match l64 {
                                        0 => {
                                            let e77 = {
                                                let l65 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l66 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            RpcError::ProtocolError(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l68 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l69 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            RpcError::Denied(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l71 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l72 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            RpcError::NotFound(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            RpcError::RemoteInternalError(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result78
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result30 = match l15 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v29 = match l16 {
                                        0 => {
                                            let e29 = {
                                                let l17 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            RpcError::ProtocolError(e29)
                                        }
                                        1 => {
                                            let e29 = {
                                                let l20 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            RpcError::Denied(e29)
                                        }
                                        2 => {
                                            let e29 = {
                                                let l23 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            RpcError::NotFound(e29)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e29 = {
                                                let l26 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            RpcError::RemoteInternalError(e29)
                                        }
                                    };
                                    v29
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result30
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import13(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                            )
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { FutureInvokeResult::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> () {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { CancellationToken::from_handle(ret as u32) }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result66 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base51 = l4;
                                                let len51 = l5;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l6 = i32::from(*base.add(0).cast::<u8>());
                                                        let v50 = match l6 {
                                                            0 => {
                                                                let e50 = {
                                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                                    let l8 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len9 = l8;
                                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                };
                                                                WitNode::RecordValue(e50)
                                                            }
                                                            1 => {
                                                                let e50 = {
                                                                    let l10 = *base.add(8).cast::<i32>();
                                                                    let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l10 as u32,
                                                                        match l11 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l12 = *base.add(16).cast::<i32>();
                                                                                    l12
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e50)
                                                            }
                                                            2 => {
                                                                let e50 = {
                                                                    let l13 = *base.add(8).cast::<i32>();
                                                                    l13 as u32
                                                                };
                                                                WitNode::EnumValue(e50)
                                                            }
                                                            3 => {
                                                                let e50 = {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base17 = l14;
                                                                    let len17 = l15;
                                                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                                                    for i in 0..len17 {
                                                                        let base = base17.add(i * 1);
                                                                        let e17 = {
                                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l16 as u8)
                                                                        };
                                                                        result17.push(e17);
                                                                    }
                                                                    _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                    result17
                                                                };
                                                                WitNode::FlagsValue(e50)
                                                            }
                                                            4 => {
                                                                let e50 = {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len20 = l19;
                                                                    _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                };
                                                                WitNode::TupleValue(e50)
                                                            }
                                                            5 => {
                                                                let e50 = {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len23 = l22;
                                                                    _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                };
                                                                WitNode::ListValue(e50)
                                                            }
                                                            6 => {
                                                                let e50 = {
                                                                    let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l24 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l25 = *base.add(12).cast::<i32>();
                                                                                l25
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e50)
                                                            }
                                                            7 => {
                                                                let e50 = {
                                                                    let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l26 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l27 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l28 = *base.add(16).cast::<i32>();
                                                                                            l28
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l29 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l30 = *base.add(16).cast::<i32>();
                                                                                            l30
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e50)
                                                            }
                                                            8 => {
                                                                let e50 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                    l31 as u8
                                                                };
                                                                WitNode::PrimU8(e50)
                                                            }
                                                            9 => {
                                                                let e50 = {
                                                                    let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                    l32 as u16
                                                                };
                                                                WitNode::PrimU16(e50)
                                                            }
                                                            10 => {
                                                                let e50 = {
                                                                    let l33 = *base.add(8).cast::<i32>();
                                                                    l33 as u32
                                                                };
                                                                WitNode::PrimU32(e50)
                                                            }
                                                            11 => {
                                                                let e50 = {
                                                                    let l34 = *base.add(8).cast::<i64>();
                                                                    l34 as u64
                                                                };
                                                                WitNode::PrimU64(e50)
                                                            }
                                                            12 => {
                                                                let e50 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                    l35 as i8
                                                                };
                                                                WitNode::PrimS8(e50)
                                                            }
                                                            13 => {
                                                                let e50 = {
                                                                    let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                    l36 as i16
                                                                };
                                                                WitNode::PrimS16(e50)
                                                            }
                                                            14 => {
                                                                let e50 = {
                                                                    let l37 = *base.add(8).cast::<i32>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS32(e50)
                                                            }
                                                            15 => {
                                                                let e50 = {
                                                                    let l38 = *base.add(8).cast::<i64>();
                                                                    l38
                                                                };
                                                                WitNode::PrimS64(e50)
                                                            }
                                                            16 => {
                                                                let e50 = {
                                                                    let l39 = *base.add(8).cast::<f32>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat32(e50)
                                                            }
                                                            17 => {
                                                                let e50 = {
                                                                    let l40 = *base.add(8).cast::<f64>();
                                                                    l40
                                                                };
                                                                WitNode::PrimFloat64(e50)
                                                            }
                                                            18 => {
                                                                let e50 = {
                                                                    let l41 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l41 as u32)
                                                                };
                                                                WitNode::PrimChar(e50)
                                                            }
                                                            19 => {
                                                                let e50 = {
                                                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                WitNode::PrimBool(e50)
                                                            }
                                                            20 => {
                                                                let e50 = {
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    _rt::string_lift(bytes45)
                                                                };
                                                                WitNode::PrimString(e50)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e50 = {
                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes48),
                                                                        },
                                                                        l49 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e50)
                                                            }
                                                        };
                                                        v50
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                WitValue { nodes: result51 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l52 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v65 = match l52 {
                                                    0 => {
                                                        let e65 = {
                                                            let l53 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            _rt::string_lift(bytes55)
                                                        };
                                                        RpcError::ProtocolError(e65)
                                                    }
                                                    1 => {
                                                        let e65 = {
                                                            let l56 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len58 = l57;
                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                l56.cast(),
                                                                len58,
                                                                len58,
                                                            );
                                                            _rt::string_lift(bytes58)
                                                        };
                                                        RpcError::Denied(e65)
                                                    }
                                                    2 => {
                                                        let e65 = {
                                                            let l59 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        RpcError::NotFound(e65)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e65 = {
                                                            let l62 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l63 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );
                                                            _rt::string_lift(bytes64)
                                                        };
                                                        RpcError::RemoteInternalError(e65)
                                                    }
                                                };
                                                v65
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result66
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cancel(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_value(vnt: &ValueAndType) -> WitValue {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec28 = nodes12;
                    let len28 = vec28.len();
                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec28.len() * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result28 = if layout28.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout28);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec28.into_iter().enumerate() {
                        let base = result28
                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let NamedWitTypeNode { name: name13, type_: type_13 } = e;
                            match name13 {
                                Some(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match type_13 {
                                WitTypeNode::RecordType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec17 = e;
                                    let len17 = vec17.len();
                                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec17.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result17 = if layout17.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout17);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec17.into_iter().enumerate() {
                                        let base = result17
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t15_0, t15_1) = e;
                                            let vec16 = t15_0;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(t15_1);
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result17;
                                    cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec20 = e;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t18_0, t18_1) = e;
                                            let vec19 = t18_0;
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len19;
                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                            match t18_1 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len20;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result20;
                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec21 = e;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len22;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result22;
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec24 = e;
                                    let len24 = vec24.len();
                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec24.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result24 = if layout24.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout24);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec24.into_iter().enumerate() {
                                        let base = result24
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec23 = e;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len24;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result24;
                                    cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec25 = e;
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let (t26_0, t26_1) = e;
                                    match t26_0 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t26_1 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (21i32) as u8;
                                    let (t27_0, t27_1) = e;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t27_0);
                                    *base
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (t27_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr29 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "extract-value"]
                        fn wit_import30(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import30(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import30(result11, len11, result28, len28, ptr29) };
                    let l31 = *ptr29.add(0).cast::<*mut u8>();
                    let l32 = *ptr29
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base78 = l31;
                    let len78 = l32;
                    let mut result78 = _rt::Vec::with_capacity(len78);
                    for i in 0..len78 {
                        let base = base78
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        let e78 = {
                            let l33 = i32::from(*base.add(0).cast::<u8>());
                            let v77 = match l33 {
                                0 => {
                                    let e77 = {
                                        let l34 = *base.add(8).cast::<*mut u8>();
                                        let l35 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len36 = l35;
                                        _rt::Vec::from_raw_parts(l34.cast(), len36, len36)
                                    };
                                    WitNode::RecordValue(e77)
                                }
                                1 => {
                                    let e77 = {
                                        let l37 = *base.add(8).cast::<i32>();
                                        let l38 = i32::from(*base.add(12).cast::<u8>());
                                        (
                                            l37 as u32,
                                            match l38 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l39 = *base.add(16).cast::<i32>();
                                                        l39
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitNode::VariantValue(e77)
                                }
                                2 => {
                                    let e77 = {
                                        let l40 = *base.add(8).cast::<i32>();
                                        l40 as u32
                                    };
                                    WitNode::EnumValue(e77)
                                }
                                3 => {
                                    let e77 = {
                                        let l41 = *base.add(8).cast::<*mut u8>();
                                        let l42 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base44 = l41;
                                        let len44 = l42;
                                        let mut result44 = _rt::Vec::with_capacity(len44);
                                        for i in 0..len44 {
                                            let base = base44.add(i * 1);
                                            let e44 = {
                                                let l43 = i32::from(*base.add(0).cast::<u8>());
                                                _rt::bool_lift(l43 as u8)
                                            };
                                            result44.push(e44);
                                        }
                                        _rt::cabi_dealloc(base44, len44 * 1, 1);
                                        result44
                                    };
                                    WitNode::FlagsValue(e77)
                                }
                                4 => {
                                    let e77 = {
                                        let l45 = *base.add(8).cast::<*mut u8>();
                                        let l46 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len47 = l46;
                                        _rt::Vec::from_raw_parts(l45.cast(), len47, len47)
                                    };
                                    WitNode::TupleValue(e77)
                                }
                                5 => {
                                    let e77 = {
                                        let l48 = *base.add(8).cast::<*mut u8>();
                                        let l49 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len50 = l49;
                                        _rt::Vec::from_raw_parts(l48.cast(), len50, len50)
                                    };
                                    WitNode::ListValue(e77)
                                }
                                6 => {
                                    let e77 = {
                                        let l51 = i32::from(*base.add(8).cast::<u8>());
                                        match l51 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l52 = *base.add(12).cast::<i32>();
                                                    l52
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::OptionValue(e77)
                                }
                                7 => {
                                    let e77 = {
                                        let l53 = i32::from(*base.add(8).cast::<u8>());
                                        match l53 {
                                            0 => {
                                                let e = {
                                                    let l54 = i32::from(*base.add(12).cast::<u8>());
                                                    match l54 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l55 = *base.add(16).cast::<i32>();
                                                                l55
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Ok(e)
                                            }
                                            1 => {
                                                let e = {
                                                    let l56 = i32::from(*base.add(12).cast::<u8>());
                                                    match l56 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l57 = *base.add(16).cast::<i32>();
                                                                l57
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::ResultValue(e77)
                                }
                                8 => {
                                    let e77 = {
                                        let l58 = i32::from(*base.add(8).cast::<u8>());
                                        l58 as u8
                                    };
                                    WitNode::PrimU8(e77)
                                }
                                9 => {
                                    let e77 = {
                                        let l59 = i32::from(*base.add(8).cast::<u16>());
                                        l59 as u16
                                    };
                                    WitNode::PrimU16(e77)
                                }
                                10 => {
                                    let e77 = {
                                        let l60 = *base.add(8).cast::<i32>();
                                        l60 as u32
                                    };
                                    WitNode::PrimU32(e77)
                                }
                                11 => {
                                    let e77 = {
                                        let l61 = *base.add(8).cast::<i64>();
                                        l61 as u64
                                    };
                                    WitNode::PrimU64(e77)
                                }
                                12 => {
                                    let e77 = {
                                        let l62 = i32::from(*base.add(8).cast::<i8>());
                                        l62 as i8
                                    };
                                    WitNode::PrimS8(e77)
                                }
                                13 => {
                                    let e77 = {
                                        let l63 = i32::from(*base.add(8).cast::<i16>());
                                        l63 as i16
                                    };
                                    WitNode::PrimS16(e77)
                                }
                                14 => {
                                    let e77 = {
                                        let l64 = *base.add(8).cast::<i32>();
                                        l64
                                    };
                                    WitNode::PrimS32(e77)
                                }
                                15 => {
                                    let e77 = {
                                        let l65 = *base.add(8).cast::<i64>();
                                        l65
                                    };
                                    WitNode::PrimS64(e77)
                                }
                                16 => {
                                    let e77 = {
                                        let l66 = *base.add(8).cast::<f32>();
                                        l66
                                    };
                                    WitNode::PrimFloat32(e77)
                                }
                                17 => {
                                    let e77 = {
                                        let l67 = *base.add(8).cast::<f64>();
                                        l67
                                    };
                                    WitNode::PrimFloat64(e77)
                                }
                                18 => {
                                    let e77 = {
                                        let l68 = *base.add(8).cast::<i32>();
                                        _rt::char_lift(l68 as u32)
                                    };
                                    WitNode::PrimChar(e77)
                                }
                                19 => {
                                    let e77 = {
                                        let l69 = i32::from(*base.add(8).cast::<u8>());
                                        _rt::bool_lift(l69 as u8)
                                    };
                                    WitNode::PrimBool(e77)
                                }
                                20 => {
                                    let e77 = {
                                        let l70 = *base.add(8).cast::<*mut u8>();
                                        let l71 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len72 = l71;
                                        let bytes72 = _rt::Vec::from_raw_parts(
                                            l70.cast(),
                                            len72,
                                            len72,
                                        );
                                        _rt::string_lift(bytes72)
                                    };
                                    WitNode::PrimString(e77)
                                }
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e77 = {
                                        let l73 = *base.add(8).cast::<*mut u8>();
                                        let l74 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len75 = l74;
                                        let bytes75 = _rt::Vec::from_raw_parts(
                                            l73.cast(),
                                            len75,
                                            len75,
                                        );
                                        let l76 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        (
                                            Uri {
                                                value: _rt::string_lift(bytes75),
                                            },
                                            l76 as u64,
                                        )
                                    };
                                    WitNode::Handle(e77)
                                }
                            };
                            v77
                        };
                        result78.push(e78);
                    }
                    _rt::cabi_dealloc(
                        base78,
                        len78 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result79 = WitValue { nodes: result78 };
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout28.size() != 0 {
                        _rt::alloc::dealloc(result28.cast(), layout28);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result79
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_type(vnt: &ValueAndType) -> WitType {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec28 = nodes12;
                    let len28 = vec28.len();
                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec28.len() * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result28 = if layout28.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout28);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec28.into_iter().enumerate() {
                        let base = result28
                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            let NamedWitTypeNode { name: name13, type_: type_13 } = e;
                            match name13 {
                                Some(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match type_13 {
                                WitTypeNode::RecordType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec17 = e;
                                    let len17 = vec17.len();
                                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec17.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result17 = if layout17.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout17);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec17.into_iter().enumerate() {
                                        let base = result17
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t15_0, t15_1) = e;
                                            let vec16 = t15_0;
                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                            let len16 = vec16.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len16;
                                            *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(t15_1);
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len17;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result17;
                                    cleanup_list.extend_from_slice(&[(result17, layout17)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec20 = e;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec20.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t18_0, t18_1) = e;
                                            let vec19 = t18_0;
                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                            let len19 = vec19.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len19;
                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                            match t18_1 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len20;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result20;
                                    cleanup_list.extend_from_slice(&[(result20, layout20)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec22 = e;
                                    let len22 = vec22.len();
                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec22.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result22 = if layout22.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout22);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec22.into_iter().enumerate() {
                                        let base = result22
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec21 = e;
                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                            let len21 = vec21.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len21;
                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len22;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result22;
                                    cleanup_list.extend_from_slice(&[(result22, layout22)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec24 = e;
                                    let len24 = vec24.len();
                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec24.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result24 = if layout24.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout24);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec24.into_iter().enumerate() {
                                        let base = result24
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec23 = e;
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len23;
                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len24;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result24;
                                    cleanup_list.extend_from_slice(&[(result24, layout24)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec25 = e;
                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                    let len25 = vec25.len();
                                    *base
                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let (t26_0, t26_1) = e;
                                    match t26_0 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t26_1 {
                                        Some(e) => {
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (21i32) as u8;
                                    let (t27_0, t27_1) = e;
                                    *base
                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t27_0);
                                    *base
                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (t27_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr29 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "extract-type"]
                        fn wit_import30(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import30(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import30(result11, len11, result28, len28, ptr29) };
                    let l31 = *ptr29.add(0).cast::<*mut u8>();
                    let l32 = *ptr29
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base77 = l31;
                    let len77 = l32;
                    let mut result77 = _rt::Vec::with_capacity(len77);
                    for i in 0..len77 {
                        let base = base77
                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                        let e77 = {
                            let l33 = i32::from(*base.add(0).cast::<u8>());
                            let l37 = i32::from(
                                *base
                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let v76 = match l37 {
                                0 => {
                                    let e76 = {
                                        let l38 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l39 = *base
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base44 = l38;
                                        let len44 = l39;
                                        let mut result44 = _rt::Vec::with_capacity(len44);
                                        for i in 0..len44 {
                                            let base = base44
                                                .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                            let e44 = {
                                                let l40 = *base.add(0).cast::<*mut u8>();
                                                let l41 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len42 = l41;
                                                let bytes42 = _rt::Vec::from_raw_parts(
                                                    l40.cast(),
                                                    len42,
                                                    len42,
                                                );
                                                let l43 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                (_rt::string_lift(bytes42), l43)
                                            };
                                            result44.push(e44);
                                        }
                                        _rt::cabi_dealloc(
                                            base44,
                                            len44 * (3 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result44
                                    };
                                    WitTypeNode::RecordType(e76)
                                }
                                1 => {
                                    let e76 = {
                                        let l45 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l46 = *base
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base52 = l45;
                                        let len52 = l46;
                                        let mut result52 = _rt::Vec::with_capacity(len52);
                                        for i in 0..len52 {
                                            let base = base52
                                                .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e52 = {
                                                let l47 = *base.add(0).cast::<*mut u8>();
                                                let l48 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len49 = l48;
                                                let bytes49 = _rt::Vec::from_raw_parts(
                                                    l47.cast(),
                                                    len49,
                                                    len49,
                                                );
                                                let l50 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                (
                                                    _rt::string_lift(bytes49),
                                                    match l50 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l51 = *base
                                                                    .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i32>();
                                                                l51
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                )
                                            };
                                            result52.push(e52);
                                        }
                                        _rt::cabi_dealloc(
                                            base52,
                                            len52 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result52
                                    };
                                    WitTypeNode::VariantType(e76)
                                }
                                2 => {
                                    let e76 = {
                                        let l53 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l54 = *base
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base58 = l53;
                                        let len58 = l54;
                                        let mut result58 = _rt::Vec::with_capacity(len58);
                                        for i in 0..len58 {
                                            let base = base58
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e58 = {
                                                let l55 = *base.add(0).cast::<*mut u8>();
                                                let l56 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len57 = l56;
                                                let bytes57 = _rt::Vec::from_raw_parts(
                                                    l55.cast(),
                                                    len57,
                                                    len57,
                                                );
                                                _rt::string_lift(bytes57)
                                            };
                                            result58.push(e58);
                                        }
                                        _rt::cabi_dealloc(
                                            base58,
                                            len58 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result58
                                    };
                                    WitTypeNode::EnumType(e76)
                                }
                                3 => {
                                    let e76 = {
                                        let l59 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l60 = *base
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base64 = l59;
                                        let len64 = l60;
                                        let mut result64 = _rt::Vec::with_capacity(len64);
                                        for i in 0..len64 {
                                            let base = base64
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e64 = {
                                                let l61 = *base.add(0).cast::<*mut u8>();
                                                let l62 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len63 = l62;
                                                let bytes63 = _rt::Vec::from_raw_parts(
                                                    l61.cast(),
                                                    len63,
                                                    len63,
                                                );
                                                _rt::string_lift(bytes63)
                                            };
                                            result64.push(e64);
                                        }
                                        _rt::cabi_dealloc(
                                            base64,
                                            len64 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result64
                                    };
                                    WitTypeNode::FlagsType(e76)
                                }
                                4 => {
                                    let e76 = {
                                        let l65 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l66 = *base
                                            .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len67 = l66;
                                        _rt::Vec::from_raw_parts(l65.cast(), len67, len67)
                                    };
                                    WitTypeNode::TupleType(e76)
                                }
                                5 => {
                                    let e76 = {
                                        let l68 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l68
                                    };
                                    WitTypeNode::ListType(e76)
                                }
                                6 => {
                                    let e76 = {
                                        let l69 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l69
                                    };
                                    WitTypeNode::OptionType(e76)
                                }
                                7 => {
                                    let e76 = {
                                        let l70 = i32::from(
                                            *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l72 = i32::from(
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        (
                                            match l70 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l71 = *base
                                                            .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i32>();
                                                        l71
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            match l72 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l73 = *base
                                                            .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i32>();
                                                        l73
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitTypeNode::ResultType(e76)
                                }
                                8 => WitTypeNode::PrimU8Type,
                                9 => WitTypeNode::PrimU16Type,
                                10 => WitTypeNode::PrimU32Type,
                                11 => WitTypeNode::PrimU64Type,
                                12 => WitTypeNode::PrimS8Type,
                                13 => WitTypeNode::PrimS16Type,
                                14 => WitTypeNode::PrimS32Type,
                                15 => WitTypeNode::PrimS64Type,
                                16 => WitTypeNode::PrimF32Type,
                                17 => WitTypeNode::PrimF64Type,
                                18 => WitTypeNode::PrimCharType,
                                19 => WitTypeNode::PrimBoolType,
                                20 => WitTypeNode::PrimStringType,
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e76 = {
                                        let l74 = *base
                                            .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l75 = i32::from(
                                            *base
                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        (l74 as u64, ResourceMode::_lift(l75 as u8))
                                    };
                                    WitTypeNode::HandleType(e76)
                                }
                            };
                            NamedWitTypeNode {
                                name: match l33 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l34 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l35 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len36 = l35;
                                            let bytes36 = _rt::Vec::from_raw_parts(
                                                l34.cast(),
                                                len36,
                                                len36,
                                            );
                                            _rt::string_lift(bytes36)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                type_: v76,
                            }
                        };
                        result77.push(e77);
                    }
                    _rt::cabi_dealloc(
                        base77,
                        len77 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result78 = WitType { nodes: result77 };
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout28.size() != 0 {
                        _rt::alloc::dealloc(result28.cast(), layout28);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result78
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// has occurred.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` that will resolve after the specified duration has
            /// elapsed from the time this function is invoked.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// This function traps if either:
            /// - the list is empty, or:
            /// - the list contains more elements than can be indexed with a `u32` value.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being ready for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod agent {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod guest {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AgentError = super::super::super::super::golem::agent::common::AgentError;
                pub type AgentType = super::super::super::super::golem::agent::common::AgentType;
                pub type DataValue = super::super::super::super::golem::agent::common::DataValue;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Agent {
                    handle: _rt::Resource<Agent>,
                }
                type _AgentRep<T> = Option<T>;
                impl Agent {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Agent`.
                    pub fn new<T: GuestAgent>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _AgentRep<T> = Some(val);
                        let ptr: *mut _AgentRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestAgent>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestAgent>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestAgent>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _AgentRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestAgent>(&self) -> *mut _AgentRep<T> {
                        Agent::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Agent`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct AgentBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Agent>,
                }
                impl<'a> AgentBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestAgent>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _AgentRep<T> {
                        Agent::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Agent {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agent/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]agent"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_agent_create_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    use super::super::super::super::golem::agent::common::DataValue as V152;
                    let v152 = match arg2 {
                        0 => {
                            let e152 = {
                                let base74 = arg3;
                                let len74 = arg4;
                                let mut result74 = _rt::Vec::with_capacity(len74);
                                for i in 0..len74 {
                                    let base = base74
                                        .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                    let e74 = {
                                        let l1 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::super::golem::agent::common::ElementValue as V73;
                                        let v73 = match l1 {
                                            0 => {
                                                let e73 = {
                                                    let l2 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l3 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base49 = l2;
                                                    let len49 = l3;
                                                    let mut result49 = _rt::Vec::with_capacity(len49);
                                                    for i in 0..len49 {
                                                        let base = base49
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e49 = {
                                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V48;
                                                            let v48 = match l4 {
                                                                0 => {
                                                                    let e48 = {
                                                                        let l5 = *base.add(8).cast::<*mut u8>();
                                                                        let l6 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len7 = l6;
                                                                        _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                                                    };
                                                                    V48::RecordValue(e48)
                                                                }
                                                                1 => {
                                                                    let e48 = {
                                                                        let l8 = *base.add(8).cast::<i32>();
                                                                        let l9 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l8 as u32,
                                                                            match l9 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l10 = *base.add(16).cast::<i32>();
                                                                                        l10
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V48::VariantValue(e48)
                                                                }
                                                                2 => {
                                                                    let e48 = {
                                                                        let l11 = *base.add(8).cast::<i32>();
                                                                        l11 as u32
                                                                    };
                                                                    V48::EnumValue(e48)
                                                                }
                                                                3 => {
                                                                    let e48 = {
                                                                        let l12 = *base.add(8).cast::<*mut u8>();
                                                                        let l13 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base15 = l12;
                                                                        let len15 = l13;
                                                                        let mut result15 = _rt::Vec::with_capacity(len15);
                                                                        for i in 0..len15 {
                                                                            let base = base15.add(i * 1);
                                                                            let e15 = {
                                                                                let l14 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l14 as u8)
                                                                            };
                                                                            result15.push(e15);
                                                                        }
                                                                        _rt::cabi_dealloc(base15, len15 * 1, 1);
                                                                        result15
                                                                    };
                                                                    V48::FlagsValue(e48)
                                                                }
                                                                4 => {
                                                                    let e48 = {
                                                                        let l16 = *base.add(8).cast::<*mut u8>();
                                                                        let l17 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len18 = l17;
                                                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18)
                                                                    };
                                                                    V48::TupleValue(e48)
                                                                }
                                                                5 => {
                                                                    let e48 = {
                                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                                        let l20 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len21 = l20;
                                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                                    };
                                                                    V48::ListValue(e48)
                                                                }
                                                                6 => {
                                                                    let e48 = {
                                                                        let l22 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l22 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l23 = *base.add(12).cast::<i32>();
                                                                                    l23
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::OptionValue(e48)
                                                                }
                                                                7 => {
                                                                    let e48 = {
                                                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l24 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l25 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l25 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l26 = *base.add(16).cast::<i32>();
                                                                                                l26
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l27 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l28 = *base.add(16).cast::<i32>();
                                                                                                l28
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::ResultValue(e48)
                                                                }
                                                                8 => {
                                                                    let e48 = {
                                                                        let l29 = i32::from(*base.add(8).cast::<u8>());
                                                                        l29 as u8
                                                                    };
                                                                    V48::PrimU8(e48)
                                                                }
                                                                9 => {
                                                                    let e48 = {
                                                                        let l30 = i32::from(*base.add(8).cast::<u16>());
                                                                        l30 as u16
                                                                    };
                                                                    V48::PrimU16(e48)
                                                                }
                                                                10 => {
                                                                    let e48 = {
                                                                        let l31 = *base.add(8).cast::<i32>();
                                                                        l31 as u32
                                                                    };
                                                                    V48::PrimU32(e48)
                                                                }
                                                                11 => {
                                                                    let e48 = {
                                                                        let l32 = *base.add(8).cast::<i64>();
                                                                        l32 as u64
                                                                    };
                                                                    V48::PrimU64(e48)
                                                                }
                                                                12 => {
                                                                    let e48 = {
                                                                        let l33 = i32::from(*base.add(8).cast::<i8>());
                                                                        l33 as i8
                                                                    };
                                                                    V48::PrimS8(e48)
                                                                }
                                                                13 => {
                                                                    let e48 = {
                                                                        let l34 = i32::from(*base.add(8).cast::<i16>());
                                                                        l34 as i16
                                                                    };
                                                                    V48::PrimS16(e48)
                                                                }
                                                                14 => {
                                                                    let e48 = {
                                                                        let l35 = *base.add(8).cast::<i32>();
                                                                        l35
                                                                    };
                                                                    V48::PrimS32(e48)
                                                                }
                                                                15 => {
                                                                    let e48 = {
                                                                        let l36 = *base.add(8).cast::<i64>();
                                                                        l36
                                                                    };
                                                                    V48::PrimS64(e48)
                                                                }
                                                                16 => {
                                                                    let e48 = {
                                                                        let l37 = *base.add(8).cast::<f32>();
                                                                        l37
                                                                    };
                                                                    V48::PrimFloat32(e48)
                                                                }
                                                                17 => {
                                                                    let e48 = {
                                                                        let l38 = *base.add(8).cast::<f64>();
                                                                        l38
                                                                    };
                                                                    V48::PrimFloat64(e48)
                                                                }
                                                                18 => {
                                                                    let e48 = {
                                                                        let l39 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l39 as u32)
                                                                    };
                                                                    V48::PrimChar(e48)
                                                                }
                                                                19 => {
                                                                    let e48 = {
                                                                        let l40 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l40 as u8)
                                                                    };
                                                                    V48::PrimBool(e48)
                                                                }
                                                                20 => {
                                                                    let e48 = {
                                                                        let l41 = *base.add(8).cast::<*mut u8>();
                                                                        let l42 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len43 = l42;
                                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                                            l41.cast(),
                                                                            len43,
                                                                            len43,
                                                                        );
                                                                        _rt::string_lift(bytes43)
                                                                    };
                                                                    V48::PrimString(e48)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e48 = {
                                                                        let l44 = *base.add(8).cast::<*mut u8>();
                                                                        let l45 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len46 = l45;
                                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                                            l44.cast(),
                                                                            len46,
                                                                            len46,
                                                                        );
                                                                        let l47 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes46),
                                                                            },
                                                                            l47 as u64,
                                                                        )
                                                                    };
                                                                    V48::Handle(e48)
                                                                }
                                                            };
                                                            v48
                                                        };
                                                        result49.push(e49);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base49,
                                                        len49 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result49,
                                                    }
                                                };
                                                V73::ComponentModel(e73)
                                            }
                                            1 => {
                                                let e73 = {
                                                    let l50 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V61;
                                                    let v61 = match l50 {
                                                        0 => {
                                                            let e61 = {
                                                                let l51 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l52 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                                    l51.cast(),
                                                                    len53,
                                                                    len53,
                                                                );
                                                                _rt::string_lift(bytes53)
                                                            };
                                                            V61::Url(e61)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e61 = {
                                                                let l54 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l55 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                                    l54.cast(),
                                                                    len56,
                                                                    len56,
                                                                );
                                                                let l57 = i32::from(
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes56),
                                                                    text_type: match l57 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l58 = *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l59 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len60 = l59;
                                                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                                                    l58.cast(),
                                                                                    len60,
                                                                                    len60,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes60),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V61::Inline(e61)
                                                        }
                                                    };
                                                    v61
                                                };
                                                V73::UnstructuredText(e73)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e73 = {
                                                    let l62 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V72;
                                                    let v72 = match l62 {
                                                        0 => {
                                                            let e72 = {
                                                                let l63 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l64 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len65 = l64;
                                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                );
                                                                _rt::string_lift(bytes65)
                                                            };
                                                            V72::Url(e72)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e72 = {
                                                                let l66 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l67 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len68 = l67;
                                                                let l69 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l70 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len71 = l70;
                                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes71),
                                                                    },
                                                                }
                                                            };
                                                            V72::Inline(e72)
                                                        }
                                                    };
                                                    v72
                                                };
                                                V73::UnstructuredBinary(e73)
                                            }
                                        };
                                        v73
                                    };
                                    result74.push(e74);
                                }
                                _rt::cabi_dealloc(
                                    base74,
                                    len74 * (7 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result74
                            };
                            V152::Tuple(e152)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e152 = {
                                let base151 = arg3;
                                let len151 = arg4;
                                let mut result151 = _rt::Vec::with_capacity(len151);
                                for i in 0..len151 {
                                    let base = base151
                                        .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                    let e151 = {
                                        let l75 = *base.add(0).cast::<*mut u8>();
                                        let l76 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len77 = l76;
                                        let bytes77 = _rt::Vec::from_raw_parts(
                                            l75.cast(),
                                            len77,
                                            len77,
                                        );
                                        let l78 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::agent::common::ElementValue as V150;
                                        let v150 = match l78 {
                                            0 => {
                                                let e150 = {
                                                    let l79 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l80 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base126 = l79;
                                                    let len126 = l80;
                                                    let mut result126 = _rt::Vec::with_capacity(len126);
                                                    for i in 0..len126 {
                                                        let base = base126
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e126 = {
                                                            let l81 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V125;
                                                            let v125 = match l81 {
                                                                0 => {
                                                                    let e125 = {
                                                                        let l82 = *base.add(8).cast::<*mut u8>();
                                                                        let l83 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len84 = l83;
                                                                        _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                    };
                                                                    V125::RecordValue(e125)
                                                                }
                                                                1 => {
                                                                    let e125 = {
                                                                        let l85 = *base.add(8).cast::<i32>();
                                                                        let l86 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l85 as u32,
                                                                            match l86 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l87 = *base.add(16).cast::<i32>();
                                                                                        l87
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V125::VariantValue(e125)
                                                                }
                                                                2 => {
                                                                    let e125 = {
                                                                        let l88 = *base.add(8).cast::<i32>();
                                                                        l88 as u32
                                                                    };
                                                                    V125::EnumValue(e125)
                                                                }
                                                                3 => {
                                                                    let e125 = {
                                                                        let l89 = *base.add(8).cast::<*mut u8>();
                                                                        let l90 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base92 = l89;
                                                                        let len92 = l90;
                                                                        let mut result92 = _rt::Vec::with_capacity(len92);
                                                                        for i in 0..len92 {
                                                                            let base = base92.add(i * 1);
                                                                            let e92 = {
                                                                                let l91 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l91 as u8)
                                                                            };
                                                                            result92.push(e92);
                                                                        }
                                                                        _rt::cabi_dealloc(base92, len92 * 1, 1);
                                                                        result92
                                                                    };
                                                                    V125::FlagsValue(e125)
                                                                }
                                                                4 => {
                                                                    let e125 = {
                                                                        let l93 = *base.add(8).cast::<*mut u8>();
                                                                        let l94 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len95 = l94;
                                                                        _rt::Vec::from_raw_parts(l93.cast(), len95, len95)
                                                                    };
                                                                    V125::TupleValue(e125)
                                                                }
                                                                5 => {
                                                                    let e125 = {
                                                                        let l96 = *base.add(8).cast::<*mut u8>();
                                                                        let l97 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len98 = l97;
                                                                        _rt::Vec::from_raw_parts(l96.cast(), len98, len98)
                                                                    };
                                                                    V125::ListValue(e125)
                                                                }
                                                                6 => {
                                                                    let e125 = {
                                                                        let l99 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l99 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l100 = *base.add(12).cast::<i32>();
                                                                                    l100
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::OptionValue(e125)
                                                                }
                                                                7 => {
                                                                    let e125 = {
                                                                        let l101 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l101 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l102 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l102 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l103 = *base.add(16).cast::<i32>();
                                                                                                l103
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l104 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l104 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l105 = *base.add(16).cast::<i32>();
                                                                                                l105
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::ResultValue(e125)
                                                                }
                                                                8 => {
                                                                    let e125 = {
                                                                        let l106 = i32::from(*base.add(8).cast::<u8>());
                                                                        l106 as u8
                                                                    };
                                                                    V125::PrimU8(e125)
                                                                }
                                                                9 => {
                                                                    let e125 = {
                                                                        let l107 = i32::from(*base.add(8).cast::<u16>());
                                                                        l107 as u16
                                                                    };
                                                                    V125::PrimU16(e125)
                                                                }
                                                                10 => {
                                                                    let e125 = {
                                                                        let l108 = *base.add(8).cast::<i32>();
                                                                        l108 as u32
                                                                    };
                                                                    V125::PrimU32(e125)
                                                                }
                                                                11 => {
                                                                    let e125 = {
                                                                        let l109 = *base.add(8).cast::<i64>();
                                                                        l109 as u64
                                                                    };
                                                                    V125::PrimU64(e125)
                                                                }
                                                                12 => {
                                                                    let e125 = {
                                                                        let l110 = i32::from(*base.add(8).cast::<i8>());
                                                                        l110 as i8
                                                                    };
                                                                    V125::PrimS8(e125)
                                                                }
                                                                13 => {
                                                                    let e125 = {
                                                                        let l111 = i32::from(*base.add(8).cast::<i16>());
                                                                        l111 as i16
                                                                    };
                                                                    V125::PrimS16(e125)
                                                                }
                                                                14 => {
                                                                    let e125 = {
                                                                        let l112 = *base.add(8).cast::<i32>();
                                                                        l112
                                                                    };
                                                                    V125::PrimS32(e125)
                                                                }
                                                                15 => {
                                                                    let e125 = {
                                                                        let l113 = *base.add(8).cast::<i64>();
                                                                        l113
                                                                    };
                                                                    V125::PrimS64(e125)
                                                                }
                                                                16 => {
                                                                    let e125 = {
                                                                        let l114 = *base.add(8).cast::<f32>();
                                                                        l114
                                                                    };
                                                                    V125::PrimFloat32(e125)
                                                                }
                                                                17 => {
                                                                    let e125 = {
                                                                        let l115 = *base.add(8).cast::<f64>();
                                                                        l115
                                                                    };
                                                                    V125::PrimFloat64(e125)
                                                                }
                                                                18 => {
                                                                    let e125 = {
                                                                        let l116 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l116 as u32)
                                                                    };
                                                                    V125::PrimChar(e125)
                                                                }
                                                                19 => {
                                                                    let e125 = {
                                                                        let l117 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l117 as u8)
                                                                    };
                                                                    V125::PrimBool(e125)
                                                                }
                                                                20 => {
                                                                    let e125 = {
                                                                        let l118 = *base.add(8).cast::<*mut u8>();
                                                                        let l119 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len120 = l119;
                                                                        let bytes120 = _rt::Vec::from_raw_parts(
                                                                            l118.cast(),
                                                                            len120,
                                                                            len120,
                                                                        );
                                                                        _rt::string_lift(bytes120)
                                                                    };
                                                                    V125::PrimString(e125)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e125 = {
                                                                        let l121 = *base.add(8).cast::<*mut u8>();
                                                                        let l122 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len123 = l122;
                                                                        let bytes123 = _rt::Vec::from_raw_parts(
                                                                            l121.cast(),
                                                                            len123,
                                                                            len123,
                                                                        );
                                                                        let l124 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes123),
                                                                            },
                                                                            l124 as u64,
                                                                        )
                                                                    };
                                                                    V125::Handle(e125)
                                                                }
                                                            };
                                                            v125
                                                        };
                                                        result126.push(e126);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base126,
                                                        len126 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result126,
                                                    }
                                                };
                                                V150::ComponentModel(e150)
                                            }
                                            1 => {
                                                let e150 = {
                                                    let l127 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V138;
                                                    let v138 = match l127 {
                                                        0 => {
                                                            let e138 = {
                                                                let l128 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l129 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len130 = l129;
                                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                                    l128.cast(),
                                                                    len130,
                                                                    len130,
                                                                );
                                                                _rt::string_lift(bytes130)
                                                            };
                                                            V138::Url(e138)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e138 = {
                                                                let l131 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l132 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len133 = l132;
                                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                                    l131.cast(),
                                                                    len133,
                                                                    len133,
                                                                );
                                                                let l134 = i32::from(
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes133),
                                                                    text_type: match l134 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l135 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l136 = *base
                                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len137 = l136;
                                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                                    l135.cast(),
                                                                                    len137,
                                                                                    len137,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes137),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V138::Inline(e138)
                                                        }
                                                    };
                                                    v138
                                                };
                                                V150::UnstructuredText(e150)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e150 = {
                                                    let l139 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V149;
                                                    let v149 = match l139 {
                                                        0 => {
                                                            let e149 = {
                                                                let l140 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l141 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len142 = l141;
                                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                                    l140.cast(),
                                                                    len142,
                                                                    len142,
                                                                );
                                                                _rt::string_lift(bytes142)
                                                            };
                                                            V149::Url(e149)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e149 = {
                                                                let l143 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l144 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len145 = l144;
                                                                let l146 = *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l147 = *base
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len148 = l147;
                                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                                    l146.cast(),
                                                                    len148,
                                                                    len148,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l143.cast(), len145, len145),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes148),
                                                                    },
                                                                }
                                                            };
                                                            V149::Inline(e149)
                                                        }
                                                    };
                                                    v149
                                                };
                                                V150::UnstructuredBinary(e150)
                                            }
                                        };
                                        (_rt::string_lift(bytes77), v150)
                                    };
                                    result151.push(e151);
                                }
                                _rt::cabi_dealloc(
                                    base151,
                                    len151 * (9 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result151
                            };
                            V152::Multimodal(e152)
                        }
                    };
                    let result153 = T::create(_rt::string_lift(bytes0), v152);
                    let ptr154 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result153 {
                        Ok(e) => {
                            *ptr154.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr154
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr154.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::agent::common::AgentError as V214;
                            match e {
                                V214::InvalidInput(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec155 = (e.into_bytes()).into_boxed_slice();
                                    let ptr155 = vec155.as_ptr().cast::<u8>();
                                    let len155 = vec155.len();
                                    ::core::mem::forget(vec155);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len155;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr155.cast_mut();
                                }
                                V214::InvalidMethod(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec156 = (e.into_bytes()).into_boxed_slice();
                                    let ptr156 = vec156.as_ptr().cast::<u8>();
                                    let len156 = vec156.len();
                                    ::core::mem::forget(vec156);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len156;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr156.cast_mut();
                                }
                                V214::InvalidType(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec157 = (e.into_bytes()).into_boxed_slice();
                                    let ptr157 = vec157.as_ptr().cast::<u8>();
                                    let len157 = vec157.len();
                                    ::core::mem::forget(vec157);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len157;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr157.cast_mut();
                                }
                                V214::InvalidAgentId(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec158 = (e.into_bytes()).into_boxed_slice();
                                    let ptr158 = vec158.as_ptr().cast::<u8>();
                                    let len158 = vec158.len();
                                    ::core::mem::forget(vec158);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len158;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr158.cast_mut();
                                }
                                V214::CustomError(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    use super::super::super::super::golem::agent::common::DataValue as V213;
                                    match e {
                                        V213::Tuple(e) => {
                                            *ptr154
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec184 = e;
                                            let len184 = vec184.len();
                                            let layout184 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec184.len() * (7 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result184 = if layout184.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout184).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout184);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec184.into_iter().enumerate() {
                                                let base = result184
                                                    .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    use super::super::super::super::golem::agent::common::ElementValue as V183;
                                                    match e {
                                                        V183::ComponentModel(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitValue {
                                                                nodes: nodes159,
                                                            } = e;
                                                            let vec170 = nodes159;
                                                            let len170 = vec170.len();
                                                            let layout170 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec170.len()
                                                                    * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result170 = if layout170.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout170).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout170);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec170.into_iter().enumerate() {
                                                                let base = result170
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    use super::super::super::super::golem::rpc::types::WitNode as V169;
                                                                    match e {
                                                                        V169::RecordValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec160 = (e).into_boxed_slice();
                                                                            let ptr160 = vec160.as_ptr().cast::<u8>();
                                                                            let len160 = vec160.len();
                                                                            ::core::mem::forget(vec160);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len160;
                                                                            *base.add(8).cast::<*mut u8>() = ptr160.cast_mut();
                                                                        }
                                                                        V169::VariantValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let (t161_0, t161_1) = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(t161_0);
                                                                            match t161_1 {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V169::EnumValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V169::FlagsValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            let vec162 = e;
                                                                            let len162 = vec162.len();
                                                                            let layout162 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec162.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result162 = if layout162.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout162).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout162);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec162.into_iter().enumerate() {
                                                                                let base = result162.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len162;
                                                                            *base.add(8).cast::<*mut u8>() = result162;
                                                                        }
                                                                        V169::TupleValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            let vec163 = (e).into_boxed_slice();
                                                                            let ptr163 = vec163.as_ptr().cast::<u8>();
                                                                            let len163 = vec163.len();
                                                                            ::core::mem::forget(vec163);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len163;
                                                                            *base.add(8).cast::<*mut u8>() = ptr163.cast_mut();
                                                                        }
                                                                        V169::ListValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec164 = (e).into_boxed_slice();
                                                                            let ptr164 = vec164.as_ptr().cast::<u8>();
                                                                            let len164 = vec164.len();
                                                                            ::core::mem::forget(vec164);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len164;
                                                                            *base.add(8).cast::<*mut u8>() = ptr164.cast_mut();
                                                                        }
                                                                        V169::OptionValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V169::ResultValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            match e {
                                                                                Ok(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                Err(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            };
                                                                        }
                                                                        V169::PrimU8(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V169::PrimU16(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V169::PrimU32(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V169::PrimU64(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V169::PrimS8(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V169::PrimS16(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V169::PrimS32(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V169::PrimS64(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V169::PrimFloat32(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V169::PrimFloat64(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V169::PrimChar(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V169::PrimBool(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V169::PrimString(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec165 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr165 = vec165.as_ptr().cast::<u8>();
                                                                            let len165 = vec165.len();
                                                                            ::core::mem::forget(vec165);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len165;
                                                                            *base.add(8).cast::<*mut u8>() = ptr165.cast_mut();
                                                                        }
                                                                        V169::Handle(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let (t166_0, t166_1) = e;
                                                                            let super::super::super::super::golem::rpc::types::Uri {
                                                                                value: value167,
                                                                            } = t166_0;
                                                                            let vec168 = (value167.into_bytes()).into_boxed_slice();
                                                                            let ptr168 = vec168.as_ptr().cast::<u8>();
                                                                            let len168 = vec168.len();
                                                                            ::core::mem::forget(vec168);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len168;
                                                                            *base.add(8).cast::<*mut u8>() = ptr168.cast_mut();
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t166_1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len170;
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result170;
                                                        }
                                                        V183::UnstructuredText(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            use super::super::super::super::golem::agent::common::TextReference as V176;
                                                            match e {
                                                                V176::Url(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec171 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr171 = vec171.as_ptr().cast::<u8>();
                                                                    let len171 = vec171.len();
                                                                    ::core::mem::forget(vec171);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len171;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr171.cast_mut();
                                                                }
                                                                V176::Inline(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextSource {
                                                                        data: data172,
                                                                        text_type: text_type172,
                                                                    } = e;
                                                                    let vec173 = (data172.into_bytes()).into_boxed_slice();
                                                                    let ptr173 = vec173.as_ptr().cast::<u8>();
                                                                    let len173 = vec173.len();
                                                                    ::core::mem::forget(vec173);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len173;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr173.cast_mut();
                                                                    match text_type172 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code174,
                                                                            } = e;
                                                                            let vec175 = (language_code174.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr175 = vec175.as_ptr().cast::<u8>();
                                                                            let len175 = vec175.len();
                                                                            ::core::mem::forget(vec175);
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len175;
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr175.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                        V183::UnstructuredBinary(e) => {
                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                            use super::super::super::super::golem::agent::common::BinaryReference as V182;
                                                            match e {
                                                                V182::Url(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec177 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr177 = vec177.as_ptr().cast::<u8>();
                                                                    let len177 = vec177.len();
                                                                    ::core::mem::forget(vec177);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len177;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr177.cast_mut();
                                                                }
                                                                V182::Inline(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinarySource {
                                                                        data: data178,
                                                                        binary_type: binary_type178,
                                                                    } = e;
                                                                    let vec179 = (data178).into_boxed_slice();
                                                                    let ptr179 = vec179.as_ptr().cast::<u8>();
                                                                    let len179 = vec179.len();
                                                                    ::core::mem::forget(vec179);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len179;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr179.cast_mut();
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type180,
                                                                    } = binary_type178;
                                                                    let vec181 = (mime_type180.into_bytes()).into_boxed_slice();
                                                                    let ptr181 = vec181.as_ptr().cast::<u8>();
                                                                    let len181 = vec181.len();
                                                                    ::core::mem::forget(vec181);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len181;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr181.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            *ptr154
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len184;
                                            *ptr154
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result184;
                                        }
                                        V213::Multimodal(e) => {
                                            *ptr154
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec212 = e;
                                            let len212 = vec212.len();
                                            let layout212 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec212.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result212 = if layout212.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout212).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout212);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec212.into_iter().enumerate() {
                                                let base = result212
                                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t185_0, t185_1) = e;
                                                    let vec186 = (t185_0.into_bytes()).into_boxed_slice();
                                                    let ptr186 = vec186.as_ptr().cast::<u8>();
                                                    let len186 = vec186.len();
                                                    ::core::mem::forget(vec186);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len186;
                                                    *base.add(0).cast::<*mut u8>() = ptr186.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementValue as V211;
                                                    match t185_1 {
                                                        V211::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitValue {
                                                                nodes: nodes187,
                                                            } = e;
                                                            let vec198 = nodes187;
                                                            let len198 = vec198.len();
                                                            let layout198 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec198.len()
                                                                    * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result198 = if layout198.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout198).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout198);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec198.into_iter().enumerate() {
                                                                let base = result198
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    use super::super::super::super::golem::rpc::types::WitNode as V197;
                                                                    match e {
                                                                        V197::RecordValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec188 = (e).into_boxed_slice();
                                                                            let ptr188 = vec188.as_ptr().cast::<u8>();
                                                                            let len188 = vec188.len();
                                                                            ::core::mem::forget(vec188);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len188;
                                                                            *base.add(8).cast::<*mut u8>() = ptr188.cast_mut();
                                                                        }
                                                                        V197::VariantValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let (t189_0, t189_1) = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(t189_0);
                                                                            match t189_1 {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V197::EnumValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V197::FlagsValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            let vec190 = e;
                                                                            let len190 = vec190.len();
                                                                            let layout190 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec190.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result190 = if layout190.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout190).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout190);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec190.into_iter().enumerate() {
                                                                                let base = result190.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len190;
                                                                            *base.add(8).cast::<*mut u8>() = result190;
                                                                        }
                                                                        V197::TupleValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            let vec191 = (e).into_boxed_slice();
                                                                            let ptr191 = vec191.as_ptr().cast::<u8>();
                                                                            let len191 = vec191.len();
                                                                            ::core::mem::forget(vec191);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len191;
                                                                            *base.add(8).cast::<*mut u8>() = ptr191.cast_mut();
                                                                        }
                                                                        V197::ListValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec192 = (e).into_boxed_slice();
                                                                            let ptr192 = vec192.as_ptr().cast::<u8>();
                                                                            let len192 = vec192.len();
                                                                            ::core::mem::forget(vec192);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len192;
                                                                            *base.add(8).cast::<*mut u8>() = ptr192.cast_mut();
                                                                        }
                                                                        V197::OptionValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V197::ResultValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            match e {
                                                                                Ok(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                Err(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            };
                                                                        }
                                                                        V197::PrimU8(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V197::PrimU16(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V197::PrimU32(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V197::PrimU64(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V197::PrimS8(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V197::PrimS16(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V197::PrimS32(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V197::PrimS64(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V197::PrimFloat32(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V197::PrimFloat64(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V197::PrimChar(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V197::PrimBool(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V197::PrimString(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec193 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr193 = vec193.as_ptr().cast::<u8>();
                                                                            let len193 = vec193.len();
                                                                            ::core::mem::forget(vec193);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len193;
                                                                            *base.add(8).cast::<*mut u8>() = ptr193.cast_mut();
                                                                        }
                                                                        V197::Handle(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let (t194_0, t194_1) = e;
                                                                            let super::super::super::super::golem::rpc::types::Uri {
                                                                                value: value195,
                                                                            } = t194_0;
                                                                            let vec196 = (value195.into_bytes()).into_boxed_slice();
                                                                            let ptr196 = vec196.as_ptr().cast::<u8>();
                                                                            let len196 = vec196.len();
                                                                            ::core::mem::forget(vec196);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len196;
                                                                            *base.add(8).cast::<*mut u8>() = ptr196.cast_mut();
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t194_1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len198;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result198;
                                                        }
                                                        V211::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            use super::super::super::super::golem::agent::common::TextReference as V204;
                                                            match e {
                                                                V204::Url(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec199 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr199 = vec199.as_ptr().cast::<u8>();
                                                                    let len199 = vec199.len();
                                                                    ::core::mem::forget(vec199);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len199;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr199.cast_mut();
                                                                }
                                                                V204::Inline(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextSource {
                                                                        data: data200,
                                                                        text_type: text_type200,
                                                                    } = e;
                                                                    let vec201 = (data200.into_bytes()).into_boxed_slice();
                                                                    let ptr201 = vec201.as_ptr().cast::<u8>();
                                                                    let len201 = vec201.len();
                                                                    ::core::mem::forget(vec201);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len201;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr201.cast_mut();
                                                                    match text_type200 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code202,
                                                                            } = e;
                                                                            let vec203 = (language_code202.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr203 = vec203.as_ptr().cast::<u8>();
                                                                            let len203 = vec203.len();
                                                                            ::core::mem::forget(vec203);
                                                                            *base
                                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len203;
                                                                            *base
                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr203.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                        V211::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            use super::super::super::super::golem::agent::common::BinaryReference as V210;
                                                            match e {
                                                                V210::Url(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec205 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr205 = vec205.as_ptr().cast::<u8>();
                                                                    let len205 = vec205.len();
                                                                    ::core::mem::forget(vec205);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len205;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr205.cast_mut();
                                                                }
                                                                V210::Inline(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinarySource {
                                                                        data: data206,
                                                                        binary_type: binary_type206,
                                                                    } = e;
                                                                    let vec207 = (data206).into_boxed_slice();
                                                                    let ptr207 = vec207.as_ptr().cast::<u8>();
                                                                    let len207 = vec207.len();
                                                                    ::core::mem::forget(vec207);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len207;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr207.cast_mut();
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type208,
                                                                    } = binary_type206;
                                                                    let vec209 = (mime_type208.into_bytes()).into_boxed_slice();
                                                                    let ptr209 = vec209.as_ptr().cast::<u8>();
                                                                    let len209 = vec209.len();
                                                                    ::core::mem::forget(vec209);
                                                                    *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len209;
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr209.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            *ptr154
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len212;
                                            *ptr154
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result212;
                                        }
                                    }
                                }
                            }
                        }
                    };
                    ptr154
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_agent_create<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = i32::from(
                                        *arg0
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l10 {
                                        0 => {
                                            let l11 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l12 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base50 = l11;
                                            let len50 = l12;
                                            for i in 0..len50 {
                                                let base = base50
                                                    .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l13 = i32::from(*base.add(0).cast::<u8>());
                                                    match l13 {
                                                        0 => {
                                                            let l14 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l15 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base33 = l14;
                                                            let len33 = l15;
                                                            for i in 0..len33 {
                                                                let base = base33
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l16 {
                                                                        0 => {
                                                                            let l17 = *base.add(8).cast::<*mut u8>();
                                                                            let l18 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base19 = l17;
                                                                            let len19 = l18;
                                                                            _rt::cabi_dealloc(base19, len19 * 4, 4);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {
                                                                            let l20 = *base.add(8).cast::<*mut u8>();
                                                                            let l21 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base22 = l20;
                                                                            let len22 = l21;
                                                                            _rt::cabi_dealloc(base22, len22 * 1, 1);
                                                                        }
                                                                        4 => {
                                                                            let l23 = *base.add(8).cast::<*mut u8>();
                                                                            let l24 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base25 = l23;
                                                                            let len25 = l24;
                                                                            _rt::cabi_dealloc(base25, len25 * 4, 4);
                                                                        }
                                                                        5 => {
                                                                            let l26 = *base.add(8).cast::<*mut u8>();
                                                                            let l27 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base28 = l26;
                                                                            let len28 = l27;
                                                                            _rt::cabi_dealloc(base28, len28 * 4, 4);
                                                                        }
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {
                                                                            let l29 = *base.add(8).cast::<*mut u8>();
                                                                            let l30 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l29, l30, 1);
                                                                        }
                                                                        _ => {
                                                                            let l31 = *base.add(8).cast::<*mut u8>();
                                                                            let l32 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l31, l32, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base33,
                                                                len33 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l34 = i32::from(
                                                                *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                            );
                                                            match l34 {
                                                                0 => {
                                                                    let l35 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l36 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l35, l36, 1);
                                                                }
                                                                _ => {
                                                                    let l37 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l38 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l37, l38, 1);
                                                                    let l39 = i32::from(
                                                                        *base
                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l39 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l40 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l41 = *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l40, l41, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l42 = i32::from(
                                                                *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                            );
                                                            match l42 {
                                                                0 => {
                                                                    let l43 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l43, l44, 1);
                                                                }
                                                                _ => {
                                                                    let l45 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l46 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base47 = l45;
                                                                    let len47 = l46;
                                                                    _rt::cabi_dealloc(base47, len47 * 1, 1);
                                                                    let l48 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l49 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l48, l49, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base50,
                                                len50 * (7 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l51 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l52 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base92 = l51;
                                            let len92 = l52;
                                            for i in 0..len92 {
                                                let base = base92
                                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l53 = *base.add(0).cast::<*mut u8>();
                                                    let l54 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l53, l54, 1);
                                                    let l55 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l55 {
                                                        0 => {
                                                            let l56 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base75 = l56;
                                                            let len75 = l57;
                                                            for i in 0..len75 {
                                                                let base = base75
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l58 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l58 {
                                                                        0 => {
                                                                            let l59 = *base.add(8).cast::<*mut u8>();
                                                                            let l60 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base61 = l59;
                                                                            let len61 = l60;
                                                                            _rt::cabi_dealloc(base61, len61 * 4, 4);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {
                                                                            let l62 = *base.add(8).cast::<*mut u8>();
                                                                            let l63 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base64 = l62;
                                                                            let len64 = l63;
                                                                            _rt::cabi_dealloc(base64, len64 * 1, 1);
                                                                        }
                                                                        4 => {
                                                                            let l65 = *base.add(8).cast::<*mut u8>();
                                                                            let l66 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base67 = l65;
                                                                            let len67 = l66;
                                                                            _rt::cabi_dealloc(base67, len67 * 4, 4);
                                                                        }
                                                                        5 => {
                                                                            let l68 = *base.add(8).cast::<*mut u8>();
                                                                            let l69 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base70 = l68;
                                                                            let len70 = l69;
                                                                            _rt::cabi_dealloc(base70, len70 * 4, 4);
                                                                        }
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {
                                                                            let l71 = *base.add(8).cast::<*mut u8>();
                                                                            let l72 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l71, l72, 1);
                                                                        }
                                                                        _ => {
                                                                            let l73 = *base.add(8).cast::<*mut u8>();
                                                                            let l74 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l73, l74, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base75,
                                                                len75 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l76 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l76 {
                                                                0 => {
                                                                    let l77 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l78 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l77, l78, 1);
                                                                }
                                                                _ => {
                                                                    let l79 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l80 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l79, l80, 1);
                                                                    let l81 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l81 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l82 = *base
                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l83 = *base
                                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l82, l83, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l84 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l84 {
                                                                0 => {
                                                                    let l85 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l86 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l85, l86, 1);
                                                                }
                                                                _ => {
                                                                    let l87 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l88 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base89 = l87;
                                                                    let len89 = l88;
                                                                    _rt::cabi_dealloc(base89, len89 * 1, 1);
                                                                    let l90 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l91 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l90, l91, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base92,
                                                len92 * (9 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_get_id_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_id(
                        unsafe { AgentBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_get_id<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_invoke_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    use super::super::super::super::golem::agent::common::DataValue as V152;
                    let v152 = match arg3 {
                        0 => {
                            let e152 = {
                                let base74 = arg4;
                                let len74 = arg5;
                                let mut result74 = _rt::Vec::with_capacity(len74);
                                for i in 0..len74 {
                                    let base = base74
                                        .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                    let e74 = {
                                        let l1 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::super::golem::agent::common::ElementValue as V73;
                                        let v73 = match l1 {
                                            0 => {
                                                let e73 = {
                                                    let l2 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l3 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base49 = l2;
                                                    let len49 = l3;
                                                    let mut result49 = _rt::Vec::with_capacity(len49);
                                                    for i in 0..len49 {
                                                        let base = base49
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e49 = {
                                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V48;
                                                            let v48 = match l4 {
                                                                0 => {
                                                                    let e48 = {
                                                                        let l5 = *base.add(8).cast::<*mut u8>();
                                                                        let l6 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len7 = l6;
                                                                        _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                                                    };
                                                                    V48::RecordValue(e48)
                                                                }
                                                                1 => {
                                                                    let e48 = {
                                                                        let l8 = *base.add(8).cast::<i32>();
                                                                        let l9 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l8 as u32,
                                                                            match l9 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l10 = *base.add(16).cast::<i32>();
                                                                                        l10
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V48::VariantValue(e48)
                                                                }
                                                                2 => {
                                                                    let e48 = {
                                                                        let l11 = *base.add(8).cast::<i32>();
                                                                        l11 as u32
                                                                    };
                                                                    V48::EnumValue(e48)
                                                                }
                                                                3 => {
                                                                    let e48 = {
                                                                        let l12 = *base.add(8).cast::<*mut u8>();
                                                                        let l13 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base15 = l12;
                                                                        let len15 = l13;
                                                                        let mut result15 = _rt::Vec::with_capacity(len15);
                                                                        for i in 0..len15 {
                                                                            let base = base15.add(i * 1);
                                                                            let e15 = {
                                                                                let l14 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l14 as u8)
                                                                            };
                                                                            result15.push(e15);
                                                                        }
                                                                        _rt::cabi_dealloc(base15, len15 * 1, 1);
                                                                        result15
                                                                    };
                                                                    V48::FlagsValue(e48)
                                                                }
                                                                4 => {
                                                                    let e48 = {
                                                                        let l16 = *base.add(8).cast::<*mut u8>();
                                                                        let l17 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len18 = l17;
                                                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18)
                                                                    };
                                                                    V48::TupleValue(e48)
                                                                }
                                                                5 => {
                                                                    let e48 = {
                                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                                        let l20 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len21 = l20;
                                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                                    };
                                                                    V48::ListValue(e48)
                                                                }
                                                                6 => {
                                                                    let e48 = {
                                                                        let l22 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l22 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l23 = *base.add(12).cast::<i32>();
                                                                                    l23
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::OptionValue(e48)
                                                                }
                                                                7 => {
                                                                    let e48 = {
                                                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l24 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l25 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l25 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l26 = *base.add(16).cast::<i32>();
                                                                                                l26
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l27 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l28 = *base.add(16).cast::<i32>();
                                                                                                l28
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::ResultValue(e48)
                                                                }
                                                                8 => {
                                                                    let e48 = {
                                                                        let l29 = i32::from(*base.add(8).cast::<u8>());
                                                                        l29 as u8
                                                                    };
                                                                    V48::PrimU8(e48)
                                                                }
                                                                9 => {
                                                                    let e48 = {
                                                                        let l30 = i32::from(*base.add(8).cast::<u16>());
                                                                        l30 as u16
                                                                    };
                                                                    V48::PrimU16(e48)
                                                                }
                                                                10 => {
                                                                    let e48 = {
                                                                        let l31 = *base.add(8).cast::<i32>();
                                                                        l31 as u32
                                                                    };
                                                                    V48::PrimU32(e48)
                                                                }
                                                                11 => {
                                                                    let e48 = {
                                                                        let l32 = *base.add(8).cast::<i64>();
                                                                        l32 as u64
                                                                    };
                                                                    V48::PrimU64(e48)
                                                                }
                                                                12 => {
                                                                    let e48 = {
                                                                        let l33 = i32::from(*base.add(8).cast::<i8>());
                                                                        l33 as i8
                                                                    };
                                                                    V48::PrimS8(e48)
                                                                }
                                                                13 => {
                                                                    let e48 = {
                                                                        let l34 = i32::from(*base.add(8).cast::<i16>());
                                                                        l34 as i16
                                                                    };
                                                                    V48::PrimS16(e48)
                                                                }
                                                                14 => {
                                                                    let e48 = {
                                                                        let l35 = *base.add(8).cast::<i32>();
                                                                        l35
                                                                    };
                                                                    V48::PrimS32(e48)
                                                                }
                                                                15 => {
                                                                    let e48 = {
                                                                        let l36 = *base.add(8).cast::<i64>();
                                                                        l36
                                                                    };
                                                                    V48::PrimS64(e48)
                                                                }
                                                                16 => {
                                                                    let e48 = {
                                                                        let l37 = *base.add(8).cast::<f32>();
                                                                        l37
                                                                    };
                                                                    V48::PrimFloat32(e48)
                                                                }
                                                                17 => {
                                                                    let e48 = {
                                                                        let l38 = *base.add(8).cast::<f64>();
                                                                        l38
                                                                    };
                                                                    V48::PrimFloat64(e48)
                                                                }
                                                                18 => {
                                                                    let e48 = {
                                                                        let l39 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l39 as u32)
                                                                    };
                                                                    V48::PrimChar(e48)
                                                                }
                                                                19 => {
                                                                    let e48 = {
                                                                        let l40 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l40 as u8)
                                                                    };
                                                                    V48::PrimBool(e48)
                                                                }
                                                                20 => {
                                                                    let e48 = {
                                                                        let l41 = *base.add(8).cast::<*mut u8>();
                                                                        let l42 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len43 = l42;
                                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                                            l41.cast(),
                                                                            len43,
                                                                            len43,
                                                                        );
                                                                        _rt::string_lift(bytes43)
                                                                    };
                                                                    V48::PrimString(e48)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e48 = {
                                                                        let l44 = *base.add(8).cast::<*mut u8>();
                                                                        let l45 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len46 = l45;
                                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                                            l44.cast(),
                                                                            len46,
                                                                            len46,
                                                                        );
                                                                        let l47 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes46),
                                                                            },
                                                                            l47 as u64,
                                                                        )
                                                                    };
                                                                    V48::Handle(e48)
                                                                }
                                                            };
                                                            v48
                                                        };
                                                        result49.push(e49);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base49,
                                                        len49 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result49,
                                                    }
                                                };
                                                V73::ComponentModel(e73)
                                            }
                                            1 => {
                                                let e73 = {
                                                    let l50 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V61;
                                                    let v61 = match l50 {
                                                        0 => {
                                                            let e61 = {
                                                                let l51 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l52 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                                    l51.cast(),
                                                                    len53,
                                                                    len53,
                                                                );
                                                                _rt::string_lift(bytes53)
                                                            };
                                                            V61::Url(e61)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e61 = {
                                                                let l54 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l55 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                                    l54.cast(),
                                                                    len56,
                                                                    len56,
                                                                );
                                                                let l57 = i32::from(
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes56),
                                                                    text_type: match l57 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l58 = *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l59 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len60 = l59;
                                                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                                                    l58.cast(),
                                                                                    len60,
                                                                                    len60,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes60),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V61::Inline(e61)
                                                        }
                                                    };
                                                    v61
                                                };
                                                V73::UnstructuredText(e73)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e73 = {
                                                    let l62 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V72;
                                                    let v72 = match l62 {
                                                        0 => {
                                                            let e72 = {
                                                                let l63 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l64 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len65 = l64;
                                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                );
                                                                _rt::string_lift(bytes65)
                                                            };
                                                            V72::Url(e72)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e72 = {
                                                                let l66 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l67 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len68 = l67;
                                                                let l69 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l70 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len71 = l70;
                                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes71),
                                                                    },
                                                                }
                                                            };
                                                            V72::Inline(e72)
                                                        }
                                                    };
                                                    v72
                                                };
                                                V73::UnstructuredBinary(e73)
                                            }
                                        };
                                        v73
                                    };
                                    result74.push(e74);
                                }
                                _rt::cabi_dealloc(
                                    base74,
                                    len74 * (7 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result74
                            };
                            V152::Tuple(e152)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e152 = {
                                let base151 = arg4;
                                let len151 = arg5;
                                let mut result151 = _rt::Vec::with_capacity(len151);
                                for i in 0..len151 {
                                    let base = base151
                                        .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                    let e151 = {
                                        let l75 = *base.add(0).cast::<*mut u8>();
                                        let l76 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len77 = l76;
                                        let bytes77 = _rt::Vec::from_raw_parts(
                                            l75.cast(),
                                            len77,
                                            len77,
                                        );
                                        let l78 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::agent::common::ElementValue as V150;
                                        let v150 = match l78 {
                                            0 => {
                                                let e150 = {
                                                    let l79 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l80 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base126 = l79;
                                                    let len126 = l80;
                                                    let mut result126 = _rt::Vec::with_capacity(len126);
                                                    for i in 0..len126 {
                                                        let base = base126
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e126 = {
                                                            let l81 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V125;
                                                            let v125 = match l81 {
                                                                0 => {
                                                                    let e125 = {
                                                                        let l82 = *base.add(8).cast::<*mut u8>();
                                                                        let l83 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len84 = l83;
                                                                        _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                    };
                                                                    V125::RecordValue(e125)
                                                                }
                                                                1 => {
                                                                    let e125 = {
                                                                        let l85 = *base.add(8).cast::<i32>();
                                                                        let l86 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l85 as u32,
                                                                            match l86 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l87 = *base.add(16).cast::<i32>();
                                                                                        l87
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V125::VariantValue(e125)
                                                                }
                                                                2 => {
                                                                    let e125 = {
                                                                        let l88 = *base.add(8).cast::<i32>();
                                                                        l88 as u32
                                                                    };
                                                                    V125::EnumValue(e125)
                                                                }
                                                                3 => {
                                                                    let e125 = {
                                                                        let l89 = *base.add(8).cast::<*mut u8>();
                                                                        let l90 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base92 = l89;
                                                                        let len92 = l90;
                                                                        let mut result92 = _rt::Vec::with_capacity(len92);
                                                                        for i in 0..len92 {
                                                                            let base = base92.add(i * 1);
                                                                            let e92 = {
                                                                                let l91 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l91 as u8)
                                                                            };
                                                                            result92.push(e92);
                                                                        }
                                                                        _rt::cabi_dealloc(base92, len92 * 1, 1);
                                                                        result92
                                                                    };
                                                                    V125::FlagsValue(e125)
                                                                }
                                                                4 => {
                                                                    let e125 = {
                                                                        let l93 = *base.add(8).cast::<*mut u8>();
                                                                        let l94 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len95 = l94;
                                                                        _rt::Vec::from_raw_parts(l93.cast(), len95, len95)
                                                                    };
                                                                    V125::TupleValue(e125)
                                                                }
                                                                5 => {
                                                                    let e125 = {
                                                                        let l96 = *base.add(8).cast::<*mut u8>();
                                                                        let l97 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len98 = l97;
                                                                        _rt::Vec::from_raw_parts(l96.cast(), len98, len98)
                                                                    };
                                                                    V125::ListValue(e125)
                                                                }
                                                                6 => {
                                                                    let e125 = {
                                                                        let l99 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l99 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l100 = *base.add(12).cast::<i32>();
                                                                                    l100
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::OptionValue(e125)
                                                                }
                                                                7 => {
                                                                    let e125 = {
                                                                        let l101 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l101 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l102 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l102 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l103 = *base.add(16).cast::<i32>();
                                                                                                l103
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l104 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l104 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l105 = *base.add(16).cast::<i32>();
                                                                                                l105
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::ResultValue(e125)
                                                                }
                                                                8 => {
                                                                    let e125 = {
                                                                        let l106 = i32::from(*base.add(8).cast::<u8>());
                                                                        l106 as u8
                                                                    };
                                                                    V125::PrimU8(e125)
                                                                }
                                                                9 => {
                                                                    let e125 = {
                                                                        let l107 = i32::from(*base.add(8).cast::<u16>());
                                                                        l107 as u16
                                                                    };
                                                                    V125::PrimU16(e125)
                                                                }
                                                                10 => {
                                                                    let e125 = {
                                                                        let l108 = *base.add(8).cast::<i32>();
                                                                        l108 as u32
                                                                    };
                                                                    V125::PrimU32(e125)
                                                                }
                                                                11 => {
                                                                    let e125 = {
                                                                        let l109 = *base.add(8).cast::<i64>();
                                                                        l109 as u64
                                                                    };
                                                                    V125::PrimU64(e125)
                                                                }
                                                                12 => {
                                                                    let e125 = {
                                                                        let l110 = i32::from(*base.add(8).cast::<i8>());
                                                                        l110 as i8
                                                                    };
                                                                    V125::PrimS8(e125)
                                                                }
                                                                13 => {
                                                                    let e125 = {
                                                                        let l111 = i32::from(*base.add(8).cast::<i16>());
                                                                        l111 as i16
                                                                    };
                                                                    V125::PrimS16(e125)
                                                                }
                                                                14 => {
                                                                    let e125 = {
                                                                        let l112 = *base.add(8).cast::<i32>();
                                                                        l112
                                                                    };
                                                                    V125::PrimS32(e125)
                                                                }
                                                                15 => {
                                                                    let e125 = {
                                                                        let l113 = *base.add(8).cast::<i64>();
                                                                        l113
                                                                    };
                                                                    V125::PrimS64(e125)
                                                                }
                                                                16 => {
                                                                    let e125 = {
                                                                        let l114 = *base.add(8).cast::<f32>();
                                                                        l114
                                                                    };
                                                                    V125::PrimFloat32(e125)
                                                                }
                                                                17 => {
                                                                    let e125 = {
                                                                        let l115 = *base.add(8).cast::<f64>();
                                                                        l115
                                                                    };
                                                                    V125::PrimFloat64(e125)
                                                                }
                                                                18 => {
                                                                    let e125 = {
                                                                        let l116 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l116 as u32)
                                                                    };
                                                                    V125::PrimChar(e125)
                                                                }
                                                                19 => {
                                                                    let e125 = {
                                                                        let l117 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l117 as u8)
                                                                    };
                                                                    V125::PrimBool(e125)
                                                                }
                                                                20 => {
                                                                    let e125 = {
                                                                        let l118 = *base.add(8).cast::<*mut u8>();
                                                                        let l119 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len120 = l119;
                                                                        let bytes120 = _rt::Vec::from_raw_parts(
                                                                            l118.cast(),
                                                                            len120,
                                                                            len120,
                                                                        );
                                                                        _rt::string_lift(bytes120)
                                                                    };
                                                                    V125::PrimString(e125)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e125 = {
                                                                        let l121 = *base.add(8).cast::<*mut u8>();
                                                                        let l122 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len123 = l122;
                                                                        let bytes123 = _rt::Vec::from_raw_parts(
                                                                            l121.cast(),
                                                                            len123,
                                                                            len123,
                                                                        );
                                                                        let l124 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes123),
                                                                            },
                                                                            l124 as u64,
                                                                        )
                                                                    };
                                                                    V125::Handle(e125)
                                                                }
                                                            };
                                                            v125
                                                        };
                                                        result126.push(e126);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base126,
                                                        len126 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result126,
                                                    }
                                                };
                                                V150::ComponentModel(e150)
                                            }
                                            1 => {
                                                let e150 = {
                                                    let l127 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V138;
                                                    let v138 = match l127 {
                                                        0 => {
                                                            let e138 = {
                                                                let l128 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l129 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len130 = l129;
                                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                                    l128.cast(),
                                                                    len130,
                                                                    len130,
                                                                );
                                                                _rt::string_lift(bytes130)
                                                            };
                                                            V138::Url(e138)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e138 = {
                                                                let l131 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l132 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len133 = l132;
                                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                                    l131.cast(),
                                                                    len133,
                                                                    len133,
                                                                );
                                                                let l134 = i32::from(
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes133),
                                                                    text_type: match l134 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l135 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l136 = *base
                                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len137 = l136;
                                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                                    l135.cast(),
                                                                                    len137,
                                                                                    len137,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes137),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V138::Inline(e138)
                                                        }
                                                    };
                                                    v138
                                                };
                                                V150::UnstructuredText(e150)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e150 = {
                                                    let l139 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V149;
                                                    let v149 = match l139 {
                                                        0 => {
                                                            let e149 = {
                                                                let l140 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l141 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len142 = l141;
                                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                                    l140.cast(),
                                                                    len142,
                                                                    len142,
                                                                );
                                                                _rt::string_lift(bytes142)
                                                            };
                                                            V149::Url(e149)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e149 = {
                                                                let l143 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l144 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len145 = l144;
                                                                let l146 = *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l147 = *base
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len148 = l147;
                                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                                    l146.cast(),
                                                                    len148,
                                                                    len148,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l143.cast(), len145, len145),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes148),
                                                                    },
                                                                }
                                                            };
                                                            V149::Inline(e149)
                                                        }
                                                    };
                                                    v149
                                                };
                                                V150::UnstructuredBinary(e150)
                                            }
                                        };
                                        (_rt::string_lift(bytes77), v150)
                                    };
                                    result151.push(e151);
                                }
                                _rt::cabi_dealloc(
                                    base151,
                                    len151 * (9 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result151
                            };
                            V152::Multimodal(e152)
                        }
                    };
                    let result153 = T::invoke(
                        unsafe { AgentBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        v152,
                    );
                    let ptr154 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result153 {
                        Ok(e) => {
                            *ptr154.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::golem::agent::common::DataValue as V209;
                            match e {
                                V209::Tuple(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec180 = e;
                                    let len180 = vec180.len();
                                    let layout180 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec180.len() * (7 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result180 = if layout180.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout180).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout180);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec180.into_iter().enumerate() {
                                        let base = result180
                                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            use super::super::super::super::golem::agent::common::ElementValue as V179;
                                            match e {
                                                V179::ComponentModel(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: nodes155,
                                                    } = e;
                                                    let vec166 = nodes155;
                                                    let len166 = vec166.len();
                                                    let layout166 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec166.len()
                                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result166 = if layout166.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout166).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout166);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec166.into_iter().enumerate() {
                                                        let base = result166
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            use super::super::super::super::golem::rpc::types::WitNode as V165;
                                                            match e {
                                                                V165::RecordValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec156 = (e).into_boxed_slice();
                                                                    let ptr156 = vec156.as_ptr().cast::<u8>();
                                                                    let len156 = vec156.len();
                                                                    ::core::mem::forget(vec156);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len156;
                                                                    *base.add(8).cast::<*mut u8>() = ptr156.cast_mut();
                                                                }
                                                                V165::VariantValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let (t157_0, t157_1) = e;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t157_0);
                                                                    match t157_1 {
                                                                        Some(e) => {
                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V165::EnumValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::FlagsValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    let vec158 = e;
                                                                    let len158 = vec158.len();
                                                                    let layout158 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec158.len() * 1,
                                                                        1,
                                                                    );
                                                                    let result158 = if layout158.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout158).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout158);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec158.into_iter().enumerate() {
                                                                        let base = result158.add(i * 1);
                                                                        {
                                                                            *base.add(0).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len158;
                                                                    *base.add(8).cast::<*mut u8>() = result158;
                                                                }
                                                                V165::TupleValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                    let vec159 = (e).into_boxed_slice();
                                                                    let ptr159 = vec159.as_ptr().cast::<u8>();
                                                                    let len159 = vec159.len();
                                                                    ::core::mem::forget(vec159);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len159;
                                                                    *base.add(8).cast::<*mut u8>() = ptr159.cast_mut();
                                                                }
                                                                V165::ListValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec160 = (e).into_boxed_slice();
                                                                    let ptr160 = vec160.as_ptr().cast::<u8>();
                                                                    let len160 = vec160.len();
                                                                    ::core::mem::forget(vec160);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len160;
                                                                    *base.add(8).cast::<*mut u8>() = ptr160.cast_mut();
                                                                }
                                                                V165::OptionValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    match e {
                                                                        Some(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V165::ResultValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    match e {
                                                                        Ok(e) => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        Err(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    };
                                                                }
                                                                V165::PrimU8(e) => {
                                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V165::PrimU16(e) => {
                                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V165::PrimU32(e) => {
                                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::PrimU64(e) => {
                                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V165::PrimS8(e) => {
                                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V165::PrimS16(e) => {
                                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V165::PrimS32(e) => {
                                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::PrimS64(e) => {
                                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V165::PrimFloat32(e) => {
                                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                }
                                                                V165::PrimFloat64(e) => {
                                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V165::PrimChar(e) => {
                                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::PrimBool(e) => {
                                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V165::PrimString(e) => {
                                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                    let vec161 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr161 = vec161.as_ptr().cast::<u8>();
                                                                    let len161 = vec161.len();
                                                                    ::core::mem::forget(vec161);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len161;
                                                                    *base.add(8).cast::<*mut u8>() = ptr161.cast_mut();
                                                                }
                                                                V165::Handle(e) => {
                                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                    let (t162_0, t162_1) = e;
                                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                                        value: value163,
                                                                    } = t162_0;
                                                                    let vec164 = (value163.into_bytes()).into_boxed_slice();
                                                                    let ptr164 = vec164.as_ptr().cast::<u8>();
                                                                    let len164 = vec164.len();
                                                                    ::core::mem::forget(vec164);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len164;
                                                                    *base.add(8).cast::<*mut u8>() = ptr164.cast_mut();
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t162_1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len166;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result166;
                                                }
                                                V179::UnstructuredText(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::agent::common::TextReference as V172;
                                                    match e {
                                                        V172::Url(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec167 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr167 = vec167.as_ptr().cast::<u8>();
                                                            let len167 = vec167.len();
                                                            ::core::mem::forget(vec167);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len167;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr167.cast_mut();
                                                        }
                                                        V172::Inline(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextSource {
                                                                data: data168,
                                                                text_type: text_type168,
                                                            } = e;
                                                            let vec169 = (data168.into_bytes()).into_boxed_slice();
                                                            let ptr169 = vec169.as_ptr().cast::<u8>();
                                                            let len169 = vec169.len();
                                                            ::core::mem::forget(vec169);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len169;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr169.cast_mut();
                                                            match text_type168 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code170,
                                                                    } = e;
                                                                    let vec171 = (language_code170.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr171 = vec171.as_ptr().cast::<u8>();
                                                                    let len171 = vec171.len();
                                                                    ::core::mem::forget(vec171);
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len171;
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr171.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                                V179::UnstructuredBinary(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V178;
                                                    match e {
                                                        V178::Url(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec173 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr173 = vec173.as_ptr().cast::<u8>();
                                                            let len173 = vec173.len();
                                                            ::core::mem::forget(vec173);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len173;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr173.cast_mut();
                                                        }
                                                        V178::Inline(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinarySource {
                                                                data: data174,
                                                                binary_type: binary_type174,
                                                            } = e;
                                                            let vec175 = (data174).into_boxed_slice();
                                                            let ptr175 = vec175.as_ptr().cast::<u8>();
                                                            let len175 = vec175.len();
                                                            ::core::mem::forget(vec175);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len175;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr175.cast_mut();
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type176,
                                                            } = binary_type174;
                                                            let vec177 = (mime_type176.into_bytes()).into_boxed_slice();
                                                            let ptr177 = vec177.as_ptr().cast::<u8>();
                                                            let len177 = vec177.len();
                                                            ::core::mem::forget(vec177);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len177;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr177.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len180;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result180;
                                }
                                V209::Multimodal(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec208 = e;
                                    let len208 = vec208.len();
                                    let layout208 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec208.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result208 = if layout208.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout208).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout208);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec208.into_iter().enumerate() {
                                        let base = result208
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t181_0, t181_1) = e;
                                            let vec182 = (t181_0.into_bytes()).into_boxed_slice();
                                            let ptr182 = vec182.as_ptr().cast::<u8>();
                                            let len182 = vec182.len();
                                            ::core::mem::forget(vec182);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len182;
                                            *base.add(0).cast::<*mut u8>() = ptr182.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementValue as V207;
                                            match t181_1 {
                                                V207::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: nodes183,
                                                    } = e;
                                                    let vec194 = nodes183;
                                                    let len194 = vec194.len();
                                                    let layout194 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec194.len()
                                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result194 = if layout194.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout194).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout194);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec194.into_iter().enumerate() {
                                                        let base = result194
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            use super::super::super::super::golem::rpc::types::WitNode as V193;
                                                            match e {
                                                                V193::RecordValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec184 = (e).into_boxed_slice();
                                                                    let ptr184 = vec184.as_ptr().cast::<u8>();
                                                                    let len184 = vec184.len();
                                                                    ::core::mem::forget(vec184);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len184;
                                                                    *base.add(8).cast::<*mut u8>() = ptr184.cast_mut();
                                                                }
                                                                V193::VariantValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let (t185_0, t185_1) = e;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t185_0);
                                                                    match t185_1 {
                                                                        Some(e) => {
                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V193::EnumValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::FlagsValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    let vec186 = e;
                                                                    let len186 = vec186.len();
                                                                    let layout186 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec186.len() * 1,
                                                                        1,
                                                                    );
                                                                    let result186 = if layout186.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout186).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout186);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec186.into_iter().enumerate() {
                                                                        let base = result186.add(i * 1);
                                                                        {
                                                                            *base.add(0).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len186;
                                                                    *base.add(8).cast::<*mut u8>() = result186;
                                                                }
                                                                V193::TupleValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                    let vec187 = (e).into_boxed_slice();
                                                                    let ptr187 = vec187.as_ptr().cast::<u8>();
                                                                    let len187 = vec187.len();
                                                                    ::core::mem::forget(vec187);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len187;
                                                                    *base.add(8).cast::<*mut u8>() = ptr187.cast_mut();
                                                                }
                                                                V193::ListValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec188 = (e).into_boxed_slice();
                                                                    let ptr188 = vec188.as_ptr().cast::<u8>();
                                                                    let len188 = vec188.len();
                                                                    ::core::mem::forget(vec188);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len188;
                                                                    *base.add(8).cast::<*mut u8>() = ptr188.cast_mut();
                                                                }
                                                                V193::OptionValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    match e {
                                                                        Some(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V193::ResultValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    match e {
                                                                        Ok(e) => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        Err(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    };
                                                                }
                                                                V193::PrimU8(e) => {
                                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V193::PrimU16(e) => {
                                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V193::PrimU32(e) => {
                                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::PrimU64(e) => {
                                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V193::PrimS8(e) => {
                                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V193::PrimS16(e) => {
                                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V193::PrimS32(e) => {
                                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::PrimS64(e) => {
                                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V193::PrimFloat32(e) => {
                                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                }
                                                                V193::PrimFloat64(e) => {
                                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V193::PrimChar(e) => {
                                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::PrimBool(e) => {
                                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V193::PrimString(e) => {
                                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                    let vec189 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr189 = vec189.as_ptr().cast::<u8>();
                                                                    let len189 = vec189.len();
                                                                    ::core::mem::forget(vec189);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len189;
                                                                    *base.add(8).cast::<*mut u8>() = ptr189.cast_mut();
                                                                }
                                                                V193::Handle(e) => {
                                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                    let (t190_0, t190_1) = e;
                                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                                        value: value191,
                                                                    } = t190_0;
                                                                    let vec192 = (value191.into_bytes()).into_boxed_slice();
                                                                    let ptr192 = vec192.as_ptr().cast::<u8>();
                                                                    let len192 = vec192.len();
                                                                    ::core::mem::forget(vec192);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len192;
                                                                    *base.add(8).cast::<*mut u8>() = ptr192.cast_mut();
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t190_1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len194;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result194;
                                                }
                                                V207::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::agent::common::TextReference as V200;
                                                    match e {
                                                        V200::Url(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec195 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr195 = vec195.as_ptr().cast::<u8>();
                                                            let len195 = vec195.len();
                                                            ::core::mem::forget(vec195);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len195;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr195.cast_mut();
                                                        }
                                                        V200::Inline(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextSource {
                                                                data: data196,
                                                                text_type: text_type196,
                                                            } = e;
                                                            let vec197 = (data196.into_bytes()).into_boxed_slice();
                                                            let ptr197 = vec197.as_ptr().cast::<u8>();
                                                            let len197 = vec197.len();
                                                            ::core::mem::forget(vec197);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len197;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr197.cast_mut();
                                                            match text_type196 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code198,
                                                                    } = e;
                                                                    let vec199 = (language_code198.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr199 = vec199.as_ptr().cast::<u8>();
                                                                    let len199 = vec199.len();
                                                                    ::core::mem::forget(vec199);
                                                                    *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len199;
                                                                    *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr199.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                                V207::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V206;
                                                    match e {
                                                        V206::Url(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec201 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr201 = vec201.as_ptr().cast::<u8>();
                                                            let len201 = vec201.len();
                                                            ::core::mem::forget(vec201);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len201;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr201.cast_mut();
                                                        }
                                                        V206::Inline(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinarySource {
                                                                data: data202,
                                                                binary_type: binary_type202,
                                                            } = e;
                                                            let vec203 = (data202).into_boxed_slice();
                                                            let ptr203 = vec203.as_ptr().cast::<u8>();
                                                            let len203 = vec203.len();
                                                            ::core::mem::forget(vec203);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len203;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr203.cast_mut();
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type204,
                                                            } = binary_type202;
                                                            let vec205 = (mime_type204.into_bytes()).into_boxed_slice();
                                                            let ptr205 = vec205.as_ptr().cast::<u8>();
                                                            let len205 = vec205.len();
                                                            ::core::mem::forget(vec205);
                                                            *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len205;
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr205.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len208;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result208;
                                }
                            }
                        }
                        Err(e) => {
                            *ptr154.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::agent::common::AgentError as V269;
                            match e {
                                V269::InvalidInput(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec210 = (e.into_bytes()).into_boxed_slice();
                                    let ptr210 = vec210.as_ptr().cast::<u8>();
                                    let len210 = vec210.len();
                                    ::core::mem::forget(vec210);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len210;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr210.cast_mut();
                                }
                                V269::InvalidMethod(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec211 = (e.into_bytes()).into_boxed_slice();
                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                    let len211 = vec211.len();
                                    ::core::mem::forget(vec211);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len211;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr211.cast_mut();
                                }
                                V269::InvalidType(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec212 = (e.into_bytes()).into_boxed_slice();
                                    let ptr212 = vec212.as_ptr().cast::<u8>();
                                    let len212 = vec212.len();
                                    ::core::mem::forget(vec212);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len212;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr212.cast_mut();
                                }
                                V269::InvalidAgentId(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec213 = (e.into_bytes()).into_boxed_slice();
                                    let ptr213 = vec213.as_ptr().cast::<u8>();
                                    let len213 = vec213.len();
                                    ::core::mem::forget(vec213);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len213;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr213.cast_mut();
                                }
                                V269::CustomError(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    use super::super::super::super::golem::agent::common::DataValue as V268;
                                    match e {
                                        V268::Tuple(e) => {
                                            *ptr154
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec239 = e;
                                            let len239 = vec239.len();
                                            let layout239 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec239.len() * (7 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result239 = if layout239.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout239).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout239);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec239.into_iter().enumerate() {
                                                let base = result239
                                                    .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    use super::super::super::super::golem::agent::common::ElementValue as V238;
                                                    match e {
                                                        V238::ComponentModel(e) => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitValue {
                                                                nodes: nodes214,
                                                            } = e;
                                                            let vec225 = nodes214;
                                                            let len225 = vec225.len();
                                                            let layout225 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec225.len()
                                                                    * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result225 = if layout225.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout225).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout225);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec225.into_iter().enumerate() {
                                                                let base = result225
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    use super::super::super::super::golem::rpc::types::WitNode as V224;
                                                                    match e {
                                                                        V224::RecordValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec215 = (e).into_boxed_slice();
                                                                            let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                            let len215 = vec215.len();
                                                                            ::core::mem::forget(vec215);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len215;
                                                                            *base.add(8).cast::<*mut u8>() = ptr215.cast_mut();
                                                                        }
                                                                        V224::VariantValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let (t216_0, t216_1) = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(t216_0);
                                                                            match t216_1 {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V224::EnumValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V224::FlagsValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            let vec217 = e;
                                                                            let len217 = vec217.len();
                                                                            let layout217 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec217.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result217 = if layout217.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout217).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout217);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec217.into_iter().enumerate() {
                                                                                let base = result217.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len217;
                                                                            *base.add(8).cast::<*mut u8>() = result217;
                                                                        }
                                                                        V224::TupleValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            let vec218 = (e).into_boxed_slice();
                                                                            let ptr218 = vec218.as_ptr().cast::<u8>();
                                                                            let len218 = vec218.len();
                                                                            ::core::mem::forget(vec218);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len218;
                                                                            *base.add(8).cast::<*mut u8>() = ptr218.cast_mut();
                                                                        }
                                                                        V224::ListValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec219 = (e).into_boxed_slice();
                                                                            let ptr219 = vec219.as_ptr().cast::<u8>();
                                                                            let len219 = vec219.len();
                                                                            ::core::mem::forget(vec219);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len219;
                                                                            *base.add(8).cast::<*mut u8>() = ptr219.cast_mut();
                                                                        }
                                                                        V224::OptionValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V224::ResultValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            match e {
                                                                                Ok(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                Err(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            };
                                                                        }
                                                                        V224::PrimU8(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V224::PrimU16(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V224::PrimU32(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V224::PrimU64(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V224::PrimS8(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V224::PrimS16(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V224::PrimS32(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V224::PrimS64(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V224::PrimFloat32(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V224::PrimFloat64(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V224::PrimChar(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V224::PrimBool(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V224::PrimString(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec220 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr220 = vec220.as_ptr().cast::<u8>();
                                                                            let len220 = vec220.len();
                                                                            ::core::mem::forget(vec220);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len220;
                                                                            *base.add(8).cast::<*mut u8>() = ptr220.cast_mut();
                                                                        }
                                                                        V224::Handle(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let (t221_0, t221_1) = e;
                                                                            let super::super::super::super::golem::rpc::types::Uri {
                                                                                value: value222,
                                                                            } = t221_0;
                                                                            let vec223 = (value222.into_bytes()).into_boxed_slice();
                                                                            let ptr223 = vec223.as_ptr().cast::<u8>();
                                                                            let len223 = vec223.len();
                                                                            ::core::mem::forget(vec223);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len223;
                                                                            *base.add(8).cast::<*mut u8>() = ptr223.cast_mut();
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t221_1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len225;
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result225;
                                                        }
                                                        V238::UnstructuredText(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            use super::super::super::super::golem::agent::common::TextReference as V231;
                                                            match e {
                                                                V231::Url(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec226 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr226 = vec226.as_ptr().cast::<u8>();
                                                                    let len226 = vec226.len();
                                                                    ::core::mem::forget(vec226);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len226;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr226.cast_mut();
                                                                }
                                                                V231::Inline(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextSource {
                                                                        data: data227,
                                                                        text_type: text_type227,
                                                                    } = e;
                                                                    let vec228 = (data227.into_bytes()).into_boxed_slice();
                                                                    let ptr228 = vec228.as_ptr().cast::<u8>();
                                                                    let len228 = vec228.len();
                                                                    ::core::mem::forget(vec228);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len228;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr228.cast_mut();
                                                                    match text_type227 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code229,
                                                                            } = e;
                                                                            let vec230 = (language_code229.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr230 = vec230.as_ptr().cast::<u8>();
                                                                            let len230 = vec230.len();
                                                                            ::core::mem::forget(vec230);
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len230;
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr230.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                        V238::UnstructuredBinary(e) => {
                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                            use super::super::super::super::golem::agent::common::BinaryReference as V237;
                                                            match e {
                                                                V237::Url(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec232 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr232 = vec232.as_ptr().cast::<u8>();
                                                                    let len232 = vec232.len();
                                                                    ::core::mem::forget(vec232);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len232;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr232.cast_mut();
                                                                }
                                                                V237::Inline(e) => {
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinarySource {
                                                                        data: data233,
                                                                        binary_type: binary_type233,
                                                                    } = e;
                                                                    let vec234 = (data233).into_boxed_slice();
                                                                    let ptr234 = vec234.as_ptr().cast::<u8>();
                                                                    let len234 = vec234.len();
                                                                    ::core::mem::forget(vec234);
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len234;
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr234.cast_mut();
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type235,
                                                                    } = binary_type233;
                                                                    let vec236 = (mime_type235.into_bytes()).into_boxed_slice();
                                                                    let ptr236 = vec236.as_ptr().cast::<u8>();
                                                                    let len236 = vec236.len();
                                                                    ::core::mem::forget(vec236);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len236;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr236.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            *ptr154
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len239;
                                            *ptr154
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result239;
                                        }
                                        V268::Multimodal(e) => {
                                            *ptr154
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec267 = e;
                                            let len267 = vec267.len();
                                            let layout267 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec267.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result267 = if layout267.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout267).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout267);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec267.into_iter().enumerate() {
                                                let base = result267
                                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t240_0, t240_1) = e;
                                                    let vec241 = (t240_0.into_bytes()).into_boxed_slice();
                                                    let ptr241 = vec241.as_ptr().cast::<u8>();
                                                    let len241 = vec241.len();
                                                    ::core::mem::forget(vec241);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len241;
                                                    *base.add(0).cast::<*mut u8>() = ptr241.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementValue as V266;
                                                    match t240_1 {
                                                        V266::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitValue {
                                                                nodes: nodes242,
                                                            } = e;
                                                            let vec253 = nodes242;
                                                            let len253 = vec253.len();
                                                            let layout253 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec253.len()
                                                                    * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result253 = if layout253.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout253).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout253);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec253.into_iter().enumerate() {
                                                                let base = result253
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    use super::super::super::super::golem::rpc::types::WitNode as V252;
                                                                    match e {
                                                                        V252::RecordValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                            let vec243 = (e).into_boxed_slice();
                                                                            let ptr243 = vec243.as_ptr().cast::<u8>();
                                                                            let len243 = vec243.len();
                                                                            ::core::mem::forget(vec243);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len243;
                                                                            *base.add(8).cast::<*mut u8>() = ptr243.cast_mut();
                                                                        }
                                                                        V252::VariantValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let (t244_0, t244_1) = e;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(t244_0);
                                                                            match t244_1 {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V252::EnumValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V252::FlagsValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                            let vec245 = e;
                                                                            let len245 = vec245.len();
                                                                            let layout245 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec245.len() * 1,
                                                                                1,
                                                                            );
                                                                            let result245 = if layout245.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout245).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout245);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec245.into_iter().enumerate() {
                                                                                let base = result245.add(i * 1);
                                                                                {
                                                                                    *base.add(0).cast::<u8>() = (match e {
                                                                                        true => 1,
                                                                                        false => 0,
                                                                                    }) as u8;
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len245;
                                                                            *base.add(8).cast::<*mut u8>() = result245;
                                                                        }
                                                                        V252::TupleValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                            let vec246 = (e).into_boxed_slice();
                                                                            let ptr246 = vec246.as_ptr().cast::<u8>();
                                                                            let len246 = vec246.len();
                                                                            ::core::mem::forget(vec246);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len246;
                                                                            *base.add(8).cast::<*mut u8>() = ptr246.cast_mut();
                                                                        }
                                                                        V252::ListValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                            let vec247 = (e).into_boxed_slice();
                                                                            let ptr247 = vec247.as_ptr().cast::<u8>();
                                                                            let len247 = vec247.len();
                                                                            ::core::mem::forget(vec247);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len247;
                                                                            *base.add(8).cast::<*mut u8>() = ptr247.cast_mut();
                                                                        }
                                                                        V252::OptionValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V252::ResultValue(e) => {
                                                                            *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                            match e {
                                                                                Ok(e) => {
                                                                                    *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                Err(e) => {
                                                                                    *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                                    match e {
                                                                                        Some(e) => {
                                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            };
                                                                        }
                                                                        V252::PrimU8(e) => {
                                                                            *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V252::PrimU16(e) => {
                                                                            *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V252::PrimU32(e) => {
                                                                            *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V252::PrimU64(e) => {
                                                                            *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V252::PrimS8(e) => {
                                                                            *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                        }
                                                                        V252::PrimS16(e) => {
                                                                            *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                            *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                        }
                                                                        V252::PrimS32(e) => {
                                                                            *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V252::PrimS64(e) => {
                                                                            *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                            *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                        }
                                                                        V252::PrimFloat32(e) => {
                                                                            *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                            *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                        }
                                                                        V252::PrimFloat64(e) => {
                                                                            *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                            *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                        }
                                                                        V252::PrimChar(e) => {
                                                                            *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                            *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V252::PrimBool(e) => {
                                                                            *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                            *base.add(8).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                        V252::PrimString(e) => {
                                                                            *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                            let vec248 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr248 = vec248.as_ptr().cast::<u8>();
                                                                            let len248 = vec248.len();
                                                                            ::core::mem::forget(vec248);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len248;
                                                                            *base.add(8).cast::<*mut u8>() = ptr248.cast_mut();
                                                                        }
                                                                        V252::Handle(e) => {
                                                                            *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                            let (t249_0, t249_1) = e;
                                                                            let super::super::super::super::golem::rpc::types::Uri {
                                                                                value: value250,
                                                                            } = t249_0;
                                                                            let vec251 = (value250.into_bytes()).into_boxed_slice();
                                                                            let ptr251 = vec251.as_ptr().cast::<u8>();
                                                                            let len251 = vec251.len();
                                                                            ::core::mem::forget(vec251);
                                                                            *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len251;
                                                                            *base.add(8).cast::<*mut u8>() = ptr251.cast_mut();
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t249_1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len253;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result253;
                                                        }
                                                        V266::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            use super::super::super::super::golem::agent::common::TextReference as V259;
                                                            match e {
                                                                V259::Url(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec254 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr254 = vec254.as_ptr().cast::<u8>();
                                                                    let len254 = vec254.len();
                                                                    ::core::mem::forget(vec254);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len254;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr254.cast_mut();
                                                                }
                                                                V259::Inline(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextSource {
                                                                        data: data255,
                                                                        text_type: text_type255,
                                                                    } = e;
                                                                    let vec256 = (data255.into_bytes()).into_boxed_slice();
                                                                    let ptr256 = vec256.as_ptr().cast::<u8>();
                                                                    let len256 = vec256.len();
                                                                    ::core::mem::forget(vec256);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len256;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr256.cast_mut();
                                                                    match text_type255 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code257,
                                                                            } = e;
                                                                            let vec258 = (language_code257.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr258 = vec258.as_ptr().cast::<u8>();
                                                                            let len258 = vec258.len();
                                                                            ::core::mem::forget(vec258);
                                                                            *base
                                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len258;
                                                                            *base
                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr258.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                        V266::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            use super::super::super::super::golem::agent::common::BinaryReference as V265;
                                                            match e {
                                                                V265::Url(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec260 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr260 = vec260.as_ptr().cast::<u8>();
                                                                    let len260 = vec260.len();
                                                                    ::core::mem::forget(vec260);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len260;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr260.cast_mut();
                                                                }
                                                                V265::Inline(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinarySource {
                                                                        data: data261,
                                                                        binary_type: binary_type261,
                                                                    } = e;
                                                                    let vec262 = (data261).into_boxed_slice();
                                                                    let ptr262 = vec262.as_ptr().cast::<u8>();
                                                                    let len262 = vec262.len();
                                                                    ::core::mem::forget(vec262);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len262;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr262.cast_mut();
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type263,
                                                                    } = binary_type261;
                                                                    let vec264 = (mime_type263.into_bytes()).into_boxed_slice();
                                                                    let ptr264 = vec264.as_ptr().cast::<u8>();
                                                                    let len264 = vec264.len();
                                                                    ::core::mem::forget(vec264);
                                                                    *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len264;
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr264.cast_mut();
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            *ptr154
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len267;
                                            *ptr154
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result267;
                                        }
                                    }
                                }
                            }
                        }
                    };
                    ptr154
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_invoke<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base41 = l2;
                                    let len41 = l3;
                                    for i in 0..len41 {
                                        let base = base41
                                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            match l4 {
                                                0 => {
                                                    let l5 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l6 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l5;
                                                    let len24 = l6;
                                                    for i in 0..len24 {
                                                        let base = base24
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l7 = i32::from(*base.add(0).cast::<u8>());
                                                            match l7 {
                                                                0 => {
                                                                    let l8 = *base.add(8).cast::<*mut u8>();
                                                                    let l9 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base10 = l8;
                                                                    let len10 = l9;
                                                                    _rt::cabi_dealloc(base10, len10 * 4, 4);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {
                                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                                    let l12 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base13 = l11;
                                                                    let len13 = l12;
                                                                    _rt::cabi_dealloc(base13, len13 * 1, 1);
                                                                }
                                                                4 => {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base16 = l14;
                                                                    let len16 = l15;
                                                                    _rt::cabi_dealloc(base16, len16 * 4, 4);
                                                                }
                                                                5 => {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base19 = l17;
                                                                    let len19 = l18;
                                                                    _rt::cabi_dealloc(base19, len19 * 4, 4);
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l20, l21, 1);
                                                                }
                                                                _ => {
                                                                    let l22 = *base.add(8).cast::<*mut u8>();
                                                                    let l23 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base24,
                                                        len24 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l25 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    match l25 {
                                                        0 => {
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                        }
                                                        _ => {
                                                            let l28 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l29 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                            let l30 = i32::from(
                                                                *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l30 {
                                                                0 => {}
                                                                _ => {
                                                                    let l31 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l33 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    match l33 {
                                                        0 => {
                                                            let l34 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l35 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l34, l35, 1);
                                                        }
                                                        _ => {
                                                            let l36 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l37 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base38 = l36;
                                                            let len38 = l37;
                                                            _rt::cabi_dealloc(base38, len38 * 1, 1);
                                                            let l39 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l40 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l39, l40, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base41,
                                        len41 * (7 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l42 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l43 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base83 = l42;
                                    let len83 = l43;
                                    for i in 0..len83 {
                                        let base = base83
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l44 = *base.add(0).cast::<*mut u8>();
                                            let l45 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l44, l45, 1);
                                            let l46 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l46 {
                                                0 => {
                                                    let l47 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l48 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base66 = l47;
                                                    let len66 = l48;
                                                    for i in 0..len66 {
                                                        let base = base66
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l49 = i32::from(*base.add(0).cast::<u8>());
                                                            match l49 {
                                                                0 => {
                                                                    let l50 = *base.add(8).cast::<*mut u8>();
                                                                    let l51 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base52 = l50;
                                                                    let len52 = l51;
                                                                    _rt::cabi_dealloc(base52, len52 * 4, 4);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {
                                                                    let l53 = *base.add(8).cast::<*mut u8>();
                                                                    let l54 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base55 = l53;
                                                                    let len55 = l54;
                                                                    _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                }
                                                                4 => {
                                                                    let l56 = *base.add(8).cast::<*mut u8>();
                                                                    let l57 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base58 = l56;
                                                                    let len58 = l57;
                                                                    _rt::cabi_dealloc(base58, len58 * 4, 4);
                                                                }
                                                                5 => {
                                                                    let l59 = *base.add(8).cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base61 = l59;
                                                                    let len61 = l60;
                                                                    _rt::cabi_dealloc(base61, len61 * 4, 4);
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {
                                                                    let l62 = *base.add(8).cast::<*mut u8>();
                                                                    let l63 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                }
                                                                _ => {
                                                                    let l64 = *base.add(8).cast::<*mut u8>();
                                                                    let l65 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l64, l65, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base66,
                                                        len66 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l67 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l67 {
                                                        0 => {
                                                            let l68 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l69 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l68, l69, 1);
                                                        }
                                                        _ => {
                                                            let l70 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                            let l72 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l72 {
                                                                0 => {}
                                                                _ => {
                                                                    let l73 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l74 = *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l73, l74, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l75 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l75 {
                                                        0 => {
                                                            let l76 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l77 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l76, l77, 1);
                                                        }
                                                        _ => {
                                                            let l78 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l79 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base80 = l78;
                                                            let len80 = l79;
                                                            _rt::cabi_dealloc(base80, len80 * 1, 1);
                                                            let l81 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l82 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l81, l82, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base83,
                                        len83 * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l84 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l84 {
                                0 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                1 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                2 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                3 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                _ => {
                                    let l93 = i32::from(
                                        *arg0
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l93 {
                                        0 => {
                                            let l94 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l95 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base133 = l94;
                                            let len133 = l95;
                                            for i in 0..len133 {
                                                let base = base133
                                                    .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l96 = i32::from(*base.add(0).cast::<u8>());
                                                    match l96 {
                                                        0 => {
                                                            let l97 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l98 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base116 = l97;
                                                            let len116 = l98;
                                                            for i in 0..len116 {
                                                                let base = base116
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l99 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l99 {
                                                                        0 => {
                                                                            let l100 = *base.add(8).cast::<*mut u8>();
                                                                            let l101 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base102 = l100;
                                                                            let len102 = l101;
                                                                            _rt::cabi_dealloc(base102, len102 * 4, 4);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {
                                                                            let l103 = *base.add(8).cast::<*mut u8>();
                                                                            let l104 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base105 = l103;
                                                                            let len105 = l104;
                                                                            _rt::cabi_dealloc(base105, len105 * 1, 1);
                                                                        }
                                                                        4 => {
                                                                            let l106 = *base.add(8).cast::<*mut u8>();
                                                                            let l107 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base108 = l106;
                                                                            let len108 = l107;
                                                                            _rt::cabi_dealloc(base108, len108 * 4, 4);
                                                                        }
                                                                        5 => {
                                                                            let l109 = *base.add(8).cast::<*mut u8>();
                                                                            let l110 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base111 = l109;
                                                                            let len111 = l110;
                                                                            _rt::cabi_dealloc(base111, len111 * 4, 4);
                                                                        }
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {
                                                                            let l112 = *base.add(8).cast::<*mut u8>();
                                                                            let l113 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l112, l113, 1);
                                                                        }
                                                                        _ => {
                                                                            let l114 = *base.add(8).cast::<*mut u8>();
                                                                            let l115 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l114, l115, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base116,
                                                                len116 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l117 = i32::from(
                                                                *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                            );
                                                            match l117 {
                                                                0 => {
                                                                    let l118 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l119 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l118, l119, 1);
                                                                }
                                                                _ => {
                                                                    let l120 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l121 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l120, l121, 1);
                                                                    let l122 = i32::from(
                                                                        *base
                                                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l122 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l123 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l124 = *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l123, l124, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l125 = i32::from(
                                                                *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                            );
                                                            match l125 {
                                                                0 => {
                                                                    let l126 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l127 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l126, l127, 1);
                                                                }
                                                                _ => {
                                                                    let l128 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l129 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base130 = l128;
                                                                    let len130 = l129;
                                                                    _rt::cabi_dealloc(base130, len130 * 1, 1);
                                                                    let l131 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l132 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l131, l132, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base133,
                                                len133 * (7 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l134 = *arg0
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l135 = *arg0
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base175 = l134;
                                            let len175 = l135;
                                            for i in 0..len175 {
                                                let base = base175
                                                    .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l136 = *base.add(0).cast::<*mut u8>();
                                                    let l137 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l136, l137, 1);
                                                    let l138 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l138 {
                                                        0 => {
                                                            let l139 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l140 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base158 = l139;
                                                            let len158 = l140;
                                                            for i in 0..len158 {
                                                                let base = base158
                                                                    .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l141 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l141 {
                                                                        0 => {
                                                                            let l142 = *base.add(8).cast::<*mut u8>();
                                                                            let l143 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base144 = l142;
                                                                            let len144 = l143;
                                                                            _rt::cabi_dealloc(base144, len144 * 4, 4);
                                                                        }
                                                                        1 => {}
                                                                        2 => {}
                                                                        3 => {
                                                                            let l145 = *base.add(8).cast::<*mut u8>();
                                                                            let l146 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base147 = l145;
                                                                            let len147 = l146;
                                                                            _rt::cabi_dealloc(base147, len147 * 1, 1);
                                                                        }
                                                                        4 => {
                                                                            let l148 = *base.add(8).cast::<*mut u8>();
                                                                            let l149 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base150 = l148;
                                                                            let len150 = l149;
                                                                            _rt::cabi_dealloc(base150, len150 * 4, 4);
                                                                        }
                                                                        5 => {
                                                                            let l151 = *base.add(8).cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base153 = l151;
                                                                            let len153 = l152;
                                                                            _rt::cabi_dealloc(base153, len153 * 4, 4);
                                                                        }
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {
                                                                            let l154 = *base.add(8).cast::<*mut u8>();
                                                                            let l155 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l154, l155, 1);
                                                                        }
                                                                        _ => {
                                                                            let l156 = *base.add(8).cast::<*mut u8>();
                                                                            let l157 = *base
                                                                                .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l156, l157, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base158,
                                                                len158 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l159 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l159 {
                                                                0 => {
                                                                    let l160 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l161 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l160, l161, 1);
                                                                }
                                                                _ => {
                                                                    let l162 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l163 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l162, l163, 1);
                                                                    let l164 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l164 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l165 = *base
                                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l166 = *base
                                                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l165, l166, 1);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l167 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l167 {
                                                                0 => {
                                                                    let l168 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l169 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l168, l169, 1);
                                                                }
                                                                _ => {
                                                                    let l170 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l171 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base172 = l170;
                                                                    let len172 = l171;
                                                                    _rt::cabi_dealloc(base172, len172 * 1, 1);
                                                                    let l173 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l174 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l173, l174, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base175,
                                                len175 * (9 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_get_definition_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_definition(
                        unsafe { AgentBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let super::super::super::super::golem::agent::common::AgentType {
                        type_name: type_name2,
                        description: description2,
                        constructor: constructor2,
                        methods: methods2,
                        dependencies: dependencies2,
                    } = result0;
                    let vec3 = (type_name2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (description2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr1
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr4.cast_mut();
                    let super::super::super::super::golem::agent::common::AgentConstructor {
                        name: name5,
                        description: description5,
                        prompt_hint: prompt_hint5,
                        input_schema: input_schema5,
                    } = constructor2;
                    match name5 {
                        Some(e) => {
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr1
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr1
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec7 = (description5.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr1.add(8 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
                    *ptr1
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr7.cast_mut();
                    match prompt_hint5 {
                        Some(e) => {
                            *ptr1
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1
                                .add(11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr1
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr1
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    use super::super::super::super::golem::agent::common::DataSchema as V69;
                    match input_schema5 {
                        V69::Tuple(e) => {
                            *ptr1
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                            let vec38 = e;
                            let len38 = vec38.len();
                            let layout38 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec38.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result38 = if layout38.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout38).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout38);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec38.into_iter().enumerate() {
                                let base = result38
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t9_0, t9_1) = e;
                                    let vec10 = (t9_0.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                    use super::super::super::super::golem::agent::common::ElementSchema as V37;
                                    match t9_1 {
                                        V37::ComponentModel(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::golem::rpc::types::WitType {
                                                nodes: nodes11,
                                            } = e;
                                            let vec28 = nodes11;
                                            let len28 = vec28.len();
                                            let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec28.len()
                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result28 = if layout28.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout28);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec28.into_iter().enumerate() {
                                                let base = result28
                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                        name: name12,
                                                        type_: type_12,
                                                    } = e;
                                                    match name12 {
                                                        Some(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            let vec13 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                                            let len13 = vec13.len();
                                                            ::core::mem::forget(vec13);
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len13;
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr13.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V27;
                                                    match type_12 {
                                                        V27::RecordType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec16 = e;
                                                            let len16 = vec16.len();
                                                            let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec16.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result16 = if layout16.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout16);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec16.into_iter().enumerate() {
                                                                let base = result16
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t14_0, t14_1) = e;
                                                                    let vec15 = (t14_0.into_bytes()).into_boxed_slice();
                                                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                                                    let len15 = vec15.len();
                                                                    ::core::mem::forget(vec15);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len15;
                                                                    *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(t14_1);
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len16;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result16;
                                                        }
                                                        V27::VariantType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec19 = e;
                                                            let len19 = vec19.len();
                                                            let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec19.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result19 = if layout19.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout19);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec19.into_iter().enumerate() {
                                                                let base = result19
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t17_0, t17_1) = e;
                                                                    let vec18 = (t17_0.into_bytes()).into_boxed_slice();
                                                                    let ptr18 = vec18.as_ptr().cast::<u8>();
                                                                    let len18 = vec18.len();
                                                                    ::core::mem::forget(vec18);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len18;
                                                                    *base.add(0).cast::<*mut u8>() = ptr18.cast_mut();
                                                                    match t17_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len19;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result19;
                                                        }
                                                        V27::EnumType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let vec21 = e;
                                                            let len21 = vec21.len();
                                                            let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec21.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result21 = if layout21.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout21);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec21.into_iter().enumerate() {
                                                                let base = result21
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec20 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                                                    let len20 = vec20.len();
                                                                    ::core::mem::forget(vec20);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len20;
                                                                    *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len21;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result21;
                                                        }
                                                        V27::FlagsType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            let vec23 = e;
                                                            let len23 = vec23.len();
                                                            let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec23.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result23 = if layout23.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout23);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec23.into_iter().enumerate() {
                                                                let base = result23
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec22 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr22 = vec22.as_ptr().cast::<u8>();
                                                                    let len22 = vec22.len();
                                                                    ::core::mem::forget(vec22);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len22;
                                                                    *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len23;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result23;
                                                        }
                                                        V27::TupleType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec24 = (e).into_boxed_slice();
                                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                                            let len24 = vec24.len();
                                                            ::core::mem::forget(vec24);
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len24;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr24.cast_mut();
                                                        }
                                                        V27::ListType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V27::OptionType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V27::ResultType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let (t25_0, t25_1) = e;
                                                            match t25_0 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match t25_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V27::PrimU8Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                        }
                                                        V27::PrimU16Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                        }
                                                        V27::PrimU32Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (10i32) as u8;
                                                        }
                                                        V27::PrimU64Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (11i32) as u8;
                                                        }
                                                        V27::PrimS8Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (12i32) as u8;
                                                        }
                                                        V27::PrimS16Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (13i32) as u8;
                                                        }
                                                        V27::PrimS32Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (14i32) as u8;
                                                        }
                                                        V27::PrimS64Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (15i32) as u8;
                                                        }
                                                        V27::PrimF32Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (16i32) as u8;
                                                        }
                                                        V27::PrimF64Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (17i32) as u8;
                                                        }
                                                        V27::PrimCharType => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (18i32) as u8;
                                                        }
                                                        V27::PrimBoolType => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (19i32) as u8;
                                                        }
                                                        V27::PrimStringType => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (20i32) as u8;
                                                        }
                                                        V27::HandleType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (21i32) as u8;
                                                            let (t26_0, t26_1) = e;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(t26_0);
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (t26_1.clone() as i32) as u8;
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len28;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result28;
                                        }
                                        V37::UnstructuredText(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                restrictions: restrictions29,
                                            } = e;
                                            match restrictions29 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec32 = e;
                                                    let len32 = vec32.len();
                                                    let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec32.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result32 = if layout32.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout32);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec32.into_iter().enumerate() {
                                                        let base = result32
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                language_code: language_code30,
                                                            } = e;
                                                            let vec31 = (language_code30.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                            let len31 = vec31.len();
                                                            ::core::mem::forget(vec31);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len31;
                                                            *base.add(0).cast::<*mut u8>() = ptr31.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len32;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result32;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V37::UnstructuredBinary(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                restrictions: restrictions33,
                                            } = e;
                                            match restrictions33 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec36 = e;
                                                    let len36 = vec36.len();
                                                    let layout36 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec36.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result36 = if layout36.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout36).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout36);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec36.into_iter().enumerate() {
                                                        let base = result36
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type34,
                                                            } = e;
                                                            let vec35 = (mime_type34.into_bytes()).into_boxed_slice();
                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                            let len35 = vec35.len();
                                                            ::core::mem::forget(vec35);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len35;
                                                            *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len36;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result36;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr1
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len38;
                            *ptr1
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result38;
                        }
                        V69::Multimodal(e) => {
                            *ptr1
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec68 = e;
                            let len68 = vec68.len();
                            let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec68.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result68 = if layout68.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout68);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec68.into_iter().enumerate() {
                                let base = result68
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t39_0, t39_1) = e;
                                    let vec40 = (t39_0.into_bytes()).into_boxed_slice();
                                    let ptr40 = vec40.as_ptr().cast::<u8>();
                                    let len40 = vec40.len();
                                    ::core::mem::forget(vec40);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len40;
                                    *base.add(0).cast::<*mut u8>() = ptr40.cast_mut();
                                    use super::super::super::super::golem::agent::common::ElementSchema as V67;
                                    match t39_1 {
                                        V67::ComponentModel(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::golem::rpc::types::WitType {
                                                nodes: nodes41,
                                            } = e;
                                            let vec58 = nodes41;
                                            let len58 = vec58.len();
                                            let layout58 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec58.len()
                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result58 = if layout58.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout58).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout58);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec58.into_iter().enumerate() {
                                                let base = result58
                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                        name: name42,
                                                        type_: type_42,
                                                    } = e;
                                                    match name42 {
                                                        Some(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            let vec43 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr43 = vec43.as_ptr().cast::<u8>();
                                                            let len43 = vec43.len();
                                                            ::core::mem::forget(vec43);
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len43;
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr43.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V57;
                                                    match type_42 {
                                                        V57::RecordType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec46 = e;
                                                            let len46 = vec46.len();
                                                            let layout46 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec46.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result46 = if layout46.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout46).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout46);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec46.into_iter().enumerate() {
                                                                let base = result46
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t44_0, t44_1) = e;
                                                                    let vec45 = (t44_0.into_bytes()).into_boxed_slice();
                                                                    let ptr45 = vec45.as_ptr().cast::<u8>();
                                                                    let len45 = vec45.len();
                                                                    ::core::mem::forget(vec45);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len45;
                                                                    *base.add(0).cast::<*mut u8>() = ptr45.cast_mut();
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(t44_1);
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len46;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result46;
                                                        }
                                                        V57::VariantType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec49 = e;
                                                            let len49 = vec49.len();
                                                            let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec49.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result49 = if layout49.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout49);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec49.into_iter().enumerate() {
                                                                let base = result49
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t47_0, t47_1) = e;
                                                                    let vec48 = (t47_0.into_bytes()).into_boxed_slice();
                                                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                                                    let len48 = vec48.len();
                                                                    ::core::mem::forget(vec48);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len48;
                                                                    *base.add(0).cast::<*mut u8>() = ptr48.cast_mut();
                                                                    match t47_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len49;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result49;
                                                        }
                                                        V57::EnumType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let vec51 = e;
                                                            let len51 = vec51.len();
                                                            let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec51.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result51 = if layout51.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout51);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec51.into_iter().enumerate() {
                                                                let base = result51
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec50 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                    let len50 = vec50.len();
                                                                    ::core::mem::forget(vec50);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len50;
                                                                    *base.add(0).cast::<*mut u8>() = ptr50.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len51;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result51;
                                                        }
                                                        V57::FlagsType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            let vec53 = e;
                                                            let len53 = vec53.len();
                                                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec53.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result53 = if layout53.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout53);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec53.into_iter().enumerate() {
                                                                let base = result53
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                    let len52 = vec52.len();
                                                                    ::core::mem::forget(vec52);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len52;
                                                                    *base.add(0).cast::<*mut u8>() = ptr52.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len53;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result53;
                                                        }
                                                        V57::TupleType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec54 = (e).into_boxed_slice();
                                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                                            let len54 = vec54.len();
                                                            ::core::mem::forget(vec54);
                                                            *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len54;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr54.cast_mut();
                                                        }
                                                        V57::ListType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V57::OptionType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V57::ResultType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let (t55_0, t55_1) = e;
                                                            match t55_0 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match t55_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V57::PrimU8Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                        }
                                                        V57::PrimU16Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                        }
                                                        V57::PrimU32Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (10i32) as u8;
                                                        }
                                                        V57::PrimU64Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (11i32) as u8;
                                                        }
                                                        V57::PrimS8Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (12i32) as u8;
                                                        }
                                                        V57::PrimS16Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (13i32) as u8;
                                                        }
                                                        V57::PrimS32Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (14i32) as u8;
                                                        }
                                                        V57::PrimS64Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (15i32) as u8;
                                                        }
                                                        V57::PrimF32Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (16i32) as u8;
                                                        }
                                                        V57::PrimF64Type => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (17i32) as u8;
                                                        }
                                                        V57::PrimCharType => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (18i32) as u8;
                                                        }
                                                        V57::PrimBoolType => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (19i32) as u8;
                                                        }
                                                        V57::PrimStringType => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (20i32) as u8;
                                                        }
                                                        V57::HandleType(e) => {
                                                            *base
                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (21i32) as u8;
                                                            let (t56_0, t56_1) = e;
                                                            *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(t56_0);
                                                            *base
                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (t56_1.clone() as i32) as u8;
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len58;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result58;
                                        }
                                        V67::UnstructuredText(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                restrictions: restrictions59,
                                            } = e;
                                            match restrictions59 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec62 = e;
                                                    let len62 = vec62.len();
                                                    let layout62 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec62.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result62 = if layout62.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout62).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout62);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec62.into_iter().enumerate() {
                                                        let base = result62
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                language_code: language_code60,
                                                            } = e;
                                                            let vec61 = (language_code60.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr61 = vec61.as_ptr().cast::<u8>();
                                                            let len61 = vec61.len();
                                                            ::core::mem::forget(vec61);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len61;
                                                            *base.add(0).cast::<*mut u8>() = ptr61.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len62;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result62;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V67::UnstructuredBinary(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                restrictions: restrictions63,
                                            } = e;
                                            match restrictions63 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec66 = e;
                                                    let len66 = vec66.len();
                                                    let layout66 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec66.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result66 = if layout66.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout66).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout66);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec66.into_iter().enumerate() {
                                                        let base = result66
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type64,
                                                            } = e;
                                                            let vec65 = (mime_type64.into_bytes()).into_boxed_slice();
                                                            let ptr65 = vec65.as_ptr().cast::<u8>();
                                                            let len65 = vec65.len();
                                                            ::core::mem::forget(vec65);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len65;
                                                            *base.add(0).cast::<*mut u8>() = ptr65.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len66;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result66;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr1
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len68;
                            *ptr1
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result68;
                        }
                    }
                    let vec196 = methods2;
                    let len196 = vec196.len();
                    let layout196 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec196.len() * (13 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result196 = if layout196.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout196).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout196);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec196.into_iter().enumerate() {
                        let base = result196
                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::golem::agent::common::AgentMethod {
                                name: name70,
                                description: description70,
                                prompt_hint: prompt_hint70,
                                input_schema: input_schema70,
                                output_schema: output_schema70,
                            } = e;
                            let vec71 = (name70.into_bytes()).into_boxed_slice();
                            let ptr71 = vec71.as_ptr().cast::<u8>();
                            let len71 = vec71.len();
                            ::core::mem::forget(vec71);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len71;
                            *base.add(0).cast::<*mut u8>() = ptr71.cast_mut();
                            let vec72 = (description70.into_bytes()).into_boxed_slice();
                            let ptr72 = vec72.as_ptr().cast::<u8>();
                            let len72 = vec72.len();
                            ::core::mem::forget(vec72);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len72;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr72.cast_mut();
                            match prompt_hint70 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec73 = (e.into_bytes()).into_boxed_slice();
                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                    let len73 = vec73.len();
                                    ::core::mem::forget(vec73);
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len73;
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr73.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            use super::super::super::super::golem::agent::common::DataSchema as V134;
                            match input_schema70 {
                                V134::Tuple(e) => {
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec103 = e;
                                    let len103 = vec103.len();
                                    let layout103 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec103.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result103 = if layout103.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout103).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout103);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec103.into_iter().enumerate() {
                                        let base = result103
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t74_0, t74_1) = e;
                                            let vec75 = (t74_0.into_bytes()).into_boxed_slice();
                                            let ptr75 = vec75.as_ptr().cast::<u8>();
                                            let len75 = vec75.len();
                                            ::core::mem::forget(vec75);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len75;
                                            *base.add(0).cast::<*mut u8>() = ptr75.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V102;
                                            match t74_1 {
                                                V102::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes76,
                                                    } = e;
                                                    let vec93 = nodes76;
                                                    let len93 = vec93.len();
                                                    let layout93 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec93.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result93 = if layout93.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout93).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout93);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec93.into_iter().enumerate() {
                                                        let base = result93
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name77,
                                                                type_: type_77,
                                                            } = e;
                                                            match name77 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec78 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr78 = vec78.as_ptr().cast::<u8>();
                                                                    let len78 = vec78.len();
                                                                    ::core::mem::forget(vec78);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len78;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr78.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V92;
                                                            match type_77 {
                                                                V92::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec81 = e;
                                                                    let len81 = vec81.len();
                                                                    let layout81 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec81.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result81 = if layout81.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout81).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout81);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec81.into_iter().enumerate() {
                                                                        let base = result81
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t79_0, t79_1) = e;
                                                                            let vec80 = (t79_0.into_bytes()).into_boxed_slice();
                                                                            let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                            let len80 = vec80.len();
                                                                            ::core::mem::forget(vec80);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len80;
                                                                            *base.add(0).cast::<*mut u8>() = ptr80.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t79_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len81;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result81;
                                                                }
                                                                V92::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec84 = e;
                                                                    let len84 = vec84.len();
                                                                    let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec84.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result84 = if layout84.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout84);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec84.into_iter().enumerate() {
                                                                        let base = result84
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t82_0, t82_1) = e;
                                                                            let vec83 = (t82_0.into_bytes()).into_boxed_slice();
                                                                            let ptr83 = vec83.as_ptr().cast::<u8>();
                                                                            let len83 = vec83.len();
                                                                            ::core::mem::forget(vec83);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len83;
                                                                            *base.add(0).cast::<*mut u8>() = ptr83.cast_mut();
                                                                            match t82_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len84;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result84;
                                                                }
                                                                V92::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec86 = e;
                                                                    let len86 = vec86.len();
                                                                    let layout86 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec86.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result86 = if layout86.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout86).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout86);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec86.into_iter().enumerate() {
                                                                        let base = result86
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec85 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr85 = vec85.as_ptr().cast::<u8>();
                                                                            let len85 = vec85.len();
                                                                            ::core::mem::forget(vec85);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len85;
                                                                            *base.add(0).cast::<*mut u8>() = ptr85.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len86;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result86;
                                                                }
                                                                V92::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec88 = e;
                                                                    let len88 = vec88.len();
                                                                    let layout88 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec88.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result88 = if layout88.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout88).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout88);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec88.into_iter().enumerate() {
                                                                        let base = result88
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec87 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr87 = vec87.as_ptr().cast::<u8>();
                                                                            let len87 = vec87.len();
                                                                            ::core::mem::forget(vec87);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len87;
                                                                            *base.add(0).cast::<*mut u8>() = ptr87.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len88;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result88;
                                                                }
                                                                V92::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec89 = (e).into_boxed_slice();
                                                                    let ptr89 = vec89.as_ptr().cast::<u8>();
                                                                    let len89 = vec89.len();
                                                                    ::core::mem::forget(vec89);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len89;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr89.cast_mut();
                                                                }
                                                                V92::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V92::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V92::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t90_0, t90_1) = e;
                                                                    match t90_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t90_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V92::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V92::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V92::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V92::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V92::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V92::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V92::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V92::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V92::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V92::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V92::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V92::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V92::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V92::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t91_0, t91_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t91_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t91_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len93;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result93;
                                                }
                                                V102::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions94,
                                                    } = e;
                                                    match restrictions94 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec97 = e;
                                                            let len97 = vec97.len();
                                                            let layout97 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec97.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result97 = if layout97.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout97).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout97);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec97.into_iter().enumerate() {
                                                                let base = result97
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code95,
                                                                    } = e;
                                                                    let vec96 = (language_code95.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr96 = vec96.as_ptr().cast::<u8>();
                                                                    let len96 = vec96.len();
                                                                    ::core::mem::forget(vec96);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len96;
                                                                    *base.add(0).cast::<*mut u8>() = ptr96.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len97;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result97;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V102::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions98,
                                                    } = e;
                                                    match restrictions98 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec101 = e;
                                                            let len101 = vec101.len();
                                                            let layout101 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec101.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result101 = if layout101.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout101).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout101);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec101.into_iter().enumerate() {
                                                                let base = result101
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type99,
                                                                    } = e;
                                                                    let vec100 = (mime_type99.into_bytes()).into_boxed_slice();
                                                                    let ptr100 = vec100.as_ptr().cast::<u8>();
                                                                    let len100 = vec100.len();
                                                                    ::core::mem::forget(vec100);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len100;
                                                                    *base.add(0).cast::<*mut u8>() = ptr100.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len101;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result101;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len103;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result103;
                                }
                                V134::Multimodal(e) => {
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec133 = e;
                                    let len133 = vec133.len();
                                    let layout133 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec133.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result133 = if layout133.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout133).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout133);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec133.into_iter().enumerate() {
                                        let base = result133
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t104_0, t104_1) = e;
                                            let vec105 = (t104_0.into_bytes()).into_boxed_slice();
                                            let ptr105 = vec105.as_ptr().cast::<u8>();
                                            let len105 = vec105.len();
                                            ::core::mem::forget(vec105);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len105;
                                            *base.add(0).cast::<*mut u8>() = ptr105.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V132;
                                            match t104_1 {
                                                V132::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes106,
                                                    } = e;
                                                    let vec123 = nodes106;
                                                    let len123 = vec123.len();
                                                    let layout123 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec123.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result123 = if layout123.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout123).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout123);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec123.into_iter().enumerate() {
                                                        let base = result123
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name107,
                                                                type_: type_107,
                                                            } = e;
                                                            match name107 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec108 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr108 = vec108.as_ptr().cast::<u8>();
                                                                    let len108 = vec108.len();
                                                                    ::core::mem::forget(vec108);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len108;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr108.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V122;
                                                            match type_107 {
                                                                V122::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec111 = e;
                                                                    let len111 = vec111.len();
                                                                    let layout111 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec111.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result111 = if layout111.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout111).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout111);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec111.into_iter().enumerate() {
                                                                        let base = result111
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t109_0, t109_1) = e;
                                                                            let vec110 = (t109_0.into_bytes()).into_boxed_slice();
                                                                            let ptr110 = vec110.as_ptr().cast::<u8>();
                                                                            let len110 = vec110.len();
                                                                            ::core::mem::forget(vec110);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len110;
                                                                            *base.add(0).cast::<*mut u8>() = ptr110.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t109_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len111;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result111;
                                                                }
                                                                V122::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec114 = e;
                                                                    let len114 = vec114.len();
                                                                    let layout114 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec114.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result114 = if layout114.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout114).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout114);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec114.into_iter().enumerate() {
                                                                        let base = result114
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t112_0, t112_1) = e;
                                                                            let vec113 = (t112_0.into_bytes()).into_boxed_slice();
                                                                            let ptr113 = vec113.as_ptr().cast::<u8>();
                                                                            let len113 = vec113.len();
                                                                            ::core::mem::forget(vec113);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len113;
                                                                            *base.add(0).cast::<*mut u8>() = ptr113.cast_mut();
                                                                            match t112_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len114;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result114;
                                                                }
                                                                V122::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec116 = e;
                                                                    let len116 = vec116.len();
                                                                    let layout116 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec116.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result116 = if layout116.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout116).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout116);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec116.into_iter().enumerate() {
                                                                        let base = result116
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec115 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr115 = vec115.as_ptr().cast::<u8>();
                                                                            let len115 = vec115.len();
                                                                            ::core::mem::forget(vec115);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len115;
                                                                            *base.add(0).cast::<*mut u8>() = ptr115.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len116;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result116;
                                                                }
                                                                V122::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec118 = e;
                                                                    let len118 = vec118.len();
                                                                    let layout118 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec118.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result118 = if layout118.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout118).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout118);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec118.into_iter().enumerate() {
                                                                        let base = result118
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec117 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr117 = vec117.as_ptr().cast::<u8>();
                                                                            let len117 = vec117.len();
                                                                            ::core::mem::forget(vec117);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len117;
                                                                            *base.add(0).cast::<*mut u8>() = ptr117.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len118;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result118;
                                                                }
                                                                V122::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec119 = (e).into_boxed_slice();
                                                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                                                    let len119 = vec119.len();
                                                                    ::core::mem::forget(vec119);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len119;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr119.cast_mut();
                                                                }
                                                                V122::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V122::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V122::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t120_0, t120_1) = e;
                                                                    match t120_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t120_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V122::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V122::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V122::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V122::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V122::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V122::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V122::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V122::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V122::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V122::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V122::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V122::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V122::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V122::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t121_0, t121_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t121_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t121_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len123;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result123;
                                                }
                                                V132::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions124,
                                                    } = e;
                                                    match restrictions124 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec127 = e;
                                                            let len127 = vec127.len();
                                                            let layout127 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec127.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result127 = if layout127.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout127).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout127);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec127.into_iter().enumerate() {
                                                                let base = result127
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code125,
                                                                    } = e;
                                                                    let vec126 = (language_code125.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr126 = vec126.as_ptr().cast::<u8>();
                                                                    let len126 = vec126.len();
                                                                    ::core::mem::forget(vec126);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len126;
                                                                    *base.add(0).cast::<*mut u8>() = ptr126.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len127;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result127;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V132::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions128,
                                                    } = e;
                                                    match restrictions128 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec131 = e;
                                                            let len131 = vec131.len();
                                                            let layout131 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec131.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result131 = if layout131.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout131).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout131);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec131.into_iter().enumerate() {
                                                                let base = result131
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type129,
                                                                    } = e;
                                                                    let vec130 = (mime_type129.into_bytes()).into_boxed_slice();
                                                                    let ptr130 = vec130.as_ptr().cast::<u8>();
                                                                    let len130 = vec130.len();
                                                                    ::core::mem::forget(vec130);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len130;
                                                                    *base.add(0).cast::<*mut u8>() = ptr130.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len131;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result131;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len133;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result133;
                                }
                            }
                            use super::super::super::super::golem::agent::common::DataSchema as V195;
                            match output_schema70 {
                                V195::Tuple(e) => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec164 = e;
                                    let len164 = vec164.len();
                                    let layout164 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec164.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result164 = if layout164.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout164).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout164);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec164.into_iter().enumerate() {
                                        let base = result164
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t135_0, t135_1) = e;
                                            let vec136 = (t135_0.into_bytes()).into_boxed_slice();
                                            let ptr136 = vec136.as_ptr().cast::<u8>();
                                            let len136 = vec136.len();
                                            ::core::mem::forget(vec136);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len136;
                                            *base.add(0).cast::<*mut u8>() = ptr136.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V163;
                                            match t135_1 {
                                                V163::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes137,
                                                    } = e;
                                                    let vec154 = nodes137;
                                                    let len154 = vec154.len();
                                                    let layout154 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec154.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result154 = if layout154.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout154).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout154);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec154.into_iter().enumerate() {
                                                        let base = result154
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name138,
                                                                type_: type_138,
                                                            } = e;
                                                            match name138 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec139 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr139 = vec139.as_ptr().cast::<u8>();
                                                                    let len139 = vec139.len();
                                                                    ::core::mem::forget(vec139);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len139;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr139.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V153;
                                                            match type_138 {
                                                                V153::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec142 = e;
                                                                    let len142 = vec142.len();
                                                                    let layout142 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec142.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result142 = if layout142.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout142).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout142);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec142.into_iter().enumerate() {
                                                                        let base = result142
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t140_0, t140_1) = e;
                                                                            let vec141 = (t140_0.into_bytes()).into_boxed_slice();
                                                                            let ptr141 = vec141.as_ptr().cast::<u8>();
                                                                            let len141 = vec141.len();
                                                                            ::core::mem::forget(vec141);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len141;
                                                                            *base.add(0).cast::<*mut u8>() = ptr141.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t140_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len142;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result142;
                                                                }
                                                                V153::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec145 = e;
                                                                    let len145 = vec145.len();
                                                                    let layout145 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec145.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result145 = if layout145.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout145).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout145);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec145.into_iter().enumerate() {
                                                                        let base = result145
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t143_0, t143_1) = e;
                                                                            let vec144 = (t143_0.into_bytes()).into_boxed_slice();
                                                                            let ptr144 = vec144.as_ptr().cast::<u8>();
                                                                            let len144 = vec144.len();
                                                                            ::core::mem::forget(vec144);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len144;
                                                                            *base.add(0).cast::<*mut u8>() = ptr144.cast_mut();
                                                                            match t143_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len145;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result145;
                                                                }
                                                                V153::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec147 = e;
                                                                    let len147 = vec147.len();
                                                                    let layout147 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec147.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result147 = if layout147.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout147).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout147);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec147.into_iter().enumerate() {
                                                                        let base = result147
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec146 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr146 = vec146.as_ptr().cast::<u8>();
                                                                            let len146 = vec146.len();
                                                                            ::core::mem::forget(vec146);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len146;
                                                                            *base.add(0).cast::<*mut u8>() = ptr146.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len147;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result147;
                                                                }
                                                                V153::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec149 = e;
                                                                    let len149 = vec149.len();
                                                                    let layout149 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec149.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result149 = if layout149.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout149).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout149);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec149.into_iter().enumerate() {
                                                                        let base = result149
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec148 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr148 = vec148.as_ptr().cast::<u8>();
                                                                            let len148 = vec148.len();
                                                                            ::core::mem::forget(vec148);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len148;
                                                                            *base.add(0).cast::<*mut u8>() = ptr148.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len149;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result149;
                                                                }
                                                                V153::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec150 = (e).into_boxed_slice();
                                                                    let ptr150 = vec150.as_ptr().cast::<u8>();
                                                                    let len150 = vec150.len();
                                                                    ::core::mem::forget(vec150);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len150;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr150.cast_mut();
                                                                }
                                                                V153::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V153::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V153::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t151_0, t151_1) = e;
                                                                    match t151_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t151_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V153::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V153::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V153::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V153::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V153::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V153::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V153::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V153::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V153::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V153::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V153::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V153::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V153::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V153::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t152_0, t152_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t152_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t152_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len154;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result154;
                                                }
                                                V163::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions155,
                                                    } = e;
                                                    match restrictions155 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec158 = e;
                                                            let len158 = vec158.len();
                                                            let layout158 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec158.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result158 = if layout158.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout158).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout158);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec158.into_iter().enumerate() {
                                                                let base = result158
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code156,
                                                                    } = e;
                                                                    let vec157 = (language_code156.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr157 = vec157.as_ptr().cast::<u8>();
                                                                    let len157 = vec157.len();
                                                                    ::core::mem::forget(vec157);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len157;
                                                                    *base.add(0).cast::<*mut u8>() = ptr157.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len158;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result158;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V163::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions159,
                                                    } = e;
                                                    match restrictions159 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec162 = e;
                                                            let len162 = vec162.len();
                                                            let layout162 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec162.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result162 = if layout162.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout162).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout162);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec162.into_iter().enumerate() {
                                                                let base = result162
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type160,
                                                                    } = e;
                                                                    let vec161 = (mime_type160.into_bytes()).into_boxed_slice();
                                                                    let ptr161 = vec161.as_ptr().cast::<u8>();
                                                                    let len161 = vec161.len();
                                                                    ::core::mem::forget(vec161);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len161;
                                                                    *base.add(0).cast::<*mut u8>() = ptr161.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len162;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result162;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len164;
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result164;
                                }
                                V195::Multimodal(e) => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec194 = e;
                                    let len194 = vec194.len();
                                    let layout194 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec194.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result194 = if layout194.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout194).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout194);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec194.into_iter().enumerate() {
                                        let base = result194
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t165_0, t165_1) = e;
                                            let vec166 = (t165_0.into_bytes()).into_boxed_slice();
                                            let ptr166 = vec166.as_ptr().cast::<u8>();
                                            let len166 = vec166.len();
                                            ::core::mem::forget(vec166);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len166;
                                            *base.add(0).cast::<*mut u8>() = ptr166.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V193;
                                            match t165_1 {
                                                V193::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes167,
                                                    } = e;
                                                    let vec184 = nodes167;
                                                    let len184 = vec184.len();
                                                    let layout184 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec184.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result184 = if layout184.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout184).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout184);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec184.into_iter().enumerate() {
                                                        let base = result184
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name168,
                                                                type_: type_168,
                                                            } = e;
                                                            match name168 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec169 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr169 = vec169.as_ptr().cast::<u8>();
                                                                    let len169 = vec169.len();
                                                                    ::core::mem::forget(vec169);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len169;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr169.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V183;
                                                            match type_168 {
                                                                V183::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec172 = e;
                                                                    let len172 = vec172.len();
                                                                    let layout172 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec172.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result172 = if layout172.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout172).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout172);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec172.into_iter().enumerate() {
                                                                        let base = result172
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t170_0, t170_1) = e;
                                                                            let vec171 = (t170_0.into_bytes()).into_boxed_slice();
                                                                            let ptr171 = vec171.as_ptr().cast::<u8>();
                                                                            let len171 = vec171.len();
                                                                            ::core::mem::forget(vec171);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len171;
                                                                            *base.add(0).cast::<*mut u8>() = ptr171.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t170_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len172;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result172;
                                                                }
                                                                V183::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec175 = e;
                                                                    let len175 = vec175.len();
                                                                    let layout175 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec175.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result175 = if layout175.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout175).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout175);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec175.into_iter().enumerate() {
                                                                        let base = result175
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t173_0, t173_1) = e;
                                                                            let vec174 = (t173_0.into_bytes()).into_boxed_slice();
                                                                            let ptr174 = vec174.as_ptr().cast::<u8>();
                                                                            let len174 = vec174.len();
                                                                            ::core::mem::forget(vec174);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len174;
                                                                            *base.add(0).cast::<*mut u8>() = ptr174.cast_mut();
                                                                            match t173_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len175;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result175;
                                                                }
                                                                V183::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec177 = e;
                                                                    let len177 = vec177.len();
                                                                    let layout177 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec177.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result177 = if layout177.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout177).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout177);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec177.into_iter().enumerate() {
                                                                        let base = result177
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec176 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr176 = vec176.as_ptr().cast::<u8>();
                                                                            let len176 = vec176.len();
                                                                            ::core::mem::forget(vec176);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len176;
                                                                            *base.add(0).cast::<*mut u8>() = ptr176.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len177;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result177;
                                                                }
                                                                V183::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec179 = e;
                                                                    let len179 = vec179.len();
                                                                    let layout179 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec179.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result179 = if layout179.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout179).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout179);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec179.into_iter().enumerate() {
                                                                        let base = result179
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec178 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr178 = vec178.as_ptr().cast::<u8>();
                                                                            let len178 = vec178.len();
                                                                            ::core::mem::forget(vec178);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len178;
                                                                            *base.add(0).cast::<*mut u8>() = ptr178.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len179;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result179;
                                                                }
                                                                V183::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec180 = (e).into_boxed_slice();
                                                                    let ptr180 = vec180.as_ptr().cast::<u8>();
                                                                    let len180 = vec180.len();
                                                                    ::core::mem::forget(vec180);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len180;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr180.cast_mut();
                                                                }
                                                                V183::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V183::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V183::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t181_0, t181_1) = e;
                                                                    match t181_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t181_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V183::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V183::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V183::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V183::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V183::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V183::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V183::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V183::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V183::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V183::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V183::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V183::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V183::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V183::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t182_0, t182_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t182_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t182_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len184;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result184;
                                                }
                                                V193::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions185,
                                                    } = e;
                                                    match restrictions185 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec188 = e;
                                                            let len188 = vec188.len();
                                                            let layout188 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec188.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result188 = if layout188.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout188).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout188);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec188.into_iter().enumerate() {
                                                                let base = result188
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code186,
                                                                    } = e;
                                                                    let vec187 = (language_code186.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr187 = vec187.as_ptr().cast::<u8>();
                                                                    let len187 = vec187.len();
                                                                    ::core::mem::forget(vec187);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len187;
                                                                    *base.add(0).cast::<*mut u8>() = ptr187.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len188;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result188;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V193::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions189,
                                                    } = e;
                                                    match restrictions189 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec192 = e;
                                                            let len192 = vec192.len();
                                                            let layout192 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec192.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result192 = if layout192.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout192).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout192);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec192.into_iter().enumerate() {
                                                                let base = result192
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type190,
                                                                    } = e;
                                                                    let vec191 = (mime_type190.into_bytes()).into_boxed_slice();
                                                                    let ptr191 = vec191.as_ptr().cast::<u8>();
                                                                    let len191 = vec191.len();
                                                                    ::core::mem::forget(vec191);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len191;
                                                                    *base.add(0).cast::<*mut u8>() = ptr191.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len192;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result192;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len194;
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result194;
                                }
                            }
                        }
                    }
                    *ptr1
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len196;
                    *ptr1
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result196;
                    let vec392 = dependencies2;
                    let len392 = vec392.len();
                    let layout392 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec392.len() * (18 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result392 = if layout392.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout392).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout392);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec392.into_iter().enumerate() {
                        let base = result392
                            .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::golem::agent::common::AgentDependency {
                                type_name: type_name197,
                                description: description197,
                                constructor: constructor197,
                                methods: methods197,
                            } = e;
                            let vec198 = (type_name197.into_bytes()).into_boxed_slice();
                            let ptr198 = vec198.as_ptr().cast::<u8>();
                            let len198 = vec198.len();
                            ::core::mem::forget(vec198);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len198;
                            *base.add(0).cast::<*mut u8>() = ptr198.cast_mut();
                            match description197 {
                                Some(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec199 = (e.into_bytes()).into_boxed_slice();
                                    let ptr199 = vec199.as_ptr().cast::<u8>();
                                    let len199 = vec199.len();
                                    ::core::mem::forget(vec199);
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len199;
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr199.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let super::super::super::super::golem::agent::common::AgentConstructor {
                                name: name200,
                                description: description200,
                                prompt_hint: prompt_hint200,
                                input_schema: input_schema200,
                            } = constructor197;
                            match name200 {
                                Some(e) => {
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec201 = (e.into_bytes()).into_boxed_slice();
                                    let ptr201 = vec201.as_ptr().cast::<u8>();
                                    let len201 = vec201.len();
                                    ::core::mem::forget(vec201);
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len201;
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr201.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec202 = (description200.into_bytes())
                                .into_boxed_slice();
                            let ptr202 = vec202.as_ptr().cast::<u8>();
                            let len202 = vec202.len();
                            ::core::mem::forget(vec202);
                            *base
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len202;
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr202.cast_mut();
                            match prompt_hint200 {
                                Some(e) => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec203 = (e.into_bytes()).into_boxed_slice();
                                    let ptr203 = vec203.as_ptr().cast::<u8>();
                                    let len203 = vec203.len();
                                    ::core::mem::forget(vec203);
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len203;
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr203.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            use super::super::super::super::golem::agent::common::DataSchema as V264;
                            match input_schema200 {
                                V264::Tuple(e) => {
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec233 = e;
                                    let len233 = vec233.len();
                                    let layout233 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec233.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result233 = if layout233.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout233).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout233);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec233.into_iter().enumerate() {
                                        let base = result233
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t204_0, t204_1) = e;
                                            let vec205 = (t204_0.into_bytes()).into_boxed_slice();
                                            let ptr205 = vec205.as_ptr().cast::<u8>();
                                            let len205 = vec205.len();
                                            ::core::mem::forget(vec205);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len205;
                                            *base.add(0).cast::<*mut u8>() = ptr205.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V232;
                                            match t204_1 {
                                                V232::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes206,
                                                    } = e;
                                                    let vec223 = nodes206;
                                                    let len223 = vec223.len();
                                                    let layout223 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec223.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result223 = if layout223.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout223).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout223);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec223.into_iter().enumerate() {
                                                        let base = result223
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name207,
                                                                type_: type_207,
                                                            } = e;
                                                            match name207 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec208 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr208 = vec208.as_ptr().cast::<u8>();
                                                                    let len208 = vec208.len();
                                                                    ::core::mem::forget(vec208);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len208;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr208.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V222;
                                                            match type_207 {
                                                                V222::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec211 = e;
                                                                    let len211 = vec211.len();
                                                                    let layout211 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec211.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result211 = if layout211.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout211).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout211);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec211.into_iter().enumerate() {
                                                                        let base = result211
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t209_0, t209_1) = e;
                                                                            let vec210 = (t209_0.into_bytes()).into_boxed_slice();
                                                                            let ptr210 = vec210.as_ptr().cast::<u8>();
                                                                            let len210 = vec210.len();
                                                                            ::core::mem::forget(vec210);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len210;
                                                                            *base.add(0).cast::<*mut u8>() = ptr210.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t209_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len211;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result211;
                                                                }
                                                                V222::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec214 = e;
                                                                    let len214 = vec214.len();
                                                                    let layout214 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec214.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result214 = if layout214.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout214).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout214);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec214.into_iter().enumerate() {
                                                                        let base = result214
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t212_0, t212_1) = e;
                                                                            let vec213 = (t212_0.into_bytes()).into_boxed_slice();
                                                                            let ptr213 = vec213.as_ptr().cast::<u8>();
                                                                            let len213 = vec213.len();
                                                                            ::core::mem::forget(vec213);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len213;
                                                                            *base.add(0).cast::<*mut u8>() = ptr213.cast_mut();
                                                                            match t212_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len214;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result214;
                                                                }
                                                                V222::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec216 = e;
                                                                    let len216 = vec216.len();
                                                                    let layout216 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec216.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result216 = if layout216.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout216).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout216);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec216.into_iter().enumerate() {
                                                                        let base = result216
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec215 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                            let len215 = vec215.len();
                                                                            ::core::mem::forget(vec215);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len215;
                                                                            *base.add(0).cast::<*mut u8>() = ptr215.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len216;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result216;
                                                                }
                                                                V222::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec218 = e;
                                                                    let len218 = vec218.len();
                                                                    let layout218 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec218.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result218 = if layout218.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout218).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout218);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec218.into_iter().enumerate() {
                                                                        let base = result218
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec217 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr217 = vec217.as_ptr().cast::<u8>();
                                                                            let len217 = vec217.len();
                                                                            ::core::mem::forget(vec217);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len217;
                                                                            *base.add(0).cast::<*mut u8>() = ptr217.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len218;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result218;
                                                                }
                                                                V222::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec219 = (e).into_boxed_slice();
                                                                    let ptr219 = vec219.as_ptr().cast::<u8>();
                                                                    let len219 = vec219.len();
                                                                    ::core::mem::forget(vec219);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len219;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr219.cast_mut();
                                                                }
                                                                V222::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V222::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V222::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t220_0, t220_1) = e;
                                                                    match t220_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t220_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V222::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V222::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V222::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V222::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V222::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V222::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V222::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V222::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V222::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V222::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V222::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V222::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V222::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V222::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t221_0, t221_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t221_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t221_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len223;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result223;
                                                }
                                                V232::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions224,
                                                    } = e;
                                                    match restrictions224 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec227 = e;
                                                            let len227 = vec227.len();
                                                            let layout227 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec227.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result227 = if layout227.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout227).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout227);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec227.into_iter().enumerate() {
                                                                let base = result227
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code225,
                                                                    } = e;
                                                                    let vec226 = (language_code225.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr226 = vec226.as_ptr().cast::<u8>();
                                                                    let len226 = vec226.len();
                                                                    ::core::mem::forget(vec226);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len226;
                                                                    *base.add(0).cast::<*mut u8>() = ptr226.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len227;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result227;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V232::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions228,
                                                    } = e;
                                                    match restrictions228 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec231 = e;
                                                            let len231 = vec231.len();
                                                            let layout231 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec231.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result231 = if layout231.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout231).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout231);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec231.into_iter().enumerate() {
                                                                let base = result231
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type229,
                                                                    } = e;
                                                                    let vec230 = (mime_type229.into_bytes()).into_boxed_slice();
                                                                    let ptr230 = vec230.as_ptr().cast::<u8>();
                                                                    let len230 = vec230.len();
                                                                    ::core::mem::forget(vec230);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len230;
                                                                    *base.add(0).cast::<*mut u8>() = ptr230.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len231;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result231;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len233;
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result233;
                                }
                                V264::Multimodal(e) => {
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec263 = e;
                                    let len263 = vec263.len();
                                    let layout263 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec263.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result263 = if layout263.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout263).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout263);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec263.into_iter().enumerate() {
                                        let base = result263
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t234_0, t234_1) = e;
                                            let vec235 = (t234_0.into_bytes()).into_boxed_slice();
                                            let ptr235 = vec235.as_ptr().cast::<u8>();
                                            let len235 = vec235.len();
                                            ::core::mem::forget(vec235);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len235;
                                            *base.add(0).cast::<*mut u8>() = ptr235.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V262;
                                            match t234_1 {
                                                V262::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes236,
                                                    } = e;
                                                    let vec253 = nodes236;
                                                    let len253 = vec253.len();
                                                    let layout253 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec253.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result253 = if layout253.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout253).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout253);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec253.into_iter().enumerate() {
                                                        let base = result253
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name237,
                                                                type_: type_237,
                                                            } = e;
                                                            match name237 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec238 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr238 = vec238.as_ptr().cast::<u8>();
                                                                    let len238 = vec238.len();
                                                                    ::core::mem::forget(vec238);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len238;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr238.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V252;
                                                            match type_237 {
                                                                V252::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec241 = e;
                                                                    let len241 = vec241.len();
                                                                    let layout241 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec241.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result241 = if layout241.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout241).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout241);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec241.into_iter().enumerate() {
                                                                        let base = result241
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t239_0, t239_1) = e;
                                                                            let vec240 = (t239_0.into_bytes()).into_boxed_slice();
                                                                            let ptr240 = vec240.as_ptr().cast::<u8>();
                                                                            let len240 = vec240.len();
                                                                            ::core::mem::forget(vec240);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len240;
                                                                            *base.add(0).cast::<*mut u8>() = ptr240.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t239_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len241;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result241;
                                                                }
                                                                V252::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec244 = e;
                                                                    let len244 = vec244.len();
                                                                    let layout244 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec244.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result244 = if layout244.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout244).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout244);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec244.into_iter().enumerate() {
                                                                        let base = result244
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t242_0, t242_1) = e;
                                                                            let vec243 = (t242_0.into_bytes()).into_boxed_slice();
                                                                            let ptr243 = vec243.as_ptr().cast::<u8>();
                                                                            let len243 = vec243.len();
                                                                            ::core::mem::forget(vec243);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len243;
                                                                            *base.add(0).cast::<*mut u8>() = ptr243.cast_mut();
                                                                            match t242_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len244;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result244;
                                                                }
                                                                V252::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec246 = e;
                                                                    let len246 = vec246.len();
                                                                    let layout246 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec246.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result246 = if layout246.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout246).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout246);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec246.into_iter().enumerate() {
                                                                        let base = result246
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec245 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr245 = vec245.as_ptr().cast::<u8>();
                                                                            let len245 = vec245.len();
                                                                            ::core::mem::forget(vec245);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len245;
                                                                            *base.add(0).cast::<*mut u8>() = ptr245.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len246;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result246;
                                                                }
                                                                V252::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec248 = e;
                                                                    let len248 = vec248.len();
                                                                    let layout248 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec248.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result248 = if layout248.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout248).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout248);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec248.into_iter().enumerate() {
                                                                        let base = result248
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec247 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr247 = vec247.as_ptr().cast::<u8>();
                                                                            let len247 = vec247.len();
                                                                            ::core::mem::forget(vec247);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len247;
                                                                            *base.add(0).cast::<*mut u8>() = ptr247.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len248;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result248;
                                                                }
                                                                V252::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec249 = (e).into_boxed_slice();
                                                                    let ptr249 = vec249.as_ptr().cast::<u8>();
                                                                    let len249 = vec249.len();
                                                                    ::core::mem::forget(vec249);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len249;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr249.cast_mut();
                                                                }
                                                                V252::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V252::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V252::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t250_0, t250_1) = e;
                                                                    match t250_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t250_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V252::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V252::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V252::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V252::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V252::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V252::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V252::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V252::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V252::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V252::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V252::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V252::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V252::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V252::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t251_0, t251_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t251_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t251_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len253;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result253;
                                                }
                                                V262::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions254,
                                                    } = e;
                                                    match restrictions254 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec257 = e;
                                                            let len257 = vec257.len();
                                                            let layout257 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec257.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result257 = if layout257.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout257).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout257);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec257.into_iter().enumerate() {
                                                                let base = result257
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code255,
                                                                    } = e;
                                                                    let vec256 = (language_code255.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr256 = vec256.as_ptr().cast::<u8>();
                                                                    let len256 = vec256.len();
                                                                    ::core::mem::forget(vec256);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len256;
                                                                    *base.add(0).cast::<*mut u8>() = ptr256.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len257;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result257;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V262::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions258,
                                                    } = e;
                                                    match restrictions258 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec261 = e;
                                                            let len261 = vec261.len();
                                                            let layout261 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec261.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result261 = if layout261.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout261).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout261);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec261.into_iter().enumerate() {
                                                                let base = result261
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type259,
                                                                    } = e;
                                                                    let vec260 = (mime_type259.into_bytes()).into_boxed_slice();
                                                                    let ptr260 = vec260.as_ptr().cast::<u8>();
                                                                    let len260 = vec260.len();
                                                                    ::core::mem::forget(vec260);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len260;
                                                                    *base.add(0).cast::<*mut u8>() = ptr260.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len261;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result261;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len263;
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result263;
                                }
                            }
                            let vec391 = methods197;
                            let len391 = vec391.len();
                            let layout391 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec391.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result391 = if layout391.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout391).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout391);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec391.into_iter().enumerate() {
                                let base = result391
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::agent::common::AgentMethod {
                                        name: name265,
                                        description: description265,
                                        prompt_hint: prompt_hint265,
                                        input_schema: input_schema265,
                                        output_schema: output_schema265,
                                    } = e;
                                    let vec266 = (name265.into_bytes()).into_boxed_slice();
                                    let ptr266 = vec266.as_ptr().cast::<u8>();
                                    let len266 = vec266.len();
                                    ::core::mem::forget(vec266);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len266;
                                    *base.add(0).cast::<*mut u8>() = ptr266.cast_mut();
                                    let vec267 = (description265.into_bytes())
                                        .into_boxed_slice();
                                    let ptr267 = vec267.as_ptr().cast::<u8>();
                                    let len267 = vec267.len();
                                    ::core::mem::forget(vec267);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len267;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr267.cast_mut();
                                    match prompt_hint265 {
                                        Some(e) => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec268 = (e.into_bytes()).into_boxed_slice();
                                            let ptr268 = vec268.as_ptr().cast::<u8>();
                                            let len268 = vec268.len();
                                            ::core::mem::forget(vec268);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len268;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr268.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::golem::agent::common::DataSchema as V329;
                                    match input_schema265 {
                                        V329::Tuple(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec298 = e;
                                            let len298 = vec298.len();
                                            let layout298 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec298.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result298 = if layout298.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout298).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout298);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec298.into_iter().enumerate() {
                                                let base = result298
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t269_0, t269_1) = e;
                                                    let vec270 = (t269_0.into_bytes()).into_boxed_slice();
                                                    let ptr270 = vec270.as_ptr().cast::<u8>();
                                                    let len270 = vec270.len();
                                                    ::core::mem::forget(vec270);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len270;
                                                    *base.add(0).cast::<*mut u8>() = ptr270.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V297;
                                                    match t269_1 {
                                                        V297::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes271,
                                                            } = e;
                                                            let vec288 = nodes271;
                                                            let len288 = vec288.len();
                                                            let layout288 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec288.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result288 = if layout288.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout288).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout288);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec288.into_iter().enumerate() {
                                                                let base = result288
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name272,
                                                                        type_: type_272,
                                                                    } = e;
                                                                    match name272 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec273 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr273 = vec273.as_ptr().cast::<u8>();
                                                                            let len273 = vec273.len();
                                                                            ::core::mem::forget(vec273);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len273;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr273.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V287;
                                                                    match type_272 {
                                                                        V287::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec276 = e;
                                                                            let len276 = vec276.len();
                                                                            let layout276 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec276.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result276 = if layout276.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout276).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout276);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec276.into_iter().enumerate() {
                                                                                let base = result276
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t274_0, t274_1) = e;
                                                                                    let vec275 = (t274_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr275 = vec275.as_ptr().cast::<u8>();
                                                                                    let len275 = vec275.len();
                                                                                    ::core::mem::forget(vec275);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len275;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr275.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t274_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len276;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result276;
                                                                        }
                                                                        V287::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec279 = e;
                                                                            let len279 = vec279.len();
                                                                            let layout279 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec279.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result279 = if layout279.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout279).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout279);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec279.into_iter().enumerate() {
                                                                                let base = result279
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t277_0, t277_1) = e;
                                                                                    let vec278 = (t277_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr278 = vec278.as_ptr().cast::<u8>();
                                                                                    let len278 = vec278.len();
                                                                                    ::core::mem::forget(vec278);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len278;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr278.cast_mut();
                                                                                    match t277_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len279;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result279;
                                                                        }
                                                                        V287::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec281 = e;
                                                                            let len281 = vec281.len();
                                                                            let layout281 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec281.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result281 = if layout281.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout281).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout281);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec281.into_iter().enumerate() {
                                                                                let base = result281
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec280 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr280 = vec280.as_ptr().cast::<u8>();
                                                                                    let len280 = vec280.len();
                                                                                    ::core::mem::forget(vec280);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len280;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr280.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len281;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result281;
                                                                        }
                                                                        V287::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec283 = e;
                                                                            let len283 = vec283.len();
                                                                            let layout283 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec283.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result283 = if layout283.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout283).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout283);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec283.into_iter().enumerate() {
                                                                                let base = result283
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec282 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr282 = vec282.as_ptr().cast::<u8>();
                                                                                    let len282 = vec282.len();
                                                                                    ::core::mem::forget(vec282);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len282;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr282.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len283;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result283;
                                                                        }
                                                                        V287::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec284 = (e).into_boxed_slice();
                                                                            let ptr284 = vec284.as_ptr().cast::<u8>();
                                                                            let len284 = vec284.len();
                                                                            ::core::mem::forget(vec284);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len284;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr284.cast_mut();
                                                                        }
                                                                        V287::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V287::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V287::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t285_0, t285_1) = e;
                                                                            match t285_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t285_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V287::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V287::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V287::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V287::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V287::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V287::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V287::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V287::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V287::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V287::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V287::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V287::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V287::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V287::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t286_0, t286_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t286_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t286_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len288;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result288;
                                                        }
                                                        V297::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions289,
                                                            } = e;
                                                            match restrictions289 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec292 = e;
                                                                    let len292 = vec292.len();
                                                                    let layout292 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec292.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result292 = if layout292.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout292).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout292);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec292.into_iter().enumerate() {
                                                                        let base = result292
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code290,
                                                                            } = e;
                                                                            let vec291 = (language_code290.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr291 = vec291.as_ptr().cast::<u8>();
                                                                            let len291 = vec291.len();
                                                                            ::core::mem::forget(vec291);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len291;
                                                                            *base.add(0).cast::<*mut u8>() = ptr291.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len292;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result292;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V297::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions293,
                                                            } = e;
                                                            match restrictions293 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec296 = e;
                                                                    let len296 = vec296.len();
                                                                    let layout296 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec296.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result296 = if layout296.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout296).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout296);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec296.into_iter().enumerate() {
                                                                        let base = result296
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type294,
                                                                            } = e;
                                                                            let vec295 = (mime_type294.into_bytes()).into_boxed_slice();
                                                                            let ptr295 = vec295.as_ptr().cast::<u8>();
                                                                            let len295 = vec295.len();
                                                                            ::core::mem::forget(vec295);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len295;
                                                                            *base.add(0).cast::<*mut u8>() = ptr295.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len296;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result296;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len298;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result298;
                                        }
                                        V329::Multimodal(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec328 = e;
                                            let len328 = vec328.len();
                                            let layout328 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec328.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result328 = if layout328.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout328).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout328);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec328.into_iter().enumerate() {
                                                let base = result328
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t299_0, t299_1) = e;
                                                    let vec300 = (t299_0.into_bytes()).into_boxed_slice();
                                                    let ptr300 = vec300.as_ptr().cast::<u8>();
                                                    let len300 = vec300.len();
                                                    ::core::mem::forget(vec300);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len300;
                                                    *base.add(0).cast::<*mut u8>() = ptr300.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V327;
                                                    match t299_1 {
                                                        V327::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes301,
                                                            } = e;
                                                            let vec318 = nodes301;
                                                            let len318 = vec318.len();
                                                            let layout318 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec318.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result318 = if layout318.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout318).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout318);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec318.into_iter().enumerate() {
                                                                let base = result318
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name302,
                                                                        type_: type_302,
                                                                    } = e;
                                                                    match name302 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec303 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr303 = vec303.as_ptr().cast::<u8>();
                                                                            let len303 = vec303.len();
                                                                            ::core::mem::forget(vec303);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len303;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr303.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V317;
                                                                    match type_302 {
                                                                        V317::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec306 = e;
                                                                            let len306 = vec306.len();
                                                                            let layout306 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec306.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result306 = if layout306.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout306).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout306);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec306.into_iter().enumerate() {
                                                                                let base = result306
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t304_0, t304_1) = e;
                                                                                    let vec305 = (t304_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr305 = vec305.as_ptr().cast::<u8>();
                                                                                    let len305 = vec305.len();
                                                                                    ::core::mem::forget(vec305);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len305;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr305.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t304_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len306;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result306;
                                                                        }
                                                                        V317::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec309 = e;
                                                                            let len309 = vec309.len();
                                                                            let layout309 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec309.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result309 = if layout309.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout309).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout309);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec309.into_iter().enumerate() {
                                                                                let base = result309
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t307_0, t307_1) = e;
                                                                                    let vec308 = (t307_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr308 = vec308.as_ptr().cast::<u8>();
                                                                                    let len308 = vec308.len();
                                                                                    ::core::mem::forget(vec308);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len308;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr308.cast_mut();
                                                                                    match t307_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len309;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result309;
                                                                        }
                                                                        V317::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec311 = e;
                                                                            let len311 = vec311.len();
                                                                            let layout311 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec311.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result311 = if layout311.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout311).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout311);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec311.into_iter().enumerate() {
                                                                                let base = result311
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec310 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr310 = vec310.as_ptr().cast::<u8>();
                                                                                    let len310 = vec310.len();
                                                                                    ::core::mem::forget(vec310);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len310;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr310.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len311;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result311;
                                                                        }
                                                                        V317::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec313 = e;
                                                                            let len313 = vec313.len();
                                                                            let layout313 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec313.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result313 = if layout313.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout313).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout313);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec313.into_iter().enumerate() {
                                                                                let base = result313
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec312 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr312 = vec312.as_ptr().cast::<u8>();
                                                                                    let len312 = vec312.len();
                                                                                    ::core::mem::forget(vec312);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len312;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr312.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len313;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result313;
                                                                        }
                                                                        V317::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec314 = (e).into_boxed_slice();
                                                                            let ptr314 = vec314.as_ptr().cast::<u8>();
                                                                            let len314 = vec314.len();
                                                                            ::core::mem::forget(vec314);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len314;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr314.cast_mut();
                                                                        }
                                                                        V317::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V317::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V317::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t315_0, t315_1) = e;
                                                                            match t315_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t315_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V317::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V317::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V317::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V317::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V317::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V317::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V317::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V317::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V317::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V317::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V317::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V317::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V317::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V317::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t316_0, t316_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t316_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t316_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len318;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result318;
                                                        }
                                                        V327::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions319,
                                                            } = e;
                                                            match restrictions319 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec322 = e;
                                                                    let len322 = vec322.len();
                                                                    let layout322 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec322.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result322 = if layout322.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout322).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout322);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec322.into_iter().enumerate() {
                                                                        let base = result322
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code320,
                                                                            } = e;
                                                                            let vec321 = (language_code320.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr321 = vec321.as_ptr().cast::<u8>();
                                                                            let len321 = vec321.len();
                                                                            ::core::mem::forget(vec321);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len321;
                                                                            *base.add(0).cast::<*mut u8>() = ptr321.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len322;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result322;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V327::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions323,
                                                            } = e;
                                                            match restrictions323 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec326 = e;
                                                                    let len326 = vec326.len();
                                                                    let layout326 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec326.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result326 = if layout326.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout326).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout326);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec326.into_iter().enumerate() {
                                                                        let base = result326
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type324,
                                                                            } = e;
                                                                            let vec325 = (mime_type324.into_bytes()).into_boxed_slice();
                                                                            let ptr325 = vec325.as_ptr().cast::<u8>();
                                                                            let len325 = vec325.len();
                                                                            ::core::mem::forget(vec325);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len325;
                                                                            *base.add(0).cast::<*mut u8>() = ptr325.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len326;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result326;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len328;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result328;
                                        }
                                    }
                                    use super::super::super::super::golem::agent::common::DataSchema as V390;
                                    match output_schema265 {
                                        V390::Tuple(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec359 = e;
                                            let len359 = vec359.len();
                                            let layout359 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec359.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result359 = if layout359.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout359).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout359);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec359.into_iter().enumerate() {
                                                let base = result359
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t330_0, t330_1) = e;
                                                    let vec331 = (t330_0.into_bytes()).into_boxed_slice();
                                                    let ptr331 = vec331.as_ptr().cast::<u8>();
                                                    let len331 = vec331.len();
                                                    ::core::mem::forget(vec331);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len331;
                                                    *base.add(0).cast::<*mut u8>() = ptr331.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V358;
                                                    match t330_1 {
                                                        V358::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes332,
                                                            } = e;
                                                            let vec349 = nodes332;
                                                            let len349 = vec349.len();
                                                            let layout349 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec349.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result349 = if layout349.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout349).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout349);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec349.into_iter().enumerate() {
                                                                let base = result349
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name333,
                                                                        type_: type_333,
                                                                    } = e;
                                                                    match name333 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec334 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr334 = vec334.as_ptr().cast::<u8>();
                                                                            let len334 = vec334.len();
                                                                            ::core::mem::forget(vec334);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len334;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr334.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V348;
                                                                    match type_333 {
                                                                        V348::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec337 = e;
                                                                            let len337 = vec337.len();
                                                                            let layout337 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec337.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result337 = if layout337.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout337).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout337);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec337.into_iter().enumerate() {
                                                                                let base = result337
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t335_0, t335_1) = e;
                                                                                    let vec336 = (t335_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr336 = vec336.as_ptr().cast::<u8>();
                                                                                    let len336 = vec336.len();
                                                                                    ::core::mem::forget(vec336);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len336;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr336.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t335_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len337;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result337;
                                                                        }
                                                                        V348::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec340 = e;
                                                                            let len340 = vec340.len();
                                                                            let layout340 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec340.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result340 = if layout340.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout340).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout340);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec340.into_iter().enumerate() {
                                                                                let base = result340
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t338_0, t338_1) = e;
                                                                                    let vec339 = (t338_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr339 = vec339.as_ptr().cast::<u8>();
                                                                                    let len339 = vec339.len();
                                                                                    ::core::mem::forget(vec339);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len339;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr339.cast_mut();
                                                                                    match t338_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len340;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result340;
                                                                        }
                                                                        V348::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec342 = e;
                                                                            let len342 = vec342.len();
                                                                            let layout342 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec342.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result342 = if layout342.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout342).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout342);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec342.into_iter().enumerate() {
                                                                                let base = result342
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec341 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr341 = vec341.as_ptr().cast::<u8>();
                                                                                    let len341 = vec341.len();
                                                                                    ::core::mem::forget(vec341);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len341;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr341.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len342;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result342;
                                                                        }
                                                                        V348::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec344 = e;
                                                                            let len344 = vec344.len();
                                                                            let layout344 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec344.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result344 = if layout344.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout344).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout344);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec344.into_iter().enumerate() {
                                                                                let base = result344
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec343 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr343 = vec343.as_ptr().cast::<u8>();
                                                                                    let len343 = vec343.len();
                                                                                    ::core::mem::forget(vec343);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len343;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr343.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len344;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result344;
                                                                        }
                                                                        V348::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec345 = (e).into_boxed_slice();
                                                                            let ptr345 = vec345.as_ptr().cast::<u8>();
                                                                            let len345 = vec345.len();
                                                                            ::core::mem::forget(vec345);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len345;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr345.cast_mut();
                                                                        }
                                                                        V348::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V348::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V348::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t346_0, t346_1) = e;
                                                                            match t346_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t346_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V348::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V348::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V348::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V348::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V348::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V348::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V348::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V348::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V348::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V348::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V348::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V348::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V348::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V348::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t347_0, t347_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t347_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t347_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len349;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result349;
                                                        }
                                                        V358::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions350,
                                                            } = e;
                                                            match restrictions350 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec353 = e;
                                                                    let len353 = vec353.len();
                                                                    let layout353 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec353.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result353 = if layout353.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout353).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout353);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec353.into_iter().enumerate() {
                                                                        let base = result353
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code351,
                                                                            } = e;
                                                                            let vec352 = (language_code351.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr352 = vec352.as_ptr().cast::<u8>();
                                                                            let len352 = vec352.len();
                                                                            ::core::mem::forget(vec352);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len352;
                                                                            *base.add(0).cast::<*mut u8>() = ptr352.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len353;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result353;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V358::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions354,
                                                            } = e;
                                                            match restrictions354 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec357 = e;
                                                                    let len357 = vec357.len();
                                                                    let layout357 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec357.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result357 = if layout357.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout357).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout357);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec357.into_iter().enumerate() {
                                                                        let base = result357
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type355,
                                                                            } = e;
                                                                            let vec356 = (mime_type355.into_bytes()).into_boxed_slice();
                                                                            let ptr356 = vec356.as_ptr().cast::<u8>();
                                                                            let len356 = vec356.len();
                                                                            ::core::mem::forget(vec356);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len356;
                                                                            *base.add(0).cast::<*mut u8>() = ptr356.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len357;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result357;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len359;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result359;
                                        }
                                        V390::Multimodal(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec389 = e;
                                            let len389 = vec389.len();
                                            let layout389 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec389.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result389 = if layout389.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout389).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout389);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec389.into_iter().enumerate() {
                                                let base = result389
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t360_0, t360_1) = e;
                                                    let vec361 = (t360_0.into_bytes()).into_boxed_slice();
                                                    let ptr361 = vec361.as_ptr().cast::<u8>();
                                                    let len361 = vec361.len();
                                                    ::core::mem::forget(vec361);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len361;
                                                    *base.add(0).cast::<*mut u8>() = ptr361.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V388;
                                                    match t360_1 {
                                                        V388::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes362,
                                                            } = e;
                                                            let vec379 = nodes362;
                                                            let len379 = vec379.len();
                                                            let layout379 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec379.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result379 = if layout379.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout379).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout379);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec379.into_iter().enumerate() {
                                                                let base = result379
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name363,
                                                                        type_: type_363,
                                                                    } = e;
                                                                    match name363 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec364 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr364 = vec364.as_ptr().cast::<u8>();
                                                                            let len364 = vec364.len();
                                                                            ::core::mem::forget(vec364);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len364;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr364.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V378;
                                                                    match type_363 {
                                                                        V378::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec367 = e;
                                                                            let len367 = vec367.len();
                                                                            let layout367 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec367.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result367 = if layout367.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout367).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout367);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec367.into_iter().enumerate() {
                                                                                let base = result367
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t365_0, t365_1) = e;
                                                                                    let vec366 = (t365_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr366 = vec366.as_ptr().cast::<u8>();
                                                                                    let len366 = vec366.len();
                                                                                    ::core::mem::forget(vec366);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len366;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr366.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t365_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len367;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result367;
                                                                        }
                                                                        V378::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec370 = e;
                                                                            let len370 = vec370.len();
                                                                            let layout370 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec370.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result370 = if layout370.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout370).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout370);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec370.into_iter().enumerate() {
                                                                                let base = result370
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t368_0, t368_1) = e;
                                                                                    let vec369 = (t368_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr369 = vec369.as_ptr().cast::<u8>();
                                                                                    let len369 = vec369.len();
                                                                                    ::core::mem::forget(vec369);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len369;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr369.cast_mut();
                                                                                    match t368_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len370;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result370;
                                                                        }
                                                                        V378::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec372 = e;
                                                                            let len372 = vec372.len();
                                                                            let layout372 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec372.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result372 = if layout372.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout372).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout372);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec372.into_iter().enumerate() {
                                                                                let base = result372
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec371 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr371 = vec371.as_ptr().cast::<u8>();
                                                                                    let len371 = vec371.len();
                                                                                    ::core::mem::forget(vec371);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len371;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr371.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len372;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result372;
                                                                        }
                                                                        V378::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec374 = e;
                                                                            let len374 = vec374.len();
                                                                            let layout374 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec374.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result374 = if layout374.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout374).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout374);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec374.into_iter().enumerate() {
                                                                                let base = result374
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec373 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr373 = vec373.as_ptr().cast::<u8>();
                                                                                    let len373 = vec373.len();
                                                                                    ::core::mem::forget(vec373);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len373;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr373.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len374;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result374;
                                                                        }
                                                                        V378::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec375 = (e).into_boxed_slice();
                                                                            let ptr375 = vec375.as_ptr().cast::<u8>();
                                                                            let len375 = vec375.len();
                                                                            ::core::mem::forget(vec375);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len375;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr375.cast_mut();
                                                                        }
                                                                        V378::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V378::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V378::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t376_0, t376_1) = e;
                                                                            match t376_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t376_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V378::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V378::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V378::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V378::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V378::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V378::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V378::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V378::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V378::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V378::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V378::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V378::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V378::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V378::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t377_0, t377_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t377_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t377_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len379;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result379;
                                                        }
                                                        V388::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions380,
                                                            } = e;
                                                            match restrictions380 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec383 = e;
                                                                    let len383 = vec383.len();
                                                                    let layout383 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec383.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result383 = if layout383.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout383).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout383);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec383.into_iter().enumerate() {
                                                                        let base = result383
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code381,
                                                                            } = e;
                                                                            let vec382 = (language_code381.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr382 = vec382.as_ptr().cast::<u8>();
                                                                            let len382 = vec382.len();
                                                                            ::core::mem::forget(vec382);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len382;
                                                                            *base.add(0).cast::<*mut u8>() = ptr382.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len383;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result383;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V388::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions384,
                                                            } = e;
                                                            match restrictions384 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec387 = e;
                                                                    let len387 = vec387.len();
                                                                    let layout387 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec387.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result387 = if layout387.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout387).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout387);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec387.into_iter().enumerate() {
                                                                        let base = result387
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type385,
                                                                            } = e;
                                                                            let vec386 = (mime_type385.into_bytes()).into_boxed_slice();
                                                                            let ptr386 = vec386.as_ptr().cast::<u8>();
                                                                            let len386 = vec386.len();
                                                                            ::core::mem::forget(vec386);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len386;
                                                                            *base.add(0).cast::<*mut u8>() = ptr386.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len387;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result387;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len389;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result389;
                                        }
                                    }
                                }
                            }
                            *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len391;
                            *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result391;
                        }
                    }
                    *ptr1
                        .add(18 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len392;
                    *ptr1
                        .add(17 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result392;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_get_definition<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l3 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l4 {
                        0 => {}
                        _ => {
                            let l5 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                    let l7 = *arg0
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *arg0
                        .add(8 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l7, l8, 1);
                    let l9 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l9 {
                        0 => {}
                        _ => {
                            let l10 = *arg0
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *arg0
                                .add(11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l10, l11, 1);
                        }
                    }
                    let l12 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l12 {
                        0 => {
                            let l13 = *arg0
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l14 = *arg0
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base60 = l13;
                            let len60 = l14;
                            for i in 0..len60 {
                                let base = base60
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l15 = *base.add(0).cast::<*mut u8>();
                                    let l16 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                    let l17 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l17 {
                                        0 => {
                                            let l18 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base47 = l18;
                                            let len47 = l19;
                                            for i in 0..len47 {
                                                let base = base47
                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l20 = i32::from(*base.add(0).cast::<u8>());
                                                    match l20 {
                                                        0 => {}
                                                        _ => {
                                                            let l21 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l22 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                        }
                                                    }
                                                    let l23 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l23 {
                                                        0 => {
                                                            let l24 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base28 = l24;
                                                            let len28 = l25;
                                                            for i in 0..len28 {
                                                                let base = base28
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l26 = *base.add(0).cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l26, l27, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base28,
                                                                len28 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        1 => {
                                                            let l29 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l30 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base33 = l29;
                                                            let len33 = l30;
                                                            for i in 0..len33 {
                                                                let base = base33
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l31 = *base.add(0).cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base33,
                                                                len33 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        2 => {
                                                            let l34 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l35 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base38 = l34;
                                                            let len38 = l35;
                                                            for i in 0..len38 {
                                                                let base = base38
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l36 = *base.add(0).cast::<*mut u8>();
                                                                    let l37 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l36, l37, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base38,
                                                                len38 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        3 => {
                                                            let l39 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l40 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base43 = l39;
                                                            let len43 = l40;
                                                            for i in 0..len43 {
                                                                let base = base43
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l41 = *base.add(0).cast::<*mut u8>();
                                                                    let l42 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l41, l42, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base43,
                                                                len43 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        4 => {
                                                            let l44 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l45 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base46 = l44;
                                                            let len46 = l45;
                                                            _rt::cabi_dealloc(base46, len46 * 4, 4);
                                                        }
                                                        5 => {}
                                                        6 => {}
                                                        7 => {}
                                                        8 => {}
                                                        9 => {}
                                                        10 => {}
                                                        11 => {}
                                                        12 => {}
                                                        13 => {}
                                                        14 => {}
                                                        15 => {}
                                                        16 => {}
                                                        17 => {}
                                                        18 => {}
                                                        19 => {}
                                                        20 => {}
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base47,
                                                len47 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        1 => {
                                            let l48 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l48 {
                                                0 => {}
                                                _ => {
                                                    let l49 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l50 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base53 = l49;
                                                    let len53 = l50;
                                                    for i in 0..len53 {
                                                        let base = base53
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l51 = *base.add(0).cast::<*mut u8>();
                                                            let l52 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base53,
                                                        len53 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l54 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l54 {
                                                0 => {}
                                                _ => {
                                                    let l55 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l56 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base59 = l55;
                                                    let len59 = l56;
                                                    for i in 0..len59 {
                                                        let base = base59
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l57 = *base.add(0).cast::<*mut u8>();
                                                            let l58 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l57, l58, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base59,
                                                        len59 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base60,
                                len60 * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l61 = *arg0
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l62 = *arg0
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base108 = l61;
                            let len108 = l62;
                            for i in 0..len108 {
                                let base = base108
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l63 = *base.add(0).cast::<*mut u8>();
                                    let l64 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l63, l64, 1);
                                    let l65 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l65 {
                                        0 => {
                                            let l66 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l67 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base95 = l66;
                                            let len95 = l67;
                                            for i in 0..len95 {
                                                let base = base95
                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l68 = i32::from(*base.add(0).cast::<u8>());
                                                    match l68 {
                                                        0 => {}
                                                        _ => {
                                                            let l69 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l70 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l69, l70, 1);
                                                        }
                                                    }
                                                    let l71 = i32::from(
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l71 {
                                                        0 => {
                                                            let l72 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base76 = l72;
                                                            let len76 = l73;
                                                            for i in 0..len76 {
                                                                let base = base76
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l74 = *base.add(0).cast::<*mut u8>();
                                                                    let l75 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l74, l75, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base76,
                                                                len76 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        1 => {
                                                            let l77 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l78 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base81 = l77;
                                                            let len81 = l78;
                                                            for i in 0..len81 {
                                                                let base = base81
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l79 = *base.add(0).cast::<*mut u8>();
                                                                    let l80 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l79, l80, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base81,
                                                                len81 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        2 => {
                                                            let l82 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l83 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base86 = l82;
                                                            let len86 = l83;
                                                            for i in 0..len86 {
                                                                let base = base86
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l84 = *base.add(0).cast::<*mut u8>();
                                                                    let l85 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l84, l85, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base86,
                                                                len86 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        3 => {
                                                            let l87 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l88 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base91 = l87;
                                                            let len91 = l88;
                                                            for i in 0..len91 {
                                                                let base = base91
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l89 = *base.add(0).cast::<*mut u8>();
                                                                    let l90 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l89, l90, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base91,
                                                                len91 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        4 => {
                                                            let l92 = *base
                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l93 = *base
                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base94 = l92;
                                                            let len94 = l93;
                                                            _rt::cabi_dealloc(base94, len94 * 4, 4);
                                                        }
                                                        5 => {}
                                                        6 => {}
                                                        7 => {}
                                                        8 => {}
                                                        9 => {}
                                                        10 => {}
                                                        11 => {}
                                                        12 => {}
                                                        13 => {}
                                                        14 => {}
                                                        15 => {}
                                                        16 => {}
                                                        17 => {}
                                                        18 => {}
                                                        19 => {}
                                                        20 => {}
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base95,
                                                len95 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        1 => {
                                            let l96 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l96 {
                                                0 => {}
                                                _ => {
                                                    let l97 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l98 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base101 = l97;
                                                    let len101 = l98;
                                                    for i in 0..len101 {
                                                        let base = base101
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l99 = *base.add(0).cast::<*mut u8>();
                                                            let l100 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l99, l100, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base101,
                                                        len101 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l102 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l102 {
                                                0 => {}
                                                _ => {
                                                    let l103 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l104 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base107 = l103;
                                                    let len107 = l104;
                                                    for i in 0..len107 {
                                                        let base = base107
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l105 = *base.add(0).cast::<*mut u8>();
                                                            let l106 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l105, l106, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base107,
                                                        len107 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base108,
                                len108 * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    let l109 = *arg0
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l110 = *arg0
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base312 = l109;
                    let len312 = l110;
                    for i in 0..len312 {
                        let base = base312
                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l111 = *base.add(0).cast::<*mut u8>();
                            let l112 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l111, l112, 1);
                            let l113 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l114 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l113, l114, 1);
                            let l115 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l115 {
                                0 => {}
                                _ => {
                                    let l116 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l117 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l116, l117, 1);
                                }
                            }
                            let l118 = i32::from(
                                *base
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l118 {
                                0 => {
                                    let l119 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l120 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base166 = l119;
                                    let len166 = l120;
                                    for i in 0..len166 {
                                        let base = base166
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l121 = *base.add(0).cast::<*mut u8>();
                                            let l122 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l121, l122, 1);
                                            let l123 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l123 {
                                                0 => {
                                                    let l124 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l125 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base153 = l124;
                                                    let len153 = l125;
                                                    for i in 0..len153 {
                                                        let base = base153
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l126 = i32::from(*base.add(0).cast::<u8>());
                                                            match l126 {
                                                                0 => {}
                                                                _ => {
                                                                    let l127 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l128 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l127, l128, 1);
                                                                }
                                                            }
                                                            let l129 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l129 {
                                                                0 => {
                                                                    let l130 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l131 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base134 = l130;
                                                                    let len134 = l131;
                                                                    for i in 0..len134 {
                                                                        let base = base134
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l132 = *base.add(0).cast::<*mut u8>();
                                                                            let l133 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l132, l133, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base134,
                                                                        len134 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l135 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l136 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base139 = l135;
                                                                    let len139 = l136;
                                                                    for i in 0..len139 {
                                                                        let base = base139
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l137 = *base.add(0).cast::<*mut u8>();
                                                                            let l138 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l137, l138, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base139,
                                                                        len139 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l140 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l141 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base144 = l140;
                                                                    let len144 = l141;
                                                                    for i in 0..len144 {
                                                                        let base = base144
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l142 = *base.add(0).cast::<*mut u8>();
                                                                            let l143 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l142, l143, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base144,
                                                                        len144 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l145 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l146 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base149 = l145;
                                                                    let len149 = l146;
                                                                    for i in 0..len149 {
                                                                        let base = base149
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l147 = *base.add(0).cast::<*mut u8>();
                                                                            let l148 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l147, l148, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base149,
                                                                        len149 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l150 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l151 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base152 = l150;
                                                                    let len152 = l151;
                                                                    _rt::cabi_dealloc(base152, len152 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base153,
                                                        len153 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l154 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l154 {
                                                        0 => {}
                                                        _ => {
                                                            let l155 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l156 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base159 = l155;
                                                            let len159 = l156;
                                                            for i in 0..len159 {
                                                                let base = base159
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l157 = *base.add(0).cast::<*mut u8>();
                                                                    let l158 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l157, l158, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base159,
                                                                len159 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l160 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l160 {
                                                        0 => {}
                                                        _ => {
                                                            let l161 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l162 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base165 = l161;
                                                            let len165 = l162;
                                                            for i in 0..len165 {
                                                                let base = base165
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l163 = *base.add(0).cast::<*mut u8>();
                                                                    let l164 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l163, l164, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base165,
                                                                len165 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base166,
                                        len166 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l167 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l168 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base214 = l167;
                                    let len214 = l168;
                                    for i in 0..len214 {
                                        let base = base214
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l169 = *base.add(0).cast::<*mut u8>();
                                            let l170 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l169, l170, 1);
                                            let l171 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l171 {
                                                0 => {
                                                    let l172 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l173 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base201 = l172;
                                                    let len201 = l173;
                                                    for i in 0..len201 {
                                                        let base = base201
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l174 = i32::from(*base.add(0).cast::<u8>());
                                                            match l174 {
                                                                0 => {}
                                                                _ => {
                                                                    let l175 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l176 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l175, l176, 1);
                                                                }
                                                            }
                                                            let l177 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l177 {
                                                                0 => {
                                                                    let l178 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l179 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base182 = l178;
                                                                    let len182 = l179;
                                                                    for i in 0..len182 {
                                                                        let base = base182
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l180 = *base.add(0).cast::<*mut u8>();
                                                                            let l181 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l180, l181, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base182,
                                                                        len182 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l183 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l184 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base187 = l183;
                                                                    let len187 = l184;
                                                                    for i in 0..len187 {
                                                                        let base = base187
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l185 = *base.add(0).cast::<*mut u8>();
                                                                            let l186 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l185, l186, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base187,
                                                                        len187 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l188 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l189 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base192 = l188;
                                                                    let len192 = l189;
                                                                    for i in 0..len192 {
                                                                        let base = base192
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l190 = *base.add(0).cast::<*mut u8>();
                                                                            let l191 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l190, l191, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base192,
                                                                        len192 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l193 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l194 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base197 = l193;
                                                                    let len197 = l194;
                                                                    for i in 0..len197 {
                                                                        let base = base197
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l195 = *base.add(0).cast::<*mut u8>();
                                                                            let l196 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l195, l196, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base197,
                                                                        len197 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l198 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l199 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base200 = l198;
                                                                    let len200 = l199;
                                                                    _rt::cabi_dealloc(base200, len200 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base201,
                                                        len201 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l202 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l202 {
                                                        0 => {}
                                                        _ => {
                                                            let l203 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l204 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base207 = l203;
                                                            let len207 = l204;
                                                            for i in 0..len207 {
                                                                let base = base207
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l205 = *base.add(0).cast::<*mut u8>();
                                                                    let l206 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l205, l206, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base207,
                                                                len207 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l208 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l208 {
                                                        0 => {}
                                                        _ => {
                                                            let l209 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l210 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base213 = l209;
                                                            let len213 = l210;
                                                            for i in 0..len213 {
                                                                let base = base213
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l211 = *base.add(0).cast::<*mut u8>();
                                                                    let l212 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l211, l212, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base213,
                                                                len213 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base214,
                                        len214 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l215 = i32::from(
                                *base
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l215 {
                                0 => {
                                    let l216 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l217 = *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base263 = l216;
                                    let len263 = l217;
                                    for i in 0..len263 {
                                        let base = base263
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l218 = *base.add(0).cast::<*mut u8>();
                                            let l219 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l218, l219, 1);
                                            let l220 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l220 {
                                                0 => {
                                                    let l221 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l222 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base250 = l221;
                                                    let len250 = l222;
                                                    for i in 0..len250 {
                                                        let base = base250
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l223 = i32::from(*base.add(0).cast::<u8>());
                                                            match l223 {
                                                                0 => {}
                                                                _ => {
                                                                    let l224 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l225 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l224, l225, 1);
                                                                }
                                                            }
                                                            let l226 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l226 {
                                                                0 => {
                                                                    let l227 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l228 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base231 = l227;
                                                                    let len231 = l228;
                                                                    for i in 0..len231 {
                                                                        let base = base231
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l229 = *base.add(0).cast::<*mut u8>();
                                                                            let l230 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l229, l230, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base231,
                                                                        len231 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l232 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l233 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base236 = l232;
                                                                    let len236 = l233;
                                                                    for i in 0..len236 {
                                                                        let base = base236
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l234 = *base.add(0).cast::<*mut u8>();
                                                                            let l235 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l234, l235, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base236,
                                                                        len236 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l237 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l238 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base241 = l237;
                                                                    let len241 = l238;
                                                                    for i in 0..len241 {
                                                                        let base = base241
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l239 = *base.add(0).cast::<*mut u8>();
                                                                            let l240 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l239, l240, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base241,
                                                                        len241 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l242 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l243 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base246 = l242;
                                                                    let len246 = l243;
                                                                    for i in 0..len246 {
                                                                        let base = base246
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l244 = *base.add(0).cast::<*mut u8>();
                                                                            let l245 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l244, l245, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base246,
                                                                        len246 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l247 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l248 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base249 = l247;
                                                                    let len249 = l248;
                                                                    _rt::cabi_dealloc(base249, len249 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base250,
                                                        len250 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l251 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l251 {
                                                        0 => {}
                                                        _ => {
                                                            let l252 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l253 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base256 = l252;
                                                            let len256 = l253;
                                                            for i in 0..len256 {
                                                                let base = base256
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l254 = *base.add(0).cast::<*mut u8>();
                                                                    let l255 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l254, l255, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base256,
                                                                len256 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l257 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l257 {
                                                        0 => {}
                                                        _ => {
                                                            let l258 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l259 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base262 = l258;
                                                            let len262 = l259;
                                                            for i in 0..len262 {
                                                                let base = base262
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l260 = *base.add(0).cast::<*mut u8>();
                                                                    let l261 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l260, l261, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base262,
                                                                len262 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base263,
                                        len263 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l264 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l265 = *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base311 = l264;
                                    let len311 = l265;
                                    for i in 0..len311 {
                                        let base = base311
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l266 = *base.add(0).cast::<*mut u8>();
                                            let l267 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l266, l267, 1);
                                            let l268 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l268 {
                                                0 => {
                                                    let l269 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l270 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base298 = l269;
                                                    let len298 = l270;
                                                    for i in 0..len298 {
                                                        let base = base298
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l271 = i32::from(*base.add(0).cast::<u8>());
                                                            match l271 {
                                                                0 => {}
                                                                _ => {
                                                                    let l272 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l273 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l272, l273, 1);
                                                                }
                                                            }
                                                            let l274 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l274 {
                                                                0 => {
                                                                    let l275 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l276 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base279 = l275;
                                                                    let len279 = l276;
                                                                    for i in 0..len279 {
                                                                        let base = base279
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l277 = *base.add(0).cast::<*mut u8>();
                                                                            let l278 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l277, l278, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base279,
                                                                        len279 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l280 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l281 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base284 = l280;
                                                                    let len284 = l281;
                                                                    for i in 0..len284 {
                                                                        let base = base284
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l282 = *base.add(0).cast::<*mut u8>();
                                                                            let l283 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l282, l283, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base284,
                                                                        len284 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l285 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l286 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base289 = l285;
                                                                    let len289 = l286;
                                                                    for i in 0..len289 {
                                                                        let base = base289
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l287 = *base.add(0).cast::<*mut u8>();
                                                                            let l288 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l287, l288, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base289,
                                                                        len289 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l290 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l291 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base294 = l290;
                                                                    let len294 = l291;
                                                                    for i in 0..len294 {
                                                                        let base = base294
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l292 = *base.add(0).cast::<*mut u8>();
                                                                            let l293 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l292, l293, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base294,
                                                                        len294 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l295 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l296 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base297 = l295;
                                                                    let len297 = l296;
                                                                    _rt::cabi_dealloc(base297, len297 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base298,
                                                        len298 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l299 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l299 {
                                                        0 => {}
                                                        _ => {
                                                            let l300 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l301 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base304 = l300;
                                                            let len304 = l301;
                                                            for i in 0..len304 {
                                                                let base = base304
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l302 = *base.add(0).cast::<*mut u8>();
                                                                    let l303 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l302, l303, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base304,
                                                                len304 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l305 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l305 {
                                                        0 => {}
                                                        _ => {
                                                            let l306 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l307 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base310 = l306;
                                                            let len310 = l307;
                                                            for i in 0..len310 {
                                                                let base = base310
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l308 = *base.add(0).cast::<*mut u8>();
                                                                    let l309 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l308, l309, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base310,
                                                                len310 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base311,
                                        len311 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(
                        base312,
                        len312 * (13 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l313 = *arg0
                        .add(17 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l314 = *arg0
                        .add(18 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base629 = l313;
                    let len629 = l314;
                    for i in 0..len629 {
                        let base = base629
                            .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l315 = *base.add(0).cast::<*mut u8>();
                            let l316 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l315, l316, 1);
                            let l317 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l317 {
                                0 => {}
                                _ => {
                                    let l318 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l319 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l318, l319, 1);
                                }
                            }
                            let l320 = i32::from(
                                *base
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l320 {
                                0 => {}
                                _ => {
                                    let l321 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l322 = *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l321, l322, 1);
                                }
                            }
                            let l323 = *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l324 = *base
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l323, l324, 1);
                            let l325 = i32::from(
                                *base
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l325 {
                                0 => {}
                                _ => {
                                    let l326 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l327 = *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l326, l327, 1);
                                }
                            }
                            let l328 = i32::from(
                                *base
                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l328 {
                                0 => {
                                    let l329 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l330 = *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base376 = l329;
                                    let len376 = l330;
                                    for i in 0..len376 {
                                        let base = base376
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l331 = *base.add(0).cast::<*mut u8>();
                                            let l332 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l331, l332, 1);
                                            let l333 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l333 {
                                                0 => {
                                                    let l334 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l335 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base363 = l334;
                                                    let len363 = l335;
                                                    for i in 0..len363 {
                                                        let base = base363
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l336 = i32::from(*base.add(0).cast::<u8>());
                                                            match l336 {
                                                                0 => {}
                                                                _ => {
                                                                    let l337 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l338 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l337, l338, 1);
                                                                }
                                                            }
                                                            let l339 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l339 {
                                                                0 => {
                                                                    let l340 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l341 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base344 = l340;
                                                                    let len344 = l341;
                                                                    for i in 0..len344 {
                                                                        let base = base344
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l342 = *base.add(0).cast::<*mut u8>();
                                                                            let l343 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l342, l343, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base344,
                                                                        len344 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l345 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l346 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base349 = l345;
                                                                    let len349 = l346;
                                                                    for i in 0..len349 {
                                                                        let base = base349
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l347 = *base.add(0).cast::<*mut u8>();
                                                                            let l348 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l347, l348, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base349,
                                                                        len349 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l350 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l351 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base354 = l350;
                                                                    let len354 = l351;
                                                                    for i in 0..len354 {
                                                                        let base = base354
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l352 = *base.add(0).cast::<*mut u8>();
                                                                            let l353 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l352, l353, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base354,
                                                                        len354 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l355 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l356 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base359 = l355;
                                                                    let len359 = l356;
                                                                    for i in 0..len359 {
                                                                        let base = base359
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l357 = *base.add(0).cast::<*mut u8>();
                                                                            let l358 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l357, l358, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base359,
                                                                        len359 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l360 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l361 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base362 = l360;
                                                                    let len362 = l361;
                                                                    _rt::cabi_dealloc(base362, len362 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base363,
                                                        len363 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l364 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l364 {
                                                        0 => {}
                                                        _ => {
                                                            let l365 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l366 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base369 = l365;
                                                            let len369 = l366;
                                                            for i in 0..len369 {
                                                                let base = base369
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l367 = *base.add(0).cast::<*mut u8>();
                                                                    let l368 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l367, l368, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base369,
                                                                len369 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l370 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l370 {
                                                        0 => {}
                                                        _ => {
                                                            let l371 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l372 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base375 = l371;
                                                            let len375 = l372;
                                                            for i in 0..len375 {
                                                                let base = base375
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l373 = *base.add(0).cast::<*mut u8>();
                                                                    let l374 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l373, l374, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base375,
                                                                len375 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base376,
                                        len376 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l377 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l378 = *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base424 = l377;
                                    let len424 = l378;
                                    for i in 0..len424 {
                                        let base = base424
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l379 = *base.add(0).cast::<*mut u8>();
                                            let l380 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l379, l380, 1);
                                            let l381 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l381 {
                                                0 => {
                                                    let l382 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l383 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base411 = l382;
                                                    let len411 = l383;
                                                    for i in 0..len411 {
                                                        let base = base411
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l384 = i32::from(*base.add(0).cast::<u8>());
                                                            match l384 {
                                                                0 => {}
                                                                _ => {
                                                                    let l385 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l386 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l385, l386, 1);
                                                                }
                                                            }
                                                            let l387 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l387 {
                                                                0 => {
                                                                    let l388 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l389 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base392 = l388;
                                                                    let len392 = l389;
                                                                    for i in 0..len392 {
                                                                        let base = base392
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l390 = *base.add(0).cast::<*mut u8>();
                                                                            let l391 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l390, l391, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base392,
                                                                        len392 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l393 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l394 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base397 = l393;
                                                                    let len397 = l394;
                                                                    for i in 0..len397 {
                                                                        let base = base397
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l395 = *base.add(0).cast::<*mut u8>();
                                                                            let l396 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l395, l396, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base397,
                                                                        len397 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l398 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l399 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base402 = l398;
                                                                    let len402 = l399;
                                                                    for i in 0..len402 {
                                                                        let base = base402
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l400 = *base.add(0).cast::<*mut u8>();
                                                                            let l401 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l400, l401, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base402,
                                                                        len402 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l403 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l404 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base407 = l403;
                                                                    let len407 = l404;
                                                                    for i in 0..len407 {
                                                                        let base = base407
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l405 = *base.add(0).cast::<*mut u8>();
                                                                            let l406 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l405, l406, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base407,
                                                                        len407 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l408 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l409 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base410 = l408;
                                                                    let len410 = l409;
                                                                    _rt::cabi_dealloc(base410, len410 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base411,
                                                        len411 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l412 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l412 {
                                                        0 => {}
                                                        _ => {
                                                            let l413 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l414 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base417 = l413;
                                                            let len417 = l414;
                                                            for i in 0..len417 {
                                                                let base = base417
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l415 = *base.add(0).cast::<*mut u8>();
                                                                    let l416 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l415, l416, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base417,
                                                                len417 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l418 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l418 {
                                                        0 => {}
                                                        _ => {
                                                            let l419 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l420 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base423 = l419;
                                                            let len423 = l420;
                                                            for i in 0..len423 {
                                                                let base = base423
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l421 = *base.add(0).cast::<*mut u8>();
                                                                    let l422 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l421, l422, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base423,
                                                                len423 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base424,
                                        len424 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l425 = *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l426 = *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base628 = l425;
                            let len628 = l426;
                            for i in 0..len628 {
                                let base = base628
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l427 = *base.add(0).cast::<*mut u8>();
                                    let l428 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l427, l428, 1);
                                    let l429 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l430 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l429, l430, 1);
                                    let l431 = i32::from(
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l431 {
                                        0 => {}
                                        _ => {
                                            let l432 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l433 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l432, l433, 1);
                                        }
                                    }
                                    let l434 = i32::from(
                                        *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l434 {
                                        0 => {
                                            let l435 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l436 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base482 = l435;
                                            let len482 = l436;
                                            for i in 0..len482 {
                                                let base = base482
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l437 = *base.add(0).cast::<*mut u8>();
                                                    let l438 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l437, l438, 1);
                                                    let l439 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l439 {
                                                        0 => {
                                                            let l440 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l441 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base469 = l440;
                                                            let len469 = l441;
                                                            for i in 0..len469 {
                                                                let base = base469
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l442 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l442 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l443 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l444 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l443, l444, 1);
                                                                        }
                                                                    }
                                                                    let l445 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l445 {
                                                                        0 => {
                                                                            let l446 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l447 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base450 = l446;
                                                                            let len450 = l447;
                                                                            for i in 0..len450 {
                                                                                let base = base450
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l448 = *base.add(0).cast::<*mut u8>();
                                                                                    let l449 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l448, l449, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base450,
                                                                                len450 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l451 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l452 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base455 = l451;
                                                                            let len455 = l452;
                                                                            for i in 0..len455 {
                                                                                let base = base455
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l453 = *base.add(0).cast::<*mut u8>();
                                                                                    let l454 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l453, l454, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base455,
                                                                                len455 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l456 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l457 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base460 = l456;
                                                                            let len460 = l457;
                                                                            for i in 0..len460 {
                                                                                let base = base460
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l458 = *base.add(0).cast::<*mut u8>();
                                                                                    let l459 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l458, l459, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base460,
                                                                                len460 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l461 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l462 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base465 = l461;
                                                                            let len465 = l462;
                                                                            for i in 0..len465 {
                                                                                let base = base465
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l463 = *base.add(0).cast::<*mut u8>();
                                                                                    let l464 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l463, l464, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base465,
                                                                                len465 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l466 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l467 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base468 = l466;
                                                                            let len468 = l467;
                                                                            _rt::cabi_dealloc(base468, len468 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base469,
                                                                len469 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l470 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l470 {
                                                                0 => {}
                                                                _ => {
                                                                    let l471 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l472 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base475 = l471;
                                                                    let len475 = l472;
                                                                    for i in 0..len475 {
                                                                        let base = base475
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l473 = *base.add(0).cast::<*mut u8>();
                                                                            let l474 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l473, l474, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base475,
                                                                        len475 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l476 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l476 {
                                                                0 => {}
                                                                _ => {
                                                                    let l477 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l478 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base481 = l477;
                                                                    let len481 = l478;
                                                                    for i in 0..len481 {
                                                                        let base = base481
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l479 = *base.add(0).cast::<*mut u8>();
                                                                            let l480 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l479, l480, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base481,
                                                                        len481 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base482,
                                                len482 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l483 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l484 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base530 = l483;
                                            let len530 = l484;
                                            for i in 0..len530 {
                                                let base = base530
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l485 = *base.add(0).cast::<*mut u8>();
                                                    let l486 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l485, l486, 1);
                                                    let l487 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l487 {
                                                        0 => {
                                                            let l488 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l489 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base517 = l488;
                                                            let len517 = l489;
                                                            for i in 0..len517 {
                                                                let base = base517
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l490 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l490 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l491 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l492 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l491, l492, 1);
                                                                        }
                                                                    }
                                                                    let l493 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l493 {
                                                                        0 => {
                                                                            let l494 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l495 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base498 = l494;
                                                                            let len498 = l495;
                                                                            for i in 0..len498 {
                                                                                let base = base498
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l496 = *base.add(0).cast::<*mut u8>();
                                                                                    let l497 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l496, l497, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base498,
                                                                                len498 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l499 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l500 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base503 = l499;
                                                                            let len503 = l500;
                                                                            for i in 0..len503 {
                                                                                let base = base503
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l501 = *base.add(0).cast::<*mut u8>();
                                                                                    let l502 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l501, l502, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base503,
                                                                                len503 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l504 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l505 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base508 = l504;
                                                                            let len508 = l505;
                                                                            for i in 0..len508 {
                                                                                let base = base508
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l506 = *base.add(0).cast::<*mut u8>();
                                                                                    let l507 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l506, l507, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base508,
                                                                                len508 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l509 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l510 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base513 = l509;
                                                                            let len513 = l510;
                                                                            for i in 0..len513 {
                                                                                let base = base513
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l511 = *base.add(0).cast::<*mut u8>();
                                                                                    let l512 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l511, l512, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base513,
                                                                                len513 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l514 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l515 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base516 = l514;
                                                                            let len516 = l515;
                                                                            _rt::cabi_dealloc(base516, len516 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base517,
                                                                len517 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l518 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l518 {
                                                                0 => {}
                                                                _ => {
                                                                    let l519 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l520 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base523 = l519;
                                                                    let len523 = l520;
                                                                    for i in 0..len523 {
                                                                        let base = base523
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l521 = *base.add(0).cast::<*mut u8>();
                                                                            let l522 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l521, l522, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base523,
                                                                        len523 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l524 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l524 {
                                                                0 => {}
                                                                _ => {
                                                                    let l525 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l526 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base529 = l525;
                                                                    let len529 = l526;
                                                                    for i in 0..len529 {
                                                                        let base = base529
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l527 = *base.add(0).cast::<*mut u8>();
                                                                            let l528 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l527, l528, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base529,
                                                                        len529 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base530,
                                                len530 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l531 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l531 {
                                        0 => {
                                            let l532 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l533 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base579 = l532;
                                            let len579 = l533;
                                            for i in 0..len579 {
                                                let base = base579
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l534 = *base.add(0).cast::<*mut u8>();
                                                    let l535 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l534, l535, 1);
                                                    let l536 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l536 {
                                                        0 => {
                                                            let l537 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l538 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base566 = l537;
                                                            let len566 = l538;
                                                            for i in 0..len566 {
                                                                let base = base566
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l539 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l539 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l540 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l541 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l540, l541, 1);
                                                                        }
                                                                    }
                                                                    let l542 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l542 {
                                                                        0 => {
                                                                            let l543 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l544 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base547 = l543;
                                                                            let len547 = l544;
                                                                            for i in 0..len547 {
                                                                                let base = base547
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l545 = *base.add(0).cast::<*mut u8>();
                                                                                    let l546 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l545, l546, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base547,
                                                                                len547 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l548 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l549 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base552 = l548;
                                                                            let len552 = l549;
                                                                            for i in 0..len552 {
                                                                                let base = base552
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l550 = *base.add(0).cast::<*mut u8>();
                                                                                    let l551 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l550, l551, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base552,
                                                                                len552 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l553 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l554 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base557 = l553;
                                                                            let len557 = l554;
                                                                            for i in 0..len557 {
                                                                                let base = base557
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l555 = *base.add(0).cast::<*mut u8>();
                                                                                    let l556 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l555, l556, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base557,
                                                                                len557 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l558 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l559 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base562 = l558;
                                                                            let len562 = l559;
                                                                            for i in 0..len562 {
                                                                                let base = base562
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l560 = *base.add(0).cast::<*mut u8>();
                                                                                    let l561 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l560, l561, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base562,
                                                                                len562 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l563 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l564 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base565 = l563;
                                                                            let len565 = l564;
                                                                            _rt::cabi_dealloc(base565, len565 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base566,
                                                                len566 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l567 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l567 {
                                                                0 => {}
                                                                _ => {
                                                                    let l568 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l569 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base572 = l568;
                                                                    let len572 = l569;
                                                                    for i in 0..len572 {
                                                                        let base = base572
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l570 = *base.add(0).cast::<*mut u8>();
                                                                            let l571 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l570, l571, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base572,
                                                                        len572 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l573 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l573 {
                                                                0 => {}
                                                                _ => {
                                                                    let l574 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l575 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base578 = l574;
                                                                    let len578 = l575;
                                                                    for i in 0..len578 {
                                                                        let base = base578
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l576 = *base.add(0).cast::<*mut u8>();
                                                                            let l577 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l576, l577, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base578,
                                                                        len578 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base579,
                                                len579 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l580 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l581 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base627 = l580;
                                            let len627 = l581;
                                            for i in 0..len627 {
                                                let base = base627
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l582 = *base.add(0).cast::<*mut u8>();
                                                    let l583 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l582, l583, 1);
                                                    let l584 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l584 {
                                                        0 => {
                                                            let l585 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l586 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base614 = l585;
                                                            let len614 = l586;
                                                            for i in 0..len614 {
                                                                let base = base614
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l587 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l587 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l588 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l589 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l588, l589, 1);
                                                                        }
                                                                    }
                                                                    let l590 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l590 {
                                                                        0 => {
                                                                            let l591 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l592 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base595 = l591;
                                                                            let len595 = l592;
                                                                            for i in 0..len595 {
                                                                                let base = base595
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l593 = *base.add(0).cast::<*mut u8>();
                                                                                    let l594 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l593, l594, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base595,
                                                                                len595 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l596 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l597 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base600 = l596;
                                                                            let len600 = l597;
                                                                            for i in 0..len600 {
                                                                                let base = base600
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l598 = *base.add(0).cast::<*mut u8>();
                                                                                    let l599 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l598, l599, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base600,
                                                                                len600 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l601 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l602 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base605 = l601;
                                                                            let len605 = l602;
                                                                            for i in 0..len605 {
                                                                                let base = base605
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l603 = *base.add(0).cast::<*mut u8>();
                                                                                    let l604 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l603, l604, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base605,
                                                                                len605 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l606 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l607 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base610 = l606;
                                                                            let len610 = l607;
                                                                            for i in 0..len610 {
                                                                                let base = base610
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l608 = *base.add(0).cast::<*mut u8>();
                                                                                    let l609 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l608, l609, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base610,
                                                                                len610 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l611 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l612 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base613 = l611;
                                                                            let len613 = l612;
                                                                            _rt::cabi_dealloc(base613, len613 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base614,
                                                                len614 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l615 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l615 {
                                                                0 => {}
                                                                _ => {
                                                                    let l616 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l617 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base620 = l616;
                                                                    let len620 = l617;
                                                                    for i in 0..len620 {
                                                                        let base = base620
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l618 = *base.add(0).cast::<*mut u8>();
                                                                            let l619 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l618, l619, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base620,
                                                                        len620 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l621 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l621 {
                                                                0 => {}
                                                                _ => {
                                                                    let l622 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l623 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base626 = l622;
                                                                    let len626 = l623;
                                                                    for i in 0..len626 {
                                                                        let base = base626
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l624 = *base.add(0).cast::<*mut u8>();
                                                                            let l625 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l624, l625, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base626,
                                                                        len626 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base627,
                                                len627 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base628,
                                len628 * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    _rt::cabi_dealloc(
                        base629,
                        len629 * (18 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_agent_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::get_agent(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    (result2).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_discover_agents_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::discover_agents();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = result0;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec2.len() * 4,
                        4,
                    );
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = result2;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_discover_agents<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 4, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_discover_agent_types_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::discover_agent_types();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec393 = result0;
                    let len393 = vec393.len();
                    let layout393 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec393.len() * (19 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result393 = if layout393.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout393).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout393);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec393.into_iter().enumerate() {
                        let base = result393
                            .add(i * (19 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::golem::agent::common::AgentType {
                                type_name: type_name2,
                                description: description2,
                                constructor: constructor2,
                                methods: methods2,
                                dependencies: dependencies2,
                            } = e;
                            let vec3 = (type_name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (description2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            let super::super::super::super::golem::agent::common::AgentConstructor {
                                name: name5,
                                description: description5,
                                prompt_hint: prompt_hint5,
                                input_schema: input_schema5,
                            } = constructor2;
                            match name5 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec7 = (description5.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                            match prompt_hint5 {
                                Some(e) => {
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            use super::super::super::super::golem::agent::common::DataSchema as V69;
                            match input_schema5 {
                                V69::Tuple(e) => {
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec38 = e;
                                    let len38 = vec38.len();
                                    let layout38 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec38.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result38 = if layout38.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout38).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout38);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec38.into_iter().enumerate() {
                                        let base = result38
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t9_0, t9_1) = e;
                                            let vec10 = (t9_0.into_bytes()).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V37;
                                            match t9_1 {
                                                V37::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes11,
                                                    } = e;
                                                    let vec28 = nodes11;
                                                    let len28 = vec28.len();
                                                    let layout28 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec28.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result28 = if layout28.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout28);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec28.into_iter().enumerate() {
                                                        let base = result28
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name12,
                                                                type_: type_12,
                                                            } = e;
                                                            match name12 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                                                    let len13 = vec13.len();
                                                                    ::core::mem::forget(vec13);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len13;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V27;
                                                            match type_12 {
                                                                V27::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec16 = e;
                                                                    let len16 = vec16.len();
                                                                    let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec16.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result16 = if layout16.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout16);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec16.into_iter().enumerate() {
                                                                        let base = result16
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t14_0, t14_1) = e;
                                                                            let vec15 = (t14_0.into_bytes()).into_boxed_slice();
                                                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                                                            let len15 = vec15.len();
                                                                            ::core::mem::forget(vec15);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len15;
                                                                            *base.add(0).cast::<*mut u8>() = ptr15.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t14_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len16;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result16;
                                                                }
                                                                V27::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec19 = e;
                                                                    let len19 = vec19.len();
                                                                    let layout19 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec19.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result19 = if layout19.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout19).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout19);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec19.into_iter().enumerate() {
                                                                        let base = result19
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t17_0, t17_1) = e;
                                                                            let vec18 = (t17_0.into_bytes()).into_boxed_slice();
                                                                            let ptr18 = vec18.as_ptr().cast::<u8>();
                                                                            let len18 = vec18.len();
                                                                            ::core::mem::forget(vec18);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len18;
                                                                            *base.add(0).cast::<*mut u8>() = ptr18.cast_mut();
                                                                            match t17_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len19;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result19;
                                                                }
                                                                V27::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec21 = e;
                                                                    let len21 = vec21.len();
                                                                    let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec21.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result21 = if layout21.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout21);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec21.into_iter().enumerate() {
                                                                        let base = result21
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec20 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                                                            let len20 = vec20.len();
                                                                            ::core::mem::forget(vec20);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len20;
                                                                            *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len21;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result21;
                                                                }
                                                                V27::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec23 = e;
                                                                    let len23 = vec23.len();
                                                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec23.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result23 = if layout23.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout23);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec23.into_iter().enumerate() {
                                                                        let base = result23
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec22 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                                                            let len22 = vec22.len();
                                                                            ::core::mem::forget(vec22);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len22;
                                                                            *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len23;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result23;
                                                                }
                                                                V27::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec24 = (e).into_boxed_slice();
                                                                    let ptr24 = vec24.as_ptr().cast::<u8>();
                                                                    let len24 = vec24.len();
                                                                    ::core::mem::forget(vec24);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len24;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr24.cast_mut();
                                                                }
                                                                V27::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V27::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V27::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t25_0, t25_1) = e;
                                                                    match t25_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t25_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V27::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V27::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V27::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V27::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V27::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V27::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V27::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V27::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V27::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V27::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V27::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V27::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V27::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V27::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t26_0, t26_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t26_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t26_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len28;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result28;
                                                }
                                                V37::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions29,
                                                    } = e;
                                                    match restrictions29 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec32 = e;
                                                            let len32 = vec32.len();
                                                            let layout32 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec32.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result32 = if layout32.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout32).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout32);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec32.into_iter().enumerate() {
                                                                let base = result32
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code30,
                                                                    } = e;
                                                                    let vec31 = (language_code30.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr31 = vec31.as_ptr().cast::<u8>();
                                                                    let len31 = vec31.len();
                                                                    ::core::mem::forget(vec31);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len31;
                                                                    *base.add(0).cast::<*mut u8>() = ptr31.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len32;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result32;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V37::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions33,
                                                    } = e;
                                                    match restrictions33 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec36 = e;
                                                            let len36 = vec36.len();
                                                            let layout36 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec36.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result36 = if layout36.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout36).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout36);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec36.into_iter().enumerate() {
                                                                let base = result36
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type34,
                                                                    } = e;
                                                                    let vec35 = (mime_type34.into_bytes()).into_boxed_slice();
                                                                    let ptr35 = vec35.as_ptr().cast::<u8>();
                                                                    let len35 = vec35.len();
                                                                    ::core::mem::forget(vec35);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len35;
                                                                    *base.add(0).cast::<*mut u8>() = ptr35.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len36;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result36;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len38;
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result38;
                                }
                                V69::Multimodal(e) => {
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec68 = e;
                                    let len68 = vec68.len();
                                    let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec68.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result68 = if layout68.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout68);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec68.into_iter().enumerate() {
                                        let base = result68
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t39_0, t39_1) = e;
                                            let vec40 = (t39_0.into_bytes()).into_boxed_slice();
                                            let ptr40 = vec40.as_ptr().cast::<u8>();
                                            let len40 = vec40.len();
                                            ::core::mem::forget(vec40);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len40;
                                            *base.add(0).cast::<*mut u8>() = ptr40.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V67;
                                            match t39_1 {
                                                V67::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes41,
                                                    } = e;
                                                    let vec58 = nodes41;
                                                    let len58 = vec58.len();
                                                    let layout58 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec58.len()
                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result58 = if layout58.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout58).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout58);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec58.into_iter().enumerate() {
                                                        let base = result58
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name42,
                                                                type_: type_42,
                                                            } = e;
                                                            match name42 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec43 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr43 = vec43.as_ptr().cast::<u8>();
                                                                    let len43 = vec43.len();
                                                                    ::core::mem::forget(vec43);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len43;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr43.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V57;
                                                            match type_42 {
                                                                V57::RecordType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec46 = e;
                                                                    let len46 = vec46.len();
                                                                    let layout46 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec46.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result46 = if layout46.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout46).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout46);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec46.into_iter().enumerate() {
                                                                        let base = result46
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t44_0, t44_1) = e;
                                                                            let vec45 = (t44_0.into_bytes()).into_boxed_slice();
                                                                            let ptr45 = vec45.as_ptr().cast::<u8>();
                                                                            let len45 = vec45.len();
                                                                            ::core::mem::forget(vec45);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len45;
                                                                            *base.add(0).cast::<*mut u8>() = ptr45.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t44_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len46;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result46;
                                                                }
                                                                V57::VariantType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec49 = e;
                                                                    let len49 = vec49.len();
                                                                    let layout49 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec49.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result49 = if layout49.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout49).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout49);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec49.into_iter().enumerate() {
                                                                        let base = result49
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t47_0, t47_1) = e;
                                                                            let vec48 = (t47_0.into_bytes()).into_boxed_slice();
                                                                            let ptr48 = vec48.as_ptr().cast::<u8>();
                                                                            let len48 = vec48.len();
                                                                            ::core::mem::forget(vec48);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len48;
                                                                            *base.add(0).cast::<*mut u8>() = ptr48.cast_mut();
                                                                            match t47_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len49;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result49;
                                                                }
                                                                V57::EnumType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec51 = e;
                                                                    let len51 = vec51.len();
                                                                    let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec51.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result51 = if layout51.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout51);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec51.into_iter().enumerate() {
                                                                        let base = result51
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec50 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                            let len50 = vec50.len();
                                                                            ::core::mem::forget(vec50);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len50;
                                                                            *base.add(0).cast::<*mut u8>() = ptr50.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len51;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result51;
                                                                }
                                                                V57::FlagsType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec53 = e;
                                                                    let len53 = vec53.len();
                                                                    let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec53.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result53 = if layout53.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout53);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec53.into_iter().enumerate() {
                                                                        let base = result53
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                            let len52 = vec52.len();
                                                                            ::core::mem::forget(vec52);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len52;
                                                                            *base.add(0).cast::<*mut u8>() = ptr52.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len53;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result53;
                                                                }
                                                                V57::TupleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec54 = (e).into_boxed_slice();
                                                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                                                    let len54 = vec54.len();
                                                                    ::core::mem::forget(vec54);
                                                                    *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len54;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr54.cast_mut();
                                                                }
                                                                V57::ListType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V57::OptionType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V57::ResultType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t55_0, t55_1) = e;
                                                                    match t55_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t55_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V57::PrimU8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V57::PrimU16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V57::PrimU32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V57::PrimU64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V57::PrimS8Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V57::PrimS16Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V57::PrimS32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V57::PrimS64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V57::PrimF32Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V57::PrimF64Type => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V57::PrimCharType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V57::PrimBoolType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V57::PrimStringType => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V57::HandleType(e) => {
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t56_0, t56_1) = e;
                                                                    *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t56_0);
                                                                    *base
                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t56_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len58;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result58;
                                                }
                                                V67::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions59,
                                                    } = e;
                                                    match restrictions59 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec62 = e;
                                                            let len62 = vec62.len();
                                                            let layout62 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec62.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result62 = if layout62.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout62).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout62);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec62.into_iter().enumerate() {
                                                                let base = result62
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code60,
                                                                    } = e;
                                                                    let vec61 = (language_code60.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr61 = vec61.as_ptr().cast::<u8>();
                                                                    let len61 = vec61.len();
                                                                    ::core::mem::forget(vec61);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len61;
                                                                    *base.add(0).cast::<*mut u8>() = ptr61.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len62;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result62;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V67::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions63,
                                                    } = e;
                                                    match restrictions63 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec66 = e;
                                                            let len66 = vec66.len();
                                                            let layout66 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec66.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result66 = if layout66.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout66).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout66);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec66.into_iter().enumerate() {
                                                                let base = result66
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type64,
                                                                    } = e;
                                                                    let vec65 = (mime_type64.into_bytes()).into_boxed_slice();
                                                                    let ptr65 = vec65.as_ptr().cast::<u8>();
                                                                    let len65 = vec65.len();
                                                                    ::core::mem::forget(vec65);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len65;
                                                                    *base.add(0).cast::<*mut u8>() = ptr65.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len66;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result66;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len68;
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result68;
                                }
                            }
                            let vec196 = methods2;
                            let len196 = vec196.len();
                            let layout196 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec196.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result196 = if layout196.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout196).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout196);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec196.into_iter().enumerate() {
                                let base = result196
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::agent::common::AgentMethod {
                                        name: name70,
                                        description: description70,
                                        prompt_hint: prompt_hint70,
                                        input_schema: input_schema70,
                                        output_schema: output_schema70,
                                    } = e;
                                    let vec71 = (name70.into_bytes()).into_boxed_slice();
                                    let ptr71 = vec71.as_ptr().cast::<u8>();
                                    let len71 = vec71.len();
                                    ::core::mem::forget(vec71);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len71;
                                    *base.add(0).cast::<*mut u8>() = ptr71.cast_mut();
                                    let vec72 = (description70.into_bytes()).into_boxed_slice();
                                    let ptr72 = vec72.as_ptr().cast::<u8>();
                                    let len72 = vec72.len();
                                    ::core::mem::forget(vec72);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len72;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr72.cast_mut();
                                    match prompt_hint70 {
                                        Some(e) => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec73 = (e.into_bytes()).into_boxed_slice();
                                            let ptr73 = vec73.as_ptr().cast::<u8>();
                                            let len73 = vec73.len();
                                            ::core::mem::forget(vec73);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len73;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr73.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::golem::agent::common::DataSchema as V134;
                                    match input_schema70 {
                                        V134::Tuple(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec103 = e;
                                            let len103 = vec103.len();
                                            let layout103 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec103.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result103 = if layout103.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout103).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout103);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec103.into_iter().enumerate() {
                                                let base = result103
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t74_0, t74_1) = e;
                                                    let vec75 = (t74_0.into_bytes()).into_boxed_slice();
                                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                                    let len75 = vec75.len();
                                                    ::core::mem::forget(vec75);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len75;
                                                    *base.add(0).cast::<*mut u8>() = ptr75.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V102;
                                                    match t74_1 {
                                                        V102::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes76,
                                                            } = e;
                                                            let vec93 = nodes76;
                                                            let len93 = vec93.len();
                                                            let layout93 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec93.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result93 = if layout93.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout93).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout93);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec93.into_iter().enumerate() {
                                                                let base = result93
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name77,
                                                                        type_: type_77,
                                                                    } = e;
                                                                    match name77 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec78 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr78 = vec78.as_ptr().cast::<u8>();
                                                                            let len78 = vec78.len();
                                                                            ::core::mem::forget(vec78);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len78;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr78.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V92;
                                                                    match type_77 {
                                                                        V92::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec81 = e;
                                                                            let len81 = vec81.len();
                                                                            let layout81 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec81.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result81 = if layout81.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout81).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout81);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec81.into_iter().enumerate() {
                                                                                let base = result81
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t79_0, t79_1) = e;
                                                                                    let vec80 = (t79_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                                    let len80 = vec80.len();
                                                                                    ::core::mem::forget(vec80);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len80;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr80.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t79_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len81;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result81;
                                                                        }
                                                                        V92::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec84 = e;
                                                                            let len84 = vec84.len();
                                                                            let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec84.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result84 = if layout84.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout84);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec84.into_iter().enumerate() {
                                                                                let base = result84
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t82_0, t82_1) = e;
                                                                                    let vec83 = (t82_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr83 = vec83.as_ptr().cast::<u8>();
                                                                                    let len83 = vec83.len();
                                                                                    ::core::mem::forget(vec83);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len83;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr83.cast_mut();
                                                                                    match t82_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len84;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result84;
                                                                        }
                                                                        V92::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec86 = e;
                                                                            let len86 = vec86.len();
                                                                            let layout86 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec86.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result86 = if layout86.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout86).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout86);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec86.into_iter().enumerate() {
                                                                                let base = result86
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec85 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr85 = vec85.as_ptr().cast::<u8>();
                                                                                    let len85 = vec85.len();
                                                                                    ::core::mem::forget(vec85);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len85;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr85.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len86;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result86;
                                                                        }
                                                                        V92::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec88 = e;
                                                                            let len88 = vec88.len();
                                                                            let layout88 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec88.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result88 = if layout88.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout88).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout88);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec88.into_iter().enumerate() {
                                                                                let base = result88
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec87 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr87 = vec87.as_ptr().cast::<u8>();
                                                                                    let len87 = vec87.len();
                                                                                    ::core::mem::forget(vec87);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len87;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr87.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len88;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result88;
                                                                        }
                                                                        V92::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec89 = (e).into_boxed_slice();
                                                                            let ptr89 = vec89.as_ptr().cast::<u8>();
                                                                            let len89 = vec89.len();
                                                                            ::core::mem::forget(vec89);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len89;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr89.cast_mut();
                                                                        }
                                                                        V92::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V92::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V92::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t90_0, t90_1) = e;
                                                                            match t90_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t90_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V92::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V92::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V92::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V92::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V92::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V92::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V92::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V92::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V92::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V92::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V92::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V92::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V92::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V92::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t91_0, t91_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t91_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t91_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len93;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result93;
                                                        }
                                                        V102::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions94,
                                                            } = e;
                                                            match restrictions94 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec97 = e;
                                                                    let len97 = vec97.len();
                                                                    let layout97 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec97.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result97 = if layout97.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout97).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout97);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec97.into_iter().enumerate() {
                                                                        let base = result97
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code95,
                                                                            } = e;
                                                                            let vec96 = (language_code95.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr96 = vec96.as_ptr().cast::<u8>();
                                                                            let len96 = vec96.len();
                                                                            ::core::mem::forget(vec96);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len96;
                                                                            *base.add(0).cast::<*mut u8>() = ptr96.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len97;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result97;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V102::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions98,
                                                            } = e;
                                                            match restrictions98 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec101 = e;
                                                                    let len101 = vec101.len();
                                                                    let layout101 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec101.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result101 = if layout101.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout101).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout101);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec101.into_iter().enumerate() {
                                                                        let base = result101
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type99,
                                                                            } = e;
                                                                            let vec100 = (mime_type99.into_bytes()).into_boxed_slice();
                                                                            let ptr100 = vec100.as_ptr().cast::<u8>();
                                                                            let len100 = vec100.len();
                                                                            ::core::mem::forget(vec100);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len100;
                                                                            *base.add(0).cast::<*mut u8>() = ptr100.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len101;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result101;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len103;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result103;
                                        }
                                        V134::Multimodal(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec133 = e;
                                            let len133 = vec133.len();
                                            let layout133 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec133.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result133 = if layout133.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout133).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout133);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec133.into_iter().enumerate() {
                                                let base = result133
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t104_0, t104_1) = e;
                                                    let vec105 = (t104_0.into_bytes()).into_boxed_slice();
                                                    let ptr105 = vec105.as_ptr().cast::<u8>();
                                                    let len105 = vec105.len();
                                                    ::core::mem::forget(vec105);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len105;
                                                    *base.add(0).cast::<*mut u8>() = ptr105.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V132;
                                                    match t104_1 {
                                                        V132::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes106,
                                                            } = e;
                                                            let vec123 = nodes106;
                                                            let len123 = vec123.len();
                                                            let layout123 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec123.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result123 = if layout123.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout123).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout123);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec123.into_iter().enumerate() {
                                                                let base = result123
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name107,
                                                                        type_: type_107,
                                                                    } = e;
                                                                    match name107 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec108 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr108 = vec108.as_ptr().cast::<u8>();
                                                                            let len108 = vec108.len();
                                                                            ::core::mem::forget(vec108);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len108;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr108.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V122;
                                                                    match type_107 {
                                                                        V122::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec111 = e;
                                                                            let len111 = vec111.len();
                                                                            let layout111 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec111.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result111 = if layout111.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout111).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout111);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec111.into_iter().enumerate() {
                                                                                let base = result111
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t109_0, t109_1) = e;
                                                                                    let vec110 = (t109_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr110 = vec110.as_ptr().cast::<u8>();
                                                                                    let len110 = vec110.len();
                                                                                    ::core::mem::forget(vec110);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len110;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr110.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t109_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len111;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result111;
                                                                        }
                                                                        V122::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec114 = e;
                                                                            let len114 = vec114.len();
                                                                            let layout114 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec114.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result114 = if layout114.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout114).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout114);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec114.into_iter().enumerate() {
                                                                                let base = result114
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t112_0, t112_1) = e;
                                                                                    let vec113 = (t112_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr113 = vec113.as_ptr().cast::<u8>();
                                                                                    let len113 = vec113.len();
                                                                                    ::core::mem::forget(vec113);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len113;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr113.cast_mut();
                                                                                    match t112_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len114;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result114;
                                                                        }
                                                                        V122::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec116 = e;
                                                                            let len116 = vec116.len();
                                                                            let layout116 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec116.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result116 = if layout116.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout116).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout116);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec116.into_iter().enumerate() {
                                                                                let base = result116
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec115 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr115 = vec115.as_ptr().cast::<u8>();
                                                                                    let len115 = vec115.len();
                                                                                    ::core::mem::forget(vec115);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len115;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr115.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len116;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result116;
                                                                        }
                                                                        V122::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec118 = e;
                                                                            let len118 = vec118.len();
                                                                            let layout118 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec118.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result118 = if layout118.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout118).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout118);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec118.into_iter().enumerate() {
                                                                                let base = result118
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec117 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr117 = vec117.as_ptr().cast::<u8>();
                                                                                    let len117 = vec117.len();
                                                                                    ::core::mem::forget(vec117);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len117;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr117.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len118;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result118;
                                                                        }
                                                                        V122::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec119 = (e).into_boxed_slice();
                                                                            let ptr119 = vec119.as_ptr().cast::<u8>();
                                                                            let len119 = vec119.len();
                                                                            ::core::mem::forget(vec119);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len119;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr119.cast_mut();
                                                                        }
                                                                        V122::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V122::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V122::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t120_0, t120_1) = e;
                                                                            match t120_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t120_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V122::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V122::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V122::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V122::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V122::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V122::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V122::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V122::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V122::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V122::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V122::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V122::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V122::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V122::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t121_0, t121_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t121_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t121_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len123;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result123;
                                                        }
                                                        V132::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions124,
                                                            } = e;
                                                            match restrictions124 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec127 = e;
                                                                    let len127 = vec127.len();
                                                                    let layout127 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec127.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result127 = if layout127.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout127).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout127);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec127.into_iter().enumerate() {
                                                                        let base = result127
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code125,
                                                                            } = e;
                                                                            let vec126 = (language_code125.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr126 = vec126.as_ptr().cast::<u8>();
                                                                            let len126 = vec126.len();
                                                                            ::core::mem::forget(vec126);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len126;
                                                                            *base.add(0).cast::<*mut u8>() = ptr126.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len127;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result127;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V132::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions128,
                                                            } = e;
                                                            match restrictions128 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec131 = e;
                                                                    let len131 = vec131.len();
                                                                    let layout131 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec131.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result131 = if layout131.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout131).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout131);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec131.into_iter().enumerate() {
                                                                        let base = result131
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type129,
                                                                            } = e;
                                                                            let vec130 = (mime_type129.into_bytes()).into_boxed_slice();
                                                                            let ptr130 = vec130.as_ptr().cast::<u8>();
                                                                            let len130 = vec130.len();
                                                                            ::core::mem::forget(vec130);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len130;
                                                                            *base.add(0).cast::<*mut u8>() = ptr130.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len131;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result131;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len133;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result133;
                                        }
                                    }
                                    use super::super::super::super::golem::agent::common::DataSchema as V195;
                                    match output_schema70 {
                                        V195::Tuple(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec164 = e;
                                            let len164 = vec164.len();
                                            let layout164 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec164.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result164 = if layout164.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout164).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout164);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec164.into_iter().enumerate() {
                                                let base = result164
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t135_0, t135_1) = e;
                                                    let vec136 = (t135_0.into_bytes()).into_boxed_slice();
                                                    let ptr136 = vec136.as_ptr().cast::<u8>();
                                                    let len136 = vec136.len();
                                                    ::core::mem::forget(vec136);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len136;
                                                    *base.add(0).cast::<*mut u8>() = ptr136.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V163;
                                                    match t135_1 {
                                                        V163::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes137,
                                                            } = e;
                                                            let vec154 = nodes137;
                                                            let len154 = vec154.len();
                                                            let layout154 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec154.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result154 = if layout154.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout154).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout154);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec154.into_iter().enumerate() {
                                                                let base = result154
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name138,
                                                                        type_: type_138,
                                                                    } = e;
                                                                    match name138 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec139 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr139 = vec139.as_ptr().cast::<u8>();
                                                                            let len139 = vec139.len();
                                                                            ::core::mem::forget(vec139);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len139;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr139.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V153;
                                                                    match type_138 {
                                                                        V153::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec142 = e;
                                                                            let len142 = vec142.len();
                                                                            let layout142 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec142.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result142 = if layout142.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout142).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout142);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec142.into_iter().enumerate() {
                                                                                let base = result142
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t140_0, t140_1) = e;
                                                                                    let vec141 = (t140_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr141 = vec141.as_ptr().cast::<u8>();
                                                                                    let len141 = vec141.len();
                                                                                    ::core::mem::forget(vec141);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len141;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr141.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t140_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len142;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result142;
                                                                        }
                                                                        V153::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec145 = e;
                                                                            let len145 = vec145.len();
                                                                            let layout145 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec145.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result145 = if layout145.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout145).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout145);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec145.into_iter().enumerate() {
                                                                                let base = result145
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t143_0, t143_1) = e;
                                                                                    let vec144 = (t143_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr144 = vec144.as_ptr().cast::<u8>();
                                                                                    let len144 = vec144.len();
                                                                                    ::core::mem::forget(vec144);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len144;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr144.cast_mut();
                                                                                    match t143_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len145;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result145;
                                                                        }
                                                                        V153::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec147 = e;
                                                                            let len147 = vec147.len();
                                                                            let layout147 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec147.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result147 = if layout147.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout147).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout147);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec147.into_iter().enumerate() {
                                                                                let base = result147
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec146 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr146 = vec146.as_ptr().cast::<u8>();
                                                                                    let len146 = vec146.len();
                                                                                    ::core::mem::forget(vec146);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len146;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr146.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len147;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result147;
                                                                        }
                                                                        V153::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec149 = e;
                                                                            let len149 = vec149.len();
                                                                            let layout149 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec149.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result149 = if layout149.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout149).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout149);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec149.into_iter().enumerate() {
                                                                                let base = result149
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec148 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr148 = vec148.as_ptr().cast::<u8>();
                                                                                    let len148 = vec148.len();
                                                                                    ::core::mem::forget(vec148);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len148;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr148.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len149;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result149;
                                                                        }
                                                                        V153::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec150 = (e).into_boxed_slice();
                                                                            let ptr150 = vec150.as_ptr().cast::<u8>();
                                                                            let len150 = vec150.len();
                                                                            ::core::mem::forget(vec150);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len150;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr150.cast_mut();
                                                                        }
                                                                        V153::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V153::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V153::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t151_0, t151_1) = e;
                                                                            match t151_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t151_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V153::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V153::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V153::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V153::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V153::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V153::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V153::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V153::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V153::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V153::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V153::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V153::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V153::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V153::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t152_0, t152_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t152_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t152_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len154;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result154;
                                                        }
                                                        V163::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions155,
                                                            } = e;
                                                            match restrictions155 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec158 = e;
                                                                    let len158 = vec158.len();
                                                                    let layout158 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec158.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result158 = if layout158.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout158).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout158);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec158.into_iter().enumerate() {
                                                                        let base = result158
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code156,
                                                                            } = e;
                                                                            let vec157 = (language_code156.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr157 = vec157.as_ptr().cast::<u8>();
                                                                            let len157 = vec157.len();
                                                                            ::core::mem::forget(vec157);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len157;
                                                                            *base.add(0).cast::<*mut u8>() = ptr157.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len158;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result158;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V163::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions159,
                                                            } = e;
                                                            match restrictions159 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec162 = e;
                                                                    let len162 = vec162.len();
                                                                    let layout162 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec162.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result162 = if layout162.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout162).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout162);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec162.into_iter().enumerate() {
                                                                        let base = result162
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type160,
                                                                            } = e;
                                                                            let vec161 = (mime_type160.into_bytes()).into_boxed_slice();
                                                                            let ptr161 = vec161.as_ptr().cast::<u8>();
                                                                            let len161 = vec161.len();
                                                                            ::core::mem::forget(vec161);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len161;
                                                                            *base.add(0).cast::<*mut u8>() = ptr161.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len162;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result162;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len164;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result164;
                                        }
                                        V195::Multimodal(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec194 = e;
                                            let len194 = vec194.len();
                                            let layout194 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec194.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result194 = if layout194.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout194).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout194);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec194.into_iter().enumerate() {
                                                let base = result194
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t165_0, t165_1) = e;
                                                    let vec166 = (t165_0.into_bytes()).into_boxed_slice();
                                                    let ptr166 = vec166.as_ptr().cast::<u8>();
                                                    let len166 = vec166.len();
                                                    ::core::mem::forget(vec166);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len166;
                                                    *base.add(0).cast::<*mut u8>() = ptr166.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V193;
                                                    match t165_1 {
                                                        V193::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes167,
                                                            } = e;
                                                            let vec184 = nodes167;
                                                            let len184 = vec184.len();
                                                            let layout184 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec184.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result184 = if layout184.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout184).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout184);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec184.into_iter().enumerate() {
                                                                let base = result184
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name168,
                                                                        type_: type_168,
                                                                    } = e;
                                                                    match name168 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec169 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr169 = vec169.as_ptr().cast::<u8>();
                                                                            let len169 = vec169.len();
                                                                            ::core::mem::forget(vec169);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len169;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr169.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V183;
                                                                    match type_168 {
                                                                        V183::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec172 = e;
                                                                            let len172 = vec172.len();
                                                                            let layout172 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec172.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result172 = if layout172.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout172).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout172);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec172.into_iter().enumerate() {
                                                                                let base = result172
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t170_0, t170_1) = e;
                                                                                    let vec171 = (t170_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr171 = vec171.as_ptr().cast::<u8>();
                                                                                    let len171 = vec171.len();
                                                                                    ::core::mem::forget(vec171);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len171;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr171.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t170_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len172;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result172;
                                                                        }
                                                                        V183::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec175 = e;
                                                                            let len175 = vec175.len();
                                                                            let layout175 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec175.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result175 = if layout175.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout175).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout175);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec175.into_iter().enumerate() {
                                                                                let base = result175
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t173_0, t173_1) = e;
                                                                                    let vec174 = (t173_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr174 = vec174.as_ptr().cast::<u8>();
                                                                                    let len174 = vec174.len();
                                                                                    ::core::mem::forget(vec174);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len174;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr174.cast_mut();
                                                                                    match t173_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len175;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result175;
                                                                        }
                                                                        V183::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec177 = e;
                                                                            let len177 = vec177.len();
                                                                            let layout177 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec177.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result177 = if layout177.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout177).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout177);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec177.into_iter().enumerate() {
                                                                                let base = result177
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec176 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr176 = vec176.as_ptr().cast::<u8>();
                                                                                    let len176 = vec176.len();
                                                                                    ::core::mem::forget(vec176);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len176;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr176.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len177;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result177;
                                                                        }
                                                                        V183::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec179 = e;
                                                                            let len179 = vec179.len();
                                                                            let layout179 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec179.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result179 = if layout179.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout179).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout179);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec179.into_iter().enumerate() {
                                                                                let base = result179
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec178 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr178 = vec178.as_ptr().cast::<u8>();
                                                                                    let len178 = vec178.len();
                                                                                    ::core::mem::forget(vec178);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len178;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr178.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len179;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result179;
                                                                        }
                                                                        V183::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec180 = (e).into_boxed_slice();
                                                                            let ptr180 = vec180.as_ptr().cast::<u8>();
                                                                            let len180 = vec180.len();
                                                                            ::core::mem::forget(vec180);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len180;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr180.cast_mut();
                                                                        }
                                                                        V183::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V183::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V183::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t181_0, t181_1) = e;
                                                                            match t181_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t181_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V183::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V183::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V183::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V183::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V183::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V183::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V183::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V183::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V183::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V183::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V183::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V183::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V183::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V183::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t182_0, t182_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t182_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t182_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len184;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result184;
                                                        }
                                                        V193::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions185,
                                                            } = e;
                                                            match restrictions185 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec188 = e;
                                                                    let len188 = vec188.len();
                                                                    let layout188 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec188.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result188 = if layout188.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout188).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout188);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec188.into_iter().enumerate() {
                                                                        let base = result188
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code186,
                                                                            } = e;
                                                                            let vec187 = (language_code186.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr187 = vec187.as_ptr().cast::<u8>();
                                                                            let len187 = vec187.len();
                                                                            ::core::mem::forget(vec187);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len187;
                                                                            *base.add(0).cast::<*mut u8>() = ptr187.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len188;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result188;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V193::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions189,
                                                            } = e;
                                                            match restrictions189 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec192 = e;
                                                                    let len192 = vec192.len();
                                                                    let layout192 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec192.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result192 = if layout192.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout192).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout192);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec192.into_iter().enumerate() {
                                                                        let base = result192
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type190,
                                                                            } = e;
                                                                            let vec191 = (mime_type190.into_bytes()).into_boxed_slice();
                                                                            let ptr191 = vec191.as_ptr().cast::<u8>();
                                                                            let len191 = vec191.len();
                                                                            ::core::mem::forget(vec191);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len191;
                                                                            *base.add(0).cast::<*mut u8>() = ptr191.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len192;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result192;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len194;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result194;
                                        }
                                    }
                                }
                            }
                            *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len196;
                            *base
                                .add(15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result196;
                            let vec392 = dependencies2;
                            let len392 = vec392.len();
                            let layout392 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec392.len() * (18 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result392 = if layout392.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout392).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout392);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec392.into_iter().enumerate() {
                                let base = result392
                                    .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::agent::common::AgentDependency {
                                        type_name: type_name197,
                                        description: description197,
                                        constructor: constructor197,
                                        methods: methods197,
                                    } = e;
                                    let vec198 = (type_name197.into_bytes()).into_boxed_slice();
                                    let ptr198 = vec198.as_ptr().cast::<u8>();
                                    let len198 = vec198.len();
                                    ::core::mem::forget(vec198);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len198;
                                    *base.add(0).cast::<*mut u8>() = ptr198.cast_mut();
                                    match description197 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec199 = (e.into_bytes()).into_boxed_slice();
                                            let ptr199 = vec199.as_ptr().cast::<u8>();
                                            let len199 = vec199.len();
                                            ::core::mem::forget(vec199);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len199;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr199.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let super::super::super::super::golem::agent::common::AgentConstructor {
                                        name: name200,
                                        description: description200,
                                        prompt_hint: prompt_hint200,
                                        input_schema: input_schema200,
                                    } = constructor197;
                                    match name200 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec201 = (e.into_bytes()).into_boxed_slice();
                                            let ptr201 = vec201.as_ptr().cast::<u8>();
                                            let len201 = vec201.len();
                                            ::core::mem::forget(vec201);
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len201;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr201.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec202 = (description200.into_bytes())
                                        .into_boxed_slice();
                                    let ptr202 = vec202.as_ptr().cast::<u8>();
                                    let len202 = vec202.len();
                                    ::core::mem::forget(vec202);
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len202;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr202.cast_mut();
                                    match prompt_hint200 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec203 = (e.into_bytes()).into_boxed_slice();
                                            let ptr203 = vec203.as_ptr().cast::<u8>();
                                            let len203 = vec203.len();
                                            ::core::mem::forget(vec203);
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len203;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr203.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::golem::agent::common::DataSchema as V264;
                                    match input_schema200 {
                                        V264::Tuple(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec233 = e;
                                            let len233 = vec233.len();
                                            let layout233 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec233.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result233 = if layout233.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout233).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout233);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec233.into_iter().enumerate() {
                                                let base = result233
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t204_0, t204_1) = e;
                                                    let vec205 = (t204_0.into_bytes()).into_boxed_slice();
                                                    let ptr205 = vec205.as_ptr().cast::<u8>();
                                                    let len205 = vec205.len();
                                                    ::core::mem::forget(vec205);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len205;
                                                    *base.add(0).cast::<*mut u8>() = ptr205.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V232;
                                                    match t204_1 {
                                                        V232::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes206,
                                                            } = e;
                                                            let vec223 = nodes206;
                                                            let len223 = vec223.len();
                                                            let layout223 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec223.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result223 = if layout223.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout223).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout223);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec223.into_iter().enumerate() {
                                                                let base = result223
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name207,
                                                                        type_: type_207,
                                                                    } = e;
                                                                    match name207 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec208 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr208 = vec208.as_ptr().cast::<u8>();
                                                                            let len208 = vec208.len();
                                                                            ::core::mem::forget(vec208);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len208;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr208.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V222;
                                                                    match type_207 {
                                                                        V222::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec211 = e;
                                                                            let len211 = vec211.len();
                                                                            let layout211 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec211.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result211 = if layout211.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout211).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout211);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec211.into_iter().enumerate() {
                                                                                let base = result211
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t209_0, t209_1) = e;
                                                                                    let vec210 = (t209_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr210 = vec210.as_ptr().cast::<u8>();
                                                                                    let len210 = vec210.len();
                                                                                    ::core::mem::forget(vec210);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len210;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr210.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t209_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len211;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result211;
                                                                        }
                                                                        V222::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec214 = e;
                                                                            let len214 = vec214.len();
                                                                            let layout214 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec214.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result214 = if layout214.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout214).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout214);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec214.into_iter().enumerate() {
                                                                                let base = result214
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t212_0, t212_1) = e;
                                                                                    let vec213 = (t212_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr213 = vec213.as_ptr().cast::<u8>();
                                                                                    let len213 = vec213.len();
                                                                                    ::core::mem::forget(vec213);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len213;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr213.cast_mut();
                                                                                    match t212_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len214;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result214;
                                                                        }
                                                                        V222::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec216 = e;
                                                                            let len216 = vec216.len();
                                                                            let layout216 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec216.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result216 = if layout216.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout216).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout216);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec216.into_iter().enumerate() {
                                                                                let base = result216
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec215 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                                    let len215 = vec215.len();
                                                                                    ::core::mem::forget(vec215);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len215;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr215.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len216;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result216;
                                                                        }
                                                                        V222::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec218 = e;
                                                                            let len218 = vec218.len();
                                                                            let layout218 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec218.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result218 = if layout218.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout218).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout218);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec218.into_iter().enumerate() {
                                                                                let base = result218
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec217 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr217 = vec217.as_ptr().cast::<u8>();
                                                                                    let len217 = vec217.len();
                                                                                    ::core::mem::forget(vec217);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len217;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr217.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len218;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result218;
                                                                        }
                                                                        V222::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec219 = (e).into_boxed_slice();
                                                                            let ptr219 = vec219.as_ptr().cast::<u8>();
                                                                            let len219 = vec219.len();
                                                                            ::core::mem::forget(vec219);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len219;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr219.cast_mut();
                                                                        }
                                                                        V222::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V222::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V222::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t220_0, t220_1) = e;
                                                                            match t220_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t220_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V222::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V222::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V222::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V222::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V222::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V222::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V222::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V222::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V222::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V222::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V222::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V222::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V222::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V222::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t221_0, t221_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t221_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t221_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len223;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result223;
                                                        }
                                                        V232::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions224,
                                                            } = e;
                                                            match restrictions224 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec227 = e;
                                                                    let len227 = vec227.len();
                                                                    let layout227 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec227.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result227 = if layout227.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout227).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout227);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec227.into_iter().enumerate() {
                                                                        let base = result227
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code225,
                                                                            } = e;
                                                                            let vec226 = (language_code225.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr226 = vec226.as_ptr().cast::<u8>();
                                                                            let len226 = vec226.len();
                                                                            ::core::mem::forget(vec226);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len226;
                                                                            *base.add(0).cast::<*mut u8>() = ptr226.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len227;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result227;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V232::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions228,
                                                            } = e;
                                                            match restrictions228 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec231 = e;
                                                                    let len231 = vec231.len();
                                                                    let layout231 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec231.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result231 = if layout231.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout231).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout231);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec231.into_iter().enumerate() {
                                                                        let base = result231
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type229,
                                                                            } = e;
                                                                            let vec230 = (mime_type229.into_bytes()).into_boxed_slice();
                                                                            let ptr230 = vec230.as_ptr().cast::<u8>();
                                                                            let len230 = vec230.len();
                                                                            ::core::mem::forget(vec230);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len230;
                                                                            *base.add(0).cast::<*mut u8>() = ptr230.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len231;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result231;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len233;
                                            *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result233;
                                        }
                                        V264::Multimodal(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec263 = e;
                                            let len263 = vec263.len();
                                            let layout263 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec263.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result263 = if layout263.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout263).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout263);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec263.into_iter().enumerate() {
                                                let base = result263
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t234_0, t234_1) = e;
                                                    let vec235 = (t234_0.into_bytes()).into_boxed_slice();
                                                    let ptr235 = vec235.as_ptr().cast::<u8>();
                                                    let len235 = vec235.len();
                                                    ::core::mem::forget(vec235);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len235;
                                                    *base.add(0).cast::<*mut u8>() = ptr235.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V262;
                                                    match t234_1 {
                                                        V262::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes236,
                                                            } = e;
                                                            let vec253 = nodes236;
                                                            let len253 = vec253.len();
                                                            let layout253 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec253.len()
                                                                    * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result253 = if layout253.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout253).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout253);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec253.into_iter().enumerate() {
                                                                let base = result253
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name237,
                                                                        type_: type_237,
                                                                    } = e;
                                                                    match name237 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec238 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr238 = vec238.as_ptr().cast::<u8>();
                                                                            let len238 = vec238.len();
                                                                            ::core::mem::forget(vec238);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len238;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr238.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V252;
                                                                    match type_237 {
                                                                        V252::RecordType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec241 = e;
                                                                            let len241 = vec241.len();
                                                                            let layout241 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec241.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result241 = if layout241.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout241).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout241);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec241.into_iter().enumerate() {
                                                                                let base = result241
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t239_0, t239_1) = e;
                                                                                    let vec240 = (t239_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr240 = vec240.as_ptr().cast::<u8>();
                                                                                    let len240 = vec240.len();
                                                                                    ::core::mem::forget(vec240);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len240;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr240.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t239_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len241;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result241;
                                                                        }
                                                                        V252::VariantType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec244 = e;
                                                                            let len244 = vec244.len();
                                                                            let layout244 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec244.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result244 = if layout244.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout244).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout244);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec244.into_iter().enumerate() {
                                                                                let base = result244
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t242_0, t242_1) = e;
                                                                                    let vec243 = (t242_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr243 = vec243.as_ptr().cast::<u8>();
                                                                                    let len243 = vec243.len();
                                                                                    ::core::mem::forget(vec243);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len243;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr243.cast_mut();
                                                                                    match t242_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len244;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result244;
                                                                        }
                                                                        V252::EnumType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec246 = e;
                                                                            let len246 = vec246.len();
                                                                            let layout246 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec246.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result246 = if layout246.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout246).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout246);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec246.into_iter().enumerate() {
                                                                                let base = result246
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec245 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr245 = vec245.as_ptr().cast::<u8>();
                                                                                    let len245 = vec245.len();
                                                                                    ::core::mem::forget(vec245);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len245;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr245.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len246;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result246;
                                                                        }
                                                                        V252::FlagsType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec248 = e;
                                                                            let len248 = vec248.len();
                                                                            let layout248 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec248.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result248 = if layout248.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout248).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout248);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec248.into_iter().enumerate() {
                                                                                let base = result248
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec247 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr247 = vec247.as_ptr().cast::<u8>();
                                                                                    let len247 = vec247.len();
                                                                                    ::core::mem::forget(vec247);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len247;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr247.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len248;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result248;
                                                                        }
                                                                        V252::TupleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec249 = (e).into_boxed_slice();
                                                                            let ptr249 = vec249.as_ptr().cast::<u8>();
                                                                            let len249 = vec249.len();
                                                                            ::core::mem::forget(vec249);
                                                                            *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len249;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr249.cast_mut();
                                                                        }
                                                                        V252::ListType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V252::OptionType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V252::ResultType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t250_0, t250_1) = e;
                                                                            match t250_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t250_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V252::PrimU8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V252::PrimU16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V252::PrimU32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V252::PrimU64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V252::PrimS8Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V252::PrimS16Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V252::PrimS32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V252::PrimS64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V252::PrimF32Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V252::PrimF64Type => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V252::PrimCharType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V252::PrimBoolType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V252::PrimStringType => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V252::HandleType(e) => {
                                                                            *base
                                                                                .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t251_0, t251_1) = e;
                                                                            *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t251_0);
                                                                            *base
                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t251_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len253;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result253;
                                                        }
                                                        V262::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions254,
                                                            } = e;
                                                            match restrictions254 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec257 = e;
                                                                    let len257 = vec257.len();
                                                                    let layout257 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec257.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result257 = if layout257.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout257).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout257);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec257.into_iter().enumerate() {
                                                                        let base = result257
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code255,
                                                                            } = e;
                                                                            let vec256 = (language_code255.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr256 = vec256.as_ptr().cast::<u8>();
                                                                            let len256 = vec256.len();
                                                                            ::core::mem::forget(vec256);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len256;
                                                                            *base.add(0).cast::<*mut u8>() = ptr256.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len257;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result257;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V262::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions258,
                                                            } = e;
                                                            match restrictions258 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec261 = e;
                                                                    let len261 = vec261.len();
                                                                    let layout261 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec261.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result261 = if layout261.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout261).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout261);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec261.into_iter().enumerate() {
                                                                        let base = result261
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type259,
                                                                            } = e;
                                                                            let vec260 = (mime_type259.into_bytes()).into_boxed_slice();
                                                                            let ptr260 = vec260.as_ptr().cast::<u8>();
                                                                            let len260 = vec260.len();
                                                                            ::core::mem::forget(vec260);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len260;
                                                                            *base.add(0).cast::<*mut u8>() = ptr260.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len261;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result261;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len263;
                                            *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result263;
                                        }
                                    }
                                    let vec391 = methods197;
                                    let len391 = vec391.len();
                                    let layout391 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec391.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result391 = if layout391.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout391).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout391);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec391.into_iter().enumerate() {
                                        let base = result391
                                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::agent::common::AgentMethod {
                                                name: name265,
                                                description: description265,
                                                prompt_hint: prompt_hint265,
                                                input_schema: input_schema265,
                                                output_schema: output_schema265,
                                            } = e;
                                            let vec266 = (name265.into_bytes()).into_boxed_slice();
                                            let ptr266 = vec266.as_ptr().cast::<u8>();
                                            let len266 = vec266.len();
                                            ::core::mem::forget(vec266);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len266;
                                            *base.add(0).cast::<*mut u8>() = ptr266.cast_mut();
                                            let vec267 = (description265.into_bytes())
                                                .into_boxed_slice();
                                            let ptr267 = vec267.as_ptr().cast::<u8>();
                                            let len267 = vec267.len();
                                            ::core::mem::forget(vec267);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len267;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr267.cast_mut();
                                            match prompt_hint265 {
                                                Some(e) => {
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec268 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr268 = vec268.as_ptr().cast::<u8>();
                                                    let len268 = vec268.len();
                                                    ::core::mem::forget(vec268);
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len268;
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr268.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::golem::agent::common::DataSchema as V329;
                                            match input_schema265 {
                                                V329::Tuple(e) => {
                                                    *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec298 = e;
                                                    let len298 = vec298.len();
                                                    let layout298 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec298.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result298 = if layout298.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout298).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout298);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec298.into_iter().enumerate() {
                                                        let base = result298
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t269_0, t269_1) = e;
                                                            let vec270 = (t269_0.into_bytes()).into_boxed_slice();
                                                            let ptr270 = vec270.as_ptr().cast::<u8>();
                                                            let len270 = vec270.len();
                                                            ::core::mem::forget(vec270);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len270;
                                                            *base.add(0).cast::<*mut u8>() = ptr270.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V297;
                                                            match t269_1 {
                                                                V297::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes271,
                                                                    } = e;
                                                                    let vec288 = nodes271;
                                                                    let len288 = vec288.len();
                                                                    let layout288 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec288.len()
                                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result288 = if layout288.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout288).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout288);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec288.into_iter().enumerate() {
                                                                        let base = result288
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name272,
                                                                                type_: type_272,
                                                                            } = e;
                                                                            match name272 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec273 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr273 = vec273.as_ptr().cast::<u8>();
                                                                                    let len273 = vec273.len();
                                                                                    ::core::mem::forget(vec273);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len273;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr273.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V287;
                                                                            match type_272 {
                                                                                V287::RecordType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec276 = e;
                                                                                    let len276 = vec276.len();
                                                                                    let layout276 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec276.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result276 = if layout276.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout276).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout276);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec276.into_iter().enumerate() {
                                                                                        let base = result276
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t274_0, t274_1) = e;
                                                                                            let vec275 = (t274_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr275 = vec275.as_ptr().cast::<u8>();
                                                                                            let len275 = vec275.len();
                                                                                            ::core::mem::forget(vec275);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len275;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr275.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t274_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len276;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result276;
                                                                                }
                                                                                V287::VariantType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec279 = e;
                                                                                    let len279 = vec279.len();
                                                                                    let layout279 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec279.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result279 = if layout279.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout279).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout279);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec279.into_iter().enumerate() {
                                                                                        let base = result279
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t277_0, t277_1) = e;
                                                                                            let vec278 = (t277_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr278 = vec278.as_ptr().cast::<u8>();
                                                                                            let len278 = vec278.len();
                                                                                            ::core::mem::forget(vec278);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len278;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr278.cast_mut();
                                                                                            match t277_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len279;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result279;
                                                                                }
                                                                                V287::EnumType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec281 = e;
                                                                                    let len281 = vec281.len();
                                                                                    let layout281 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec281.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result281 = if layout281.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout281).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout281);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec281.into_iter().enumerate() {
                                                                                        let base = result281
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec280 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr280 = vec280.as_ptr().cast::<u8>();
                                                                                            let len280 = vec280.len();
                                                                                            ::core::mem::forget(vec280);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len280;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr280.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len281;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result281;
                                                                                }
                                                                                V287::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec283 = e;
                                                                                    let len283 = vec283.len();
                                                                                    let layout283 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec283.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result283 = if layout283.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout283).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout283);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec283.into_iter().enumerate() {
                                                                                        let base = result283
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec282 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr282 = vec282.as_ptr().cast::<u8>();
                                                                                            let len282 = vec282.len();
                                                                                            ::core::mem::forget(vec282);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len282;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr282.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len283;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result283;
                                                                                }
                                                                                V287::TupleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec284 = (e).into_boxed_slice();
                                                                                    let ptr284 = vec284.as_ptr().cast::<u8>();
                                                                                    let len284 = vec284.len();
                                                                                    ::core::mem::forget(vec284);
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len284;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr284.cast_mut();
                                                                                }
                                                                                V287::ListType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V287::OptionType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V287::ResultType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t285_0, t285_1) = e;
                                                                                    match t285_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t285_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V287::PrimU8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V287::PrimU16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V287::PrimU32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V287::PrimU64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V287::PrimS8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V287::PrimS16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V287::PrimS32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V287::PrimS64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V287::PrimF32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V287::PrimF64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V287::PrimCharType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V287::PrimBoolType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V287::PrimStringType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V287::HandleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t286_0, t286_1) = e;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t286_0);
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t286_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len288;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result288;
                                                                }
                                                                V297::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions289,
                                                                    } = e;
                                                                    match restrictions289 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec292 = e;
                                                                            let len292 = vec292.len();
                                                                            let layout292 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec292.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result292 = if layout292.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout292).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout292);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec292.into_iter().enumerate() {
                                                                                let base = result292
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code290,
                                                                                    } = e;
                                                                                    let vec291 = (language_code290.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr291 = vec291.as_ptr().cast::<u8>();
                                                                                    let len291 = vec291.len();
                                                                                    ::core::mem::forget(vec291);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len291;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr291.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len292;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result292;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V297::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions293,
                                                                    } = e;
                                                                    match restrictions293 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec296 = e;
                                                                            let len296 = vec296.len();
                                                                            let layout296 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec296.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result296 = if layout296.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout296).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout296);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec296.into_iter().enumerate() {
                                                                                let base = result296
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type294,
                                                                                    } = e;
                                                                                    let vec295 = (mime_type294.into_bytes()).into_boxed_slice();
                                                                                    let ptr295 = vec295.as_ptr().cast::<u8>();
                                                                                    let len295 = vec295.len();
                                                                                    ::core::mem::forget(vec295);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len295;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr295.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len296;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result296;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len298;
                                                    *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result298;
                                                }
                                                V329::Multimodal(e) => {
                                                    *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec328 = e;
                                                    let len328 = vec328.len();
                                                    let layout328 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec328.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result328 = if layout328.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout328).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout328);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec328.into_iter().enumerate() {
                                                        let base = result328
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t299_0, t299_1) = e;
                                                            let vec300 = (t299_0.into_bytes()).into_boxed_slice();
                                                            let ptr300 = vec300.as_ptr().cast::<u8>();
                                                            let len300 = vec300.len();
                                                            ::core::mem::forget(vec300);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len300;
                                                            *base.add(0).cast::<*mut u8>() = ptr300.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V327;
                                                            match t299_1 {
                                                                V327::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes301,
                                                                    } = e;
                                                                    let vec318 = nodes301;
                                                                    let len318 = vec318.len();
                                                                    let layout318 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec318.len()
                                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result318 = if layout318.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout318).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout318);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec318.into_iter().enumerate() {
                                                                        let base = result318
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name302,
                                                                                type_: type_302,
                                                                            } = e;
                                                                            match name302 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec303 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr303 = vec303.as_ptr().cast::<u8>();
                                                                                    let len303 = vec303.len();
                                                                                    ::core::mem::forget(vec303);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len303;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr303.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V317;
                                                                            match type_302 {
                                                                                V317::RecordType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec306 = e;
                                                                                    let len306 = vec306.len();
                                                                                    let layout306 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec306.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result306 = if layout306.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout306).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout306);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec306.into_iter().enumerate() {
                                                                                        let base = result306
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t304_0, t304_1) = e;
                                                                                            let vec305 = (t304_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr305 = vec305.as_ptr().cast::<u8>();
                                                                                            let len305 = vec305.len();
                                                                                            ::core::mem::forget(vec305);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len305;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr305.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t304_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len306;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result306;
                                                                                }
                                                                                V317::VariantType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec309 = e;
                                                                                    let len309 = vec309.len();
                                                                                    let layout309 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec309.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result309 = if layout309.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout309).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout309);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec309.into_iter().enumerate() {
                                                                                        let base = result309
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t307_0, t307_1) = e;
                                                                                            let vec308 = (t307_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr308 = vec308.as_ptr().cast::<u8>();
                                                                                            let len308 = vec308.len();
                                                                                            ::core::mem::forget(vec308);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len308;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr308.cast_mut();
                                                                                            match t307_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len309;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result309;
                                                                                }
                                                                                V317::EnumType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec311 = e;
                                                                                    let len311 = vec311.len();
                                                                                    let layout311 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec311.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result311 = if layout311.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout311).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout311);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec311.into_iter().enumerate() {
                                                                                        let base = result311
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec310 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr310 = vec310.as_ptr().cast::<u8>();
                                                                                            let len310 = vec310.len();
                                                                                            ::core::mem::forget(vec310);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len310;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr310.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len311;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result311;
                                                                                }
                                                                                V317::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec313 = e;
                                                                                    let len313 = vec313.len();
                                                                                    let layout313 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec313.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result313 = if layout313.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout313).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout313);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec313.into_iter().enumerate() {
                                                                                        let base = result313
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec312 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr312 = vec312.as_ptr().cast::<u8>();
                                                                                            let len312 = vec312.len();
                                                                                            ::core::mem::forget(vec312);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len312;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr312.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len313;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result313;
                                                                                }
                                                                                V317::TupleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec314 = (e).into_boxed_slice();
                                                                                    let ptr314 = vec314.as_ptr().cast::<u8>();
                                                                                    let len314 = vec314.len();
                                                                                    ::core::mem::forget(vec314);
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len314;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr314.cast_mut();
                                                                                }
                                                                                V317::ListType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V317::OptionType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V317::ResultType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t315_0, t315_1) = e;
                                                                                    match t315_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t315_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V317::PrimU8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V317::PrimU16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V317::PrimU32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V317::PrimU64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V317::PrimS8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V317::PrimS16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V317::PrimS32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V317::PrimS64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V317::PrimF32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V317::PrimF64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V317::PrimCharType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V317::PrimBoolType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V317::PrimStringType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V317::HandleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t316_0, t316_1) = e;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t316_0);
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t316_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len318;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result318;
                                                                }
                                                                V327::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions319,
                                                                    } = e;
                                                                    match restrictions319 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec322 = e;
                                                                            let len322 = vec322.len();
                                                                            let layout322 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec322.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result322 = if layout322.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout322).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout322);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec322.into_iter().enumerate() {
                                                                                let base = result322
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code320,
                                                                                    } = e;
                                                                                    let vec321 = (language_code320.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr321 = vec321.as_ptr().cast::<u8>();
                                                                                    let len321 = vec321.len();
                                                                                    ::core::mem::forget(vec321);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len321;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr321.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len322;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result322;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V327::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions323,
                                                                    } = e;
                                                                    match restrictions323 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec326 = e;
                                                                            let len326 = vec326.len();
                                                                            let layout326 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec326.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result326 = if layout326.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout326).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout326);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec326.into_iter().enumerate() {
                                                                                let base = result326
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type324,
                                                                                    } = e;
                                                                                    let vec325 = (mime_type324.into_bytes()).into_boxed_slice();
                                                                                    let ptr325 = vec325.as_ptr().cast::<u8>();
                                                                                    let len325 = vec325.len();
                                                                                    ::core::mem::forget(vec325);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len325;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr325.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len326;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result326;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len328;
                                                    *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result328;
                                                }
                                            }
                                            use super::super::super::super::golem::agent::common::DataSchema as V390;
                                            match output_schema265 {
                                                V390::Tuple(e) => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec359 = e;
                                                    let len359 = vec359.len();
                                                    let layout359 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec359.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result359 = if layout359.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout359).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout359);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec359.into_iter().enumerate() {
                                                        let base = result359
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t330_0, t330_1) = e;
                                                            let vec331 = (t330_0.into_bytes()).into_boxed_slice();
                                                            let ptr331 = vec331.as_ptr().cast::<u8>();
                                                            let len331 = vec331.len();
                                                            ::core::mem::forget(vec331);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len331;
                                                            *base.add(0).cast::<*mut u8>() = ptr331.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V358;
                                                            match t330_1 {
                                                                V358::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes332,
                                                                    } = e;
                                                                    let vec349 = nodes332;
                                                                    let len349 = vec349.len();
                                                                    let layout349 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec349.len()
                                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result349 = if layout349.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout349).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout349);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec349.into_iter().enumerate() {
                                                                        let base = result349
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name333,
                                                                                type_: type_333,
                                                                            } = e;
                                                                            match name333 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec334 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr334 = vec334.as_ptr().cast::<u8>();
                                                                                    let len334 = vec334.len();
                                                                                    ::core::mem::forget(vec334);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len334;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr334.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V348;
                                                                            match type_333 {
                                                                                V348::RecordType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec337 = e;
                                                                                    let len337 = vec337.len();
                                                                                    let layout337 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec337.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result337 = if layout337.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout337).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout337);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec337.into_iter().enumerate() {
                                                                                        let base = result337
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t335_0, t335_1) = e;
                                                                                            let vec336 = (t335_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr336 = vec336.as_ptr().cast::<u8>();
                                                                                            let len336 = vec336.len();
                                                                                            ::core::mem::forget(vec336);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len336;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr336.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t335_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len337;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result337;
                                                                                }
                                                                                V348::VariantType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec340 = e;
                                                                                    let len340 = vec340.len();
                                                                                    let layout340 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec340.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result340 = if layout340.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout340).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout340);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec340.into_iter().enumerate() {
                                                                                        let base = result340
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t338_0, t338_1) = e;
                                                                                            let vec339 = (t338_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr339 = vec339.as_ptr().cast::<u8>();
                                                                                            let len339 = vec339.len();
                                                                                            ::core::mem::forget(vec339);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len339;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr339.cast_mut();
                                                                                            match t338_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len340;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result340;
                                                                                }
                                                                                V348::EnumType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec342 = e;
                                                                                    let len342 = vec342.len();
                                                                                    let layout342 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec342.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result342 = if layout342.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout342).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout342);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec342.into_iter().enumerate() {
                                                                                        let base = result342
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec341 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr341 = vec341.as_ptr().cast::<u8>();
                                                                                            let len341 = vec341.len();
                                                                                            ::core::mem::forget(vec341);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len341;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr341.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len342;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result342;
                                                                                }
                                                                                V348::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec344 = e;
                                                                                    let len344 = vec344.len();
                                                                                    let layout344 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec344.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result344 = if layout344.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout344).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout344);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec344.into_iter().enumerate() {
                                                                                        let base = result344
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec343 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr343 = vec343.as_ptr().cast::<u8>();
                                                                                            let len343 = vec343.len();
                                                                                            ::core::mem::forget(vec343);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len343;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr343.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len344;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result344;
                                                                                }
                                                                                V348::TupleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec345 = (e).into_boxed_slice();
                                                                                    let ptr345 = vec345.as_ptr().cast::<u8>();
                                                                                    let len345 = vec345.len();
                                                                                    ::core::mem::forget(vec345);
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len345;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr345.cast_mut();
                                                                                }
                                                                                V348::ListType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V348::OptionType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V348::ResultType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t346_0, t346_1) = e;
                                                                                    match t346_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t346_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V348::PrimU8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V348::PrimU16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V348::PrimU32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V348::PrimU64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V348::PrimS8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V348::PrimS16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V348::PrimS32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V348::PrimS64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V348::PrimF32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V348::PrimF64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V348::PrimCharType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V348::PrimBoolType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V348::PrimStringType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V348::HandleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t347_0, t347_1) = e;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t347_0);
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t347_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len349;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result349;
                                                                }
                                                                V358::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions350,
                                                                    } = e;
                                                                    match restrictions350 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec353 = e;
                                                                            let len353 = vec353.len();
                                                                            let layout353 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec353.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result353 = if layout353.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout353).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout353);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec353.into_iter().enumerate() {
                                                                                let base = result353
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code351,
                                                                                    } = e;
                                                                                    let vec352 = (language_code351.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr352 = vec352.as_ptr().cast::<u8>();
                                                                                    let len352 = vec352.len();
                                                                                    ::core::mem::forget(vec352);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len352;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr352.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len353;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result353;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V358::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions354,
                                                                    } = e;
                                                                    match restrictions354 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec357 = e;
                                                                            let len357 = vec357.len();
                                                                            let layout357 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec357.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result357 = if layout357.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout357).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout357);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec357.into_iter().enumerate() {
                                                                                let base = result357
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type355,
                                                                                    } = e;
                                                                                    let vec356 = (mime_type355.into_bytes()).into_boxed_slice();
                                                                                    let ptr356 = vec356.as_ptr().cast::<u8>();
                                                                                    let len356 = vec356.len();
                                                                                    ::core::mem::forget(vec356);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len356;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr356.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len357;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result357;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len359;
                                                    *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result359;
                                                }
                                                V390::Multimodal(e) => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec389 = e;
                                                    let len389 = vec389.len();
                                                    let layout389 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec389.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result389 = if layout389.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout389).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout389);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec389.into_iter().enumerate() {
                                                        let base = result389
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t360_0, t360_1) = e;
                                                            let vec361 = (t360_0.into_bytes()).into_boxed_slice();
                                                            let ptr361 = vec361.as_ptr().cast::<u8>();
                                                            let len361 = vec361.len();
                                                            ::core::mem::forget(vec361);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len361;
                                                            *base.add(0).cast::<*mut u8>() = ptr361.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V388;
                                                            match t360_1 {
                                                                V388::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes362,
                                                                    } = e;
                                                                    let vec379 = nodes362;
                                                                    let len379 = vec379.len();
                                                                    let layout379 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec379.len()
                                                                            * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result379 = if layout379.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout379).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout379);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec379.into_iter().enumerate() {
                                                                        let base = result379
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name363,
                                                                                type_: type_363,
                                                                            } = e;
                                                                            match name363 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec364 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr364 = vec364.as_ptr().cast::<u8>();
                                                                                    let len364 = vec364.len();
                                                                                    ::core::mem::forget(vec364);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len364;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr364.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V378;
                                                                            match type_363 {
                                                                                V378::RecordType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec367 = e;
                                                                                    let len367 = vec367.len();
                                                                                    let layout367 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec367.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result367 = if layout367.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout367).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout367);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec367.into_iter().enumerate() {
                                                                                        let base = result367
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t365_0, t365_1) = e;
                                                                                            let vec366 = (t365_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr366 = vec366.as_ptr().cast::<u8>();
                                                                                            let len366 = vec366.len();
                                                                                            ::core::mem::forget(vec366);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len366;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr366.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t365_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len367;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result367;
                                                                                }
                                                                                V378::VariantType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec370 = e;
                                                                                    let len370 = vec370.len();
                                                                                    let layout370 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec370.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result370 = if layout370.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout370).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout370);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec370.into_iter().enumerate() {
                                                                                        let base = result370
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t368_0, t368_1) = e;
                                                                                            let vec369 = (t368_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr369 = vec369.as_ptr().cast::<u8>();
                                                                                            let len369 = vec369.len();
                                                                                            ::core::mem::forget(vec369);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len369;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr369.cast_mut();
                                                                                            match t368_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len370;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result370;
                                                                                }
                                                                                V378::EnumType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec372 = e;
                                                                                    let len372 = vec372.len();
                                                                                    let layout372 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec372.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result372 = if layout372.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout372).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout372);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec372.into_iter().enumerate() {
                                                                                        let base = result372
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec371 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr371 = vec371.as_ptr().cast::<u8>();
                                                                                            let len371 = vec371.len();
                                                                                            ::core::mem::forget(vec371);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len371;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr371.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len372;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result372;
                                                                                }
                                                                                V378::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec374 = e;
                                                                                    let len374 = vec374.len();
                                                                                    let layout374 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec374.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result374 = if layout374.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout374).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout374);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec374.into_iter().enumerate() {
                                                                                        let base = result374
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec373 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr373 = vec373.as_ptr().cast::<u8>();
                                                                                            let len373 = vec373.len();
                                                                                            ::core::mem::forget(vec373);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len373;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr373.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len374;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result374;
                                                                                }
                                                                                V378::TupleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec375 = (e).into_boxed_slice();
                                                                                    let ptr375 = vec375.as_ptr().cast::<u8>();
                                                                                    let len375 = vec375.len();
                                                                                    ::core::mem::forget(vec375);
                                                                                    *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len375;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr375.cast_mut();
                                                                                }
                                                                                V378::ListType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V378::OptionType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V378::ResultType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t376_0, t376_1) = e;
                                                                                    match t376_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t376_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(28 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V378::PrimU8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V378::PrimU16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V378::PrimU32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V378::PrimU64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V378::PrimS8Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V378::PrimS16Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V378::PrimS32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V378::PrimS64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V378::PrimF32Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V378::PrimF64Type => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V378::PrimCharType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V378::PrimBoolType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V378::PrimStringType => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V378::HandleType(e) => {
                                                                                    *base
                                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t377_0, t377_1) = e;
                                                                                    *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t377_0);
                                                                                    *base
                                                                                        .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t377_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len379;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result379;
                                                                }
                                                                V388::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions380,
                                                                    } = e;
                                                                    match restrictions380 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec383 = e;
                                                                            let len383 = vec383.len();
                                                                            let layout383 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec383.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result383 = if layout383.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout383).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout383);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec383.into_iter().enumerate() {
                                                                                let base = result383
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code381,
                                                                                    } = e;
                                                                                    let vec382 = (language_code381.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr382 = vec382.as_ptr().cast::<u8>();
                                                                                    let len382 = vec382.len();
                                                                                    ::core::mem::forget(vec382);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len382;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr382.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len383;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result383;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V388::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions384,
                                                                    } = e;
                                                                    match restrictions384 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec387 = e;
                                                                            let len387 = vec387.len();
                                                                            let layout387 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec387.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result387 = if layout387.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout387).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout387);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec387.into_iter().enumerate() {
                                                                                let base = result387
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type385,
                                                                                    } = e;
                                                                                    let vec386 = (mime_type385.into_bytes()).into_boxed_slice();
                                                                                    let ptr386 = vec386.as_ptr().cast::<u8>();
                                                                                    let len386 = vec386.len();
                                                                                    ::core::mem::forget(vec386);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len386;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr386.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len387;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result387;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len389;
                                                    *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result389;
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len391;
                                    *base
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result391;
                                }
                            }
                            *base
                                .add(18 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len392;
                            *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result392;
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len393;
                    *ptr1.add(0).cast::<*mut u8>() = result393;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_discover_agent_types<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base632 = l0;
                    let len632 = l1;
                    for i in 0..len632 {
                        let base = base632
                            .add(i * (19 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                            let l11 = i32::from(
                                *base
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l11 {
                                0 => {}
                                _ => {
                                    let l12 = *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                            }
                            let l14 = i32::from(
                                *base
                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l14 {
                                0 => {
                                    let l15 = *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base62 = l15;
                                    let len62 = l16;
                                    for i in 0..len62 {
                                        let base = base62
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l17 = *base.add(0).cast::<*mut u8>();
                                            let l18 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l17, l18, 1);
                                            let l19 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l19 {
                                                0 => {
                                                    let l20 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l21 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base49 = l20;
                                                    let len49 = l21;
                                                    for i in 0..len49 {
                                                        let base = base49
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l22 = i32::from(*base.add(0).cast::<u8>());
                                                            match l22 {
                                                                0 => {}
                                                                _ => {
                                                                    let l23 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l24 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                                }
                                                            }
                                                            let l25 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l25 {
                                                                0 => {
                                                                    let l26 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base30 = l26;
                                                                    let len30 = l27;
                                                                    for i in 0..len30 {
                                                                        let base = base30
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l28 = *base.add(0).cast::<*mut u8>();
                                                                            let l29 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base30,
                                                                        len30 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l31 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base35 = l31;
                                                                    let len35 = l32;
                                                                    for i in 0..len35 {
                                                                        let base = base35
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l33 = *base.add(0).cast::<*mut u8>();
                                                                            let l34 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l33, l34, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base35,
                                                                        len35 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l36 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l37 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base40 = l36;
                                                                    let len40 = l37;
                                                                    for i in 0..len40 {
                                                                        let base = base40
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l38 = *base.add(0).cast::<*mut u8>();
                                                                            let l39 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l38, l39, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base40,
                                                                        len40 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l41 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l42 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base45 = l41;
                                                                    let len45 = l42;
                                                                    for i in 0..len45 {
                                                                        let base = base45
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l43 = *base.add(0).cast::<*mut u8>();
                                                                            let l44 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l43, l44, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base45,
                                                                        len45 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l46 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base48 = l46;
                                                                    let len48 = l47;
                                                                    _rt::cabi_dealloc(base48, len48 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base49,
                                                        len49 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l50 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l50 {
                                                        0 => {}
                                                        _ => {
                                                            let l51 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l52 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base55 = l51;
                                                            let len55 = l52;
                                                            for i in 0..len55 {
                                                                let base = base55
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l53 = *base.add(0).cast::<*mut u8>();
                                                                    let l54 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l53, l54, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base55,
                                                                len55 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l56 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l56 {
                                                        0 => {}
                                                        _ => {
                                                            let l57 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l58 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base61 = l57;
                                                            let len61 = l58;
                                                            for i in 0..len61 {
                                                                let base = base61
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l59 = *base.add(0).cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l59, l60, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base61,
                                                                len61 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base62,
                                        len62 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l63 = *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l64 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base110 = l63;
                                    let len110 = l64;
                                    for i in 0..len110 {
                                        let base = base110
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l65 = *base.add(0).cast::<*mut u8>();
                                            let l66 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l65, l66, 1);
                                            let l67 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l67 {
                                                0 => {
                                                    let l68 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l69 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base97 = l68;
                                                    let len97 = l69;
                                                    for i in 0..len97 {
                                                        let base = base97
                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l70 = i32::from(*base.add(0).cast::<u8>());
                                                            match l70 {
                                                                0 => {}
                                                                _ => {
                                                                    let l71 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l72 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l71, l72, 1);
                                                                }
                                                            }
                                                            let l73 = i32::from(
                                                                *base
                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l73 {
                                                                0 => {
                                                                    let l74 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l75 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base78 = l74;
                                                                    let len78 = l75;
                                                                    for i in 0..len78 {
                                                                        let base = base78
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l76 = *base.add(0).cast::<*mut u8>();
                                                                            let l77 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l76, l77, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base78,
                                                                        len78 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l79 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l80 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base83 = l79;
                                                                    let len83 = l80;
                                                                    for i in 0..len83 {
                                                                        let base = base83
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l81 = *base.add(0).cast::<*mut u8>();
                                                                            let l82 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l81, l82, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base83,
                                                                        len83 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l84 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l85 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base88 = l84;
                                                                    let len88 = l85;
                                                                    for i in 0..len88 {
                                                                        let base = base88
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l86 = *base.add(0).cast::<*mut u8>();
                                                                            let l87 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l86, l87, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base88,
                                                                        len88 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l89 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l90 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base93 = l89;
                                                                    let len93 = l90;
                                                                    for i in 0..len93 {
                                                                        let base = base93
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l91 = *base.add(0).cast::<*mut u8>();
                                                                            let l92 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l91, l92, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base93,
                                                                        len93 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l94 = *base
                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l95 = *base
                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base96 = l94;
                                                                    let len96 = l95;
                                                                    _rt::cabi_dealloc(base96, len96 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base97,
                                                        len97 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l98 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l98 {
                                                        0 => {}
                                                        _ => {
                                                            let l99 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l100 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base103 = l99;
                                                            let len103 = l100;
                                                            for i in 0..len103 {
                                                                let base = base103
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l101 = *base.add(0).cast::<*mut u8>();
                                                                    let l102 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l101, l102, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base103,
                                                                len103 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l104 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l104 {
                                                        0 => {}
                                                        _ => {
                                                            let l105 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l106 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base109 = l105;
                                                            let len109 = l106;
                                                            for i in 0..len109 {
                                                                let base = base109
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l107 = *base.add(0).cast::<*mut u8>();
                                                                    let l108 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l107, l108, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base109,
                                                                len109 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base110,
                                        len110 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l111 = *base
                                .add(15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l112 = *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base314 = l111;
                            let len314 = l112;
                            for i in 0..len314 {
                                let base = base314
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l113 = *base.add(0).cast::<*mut u8>();
                                    let l114 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l113, l114, 1);
                                    let l115 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l116 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l115, l116, 1);
                                    let l117 = i32::from(
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l117 {
                                        0 => {}
                                        _ => {
                                            let l118 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l119 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l118, l119, 1);
                                        }
                                    }
                                    let l120 = i32::from(
                                        *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l120 {
                                        0 => {
                                            let l121 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l122 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base168 = l121;
                                            let len168 = l122;
                                            for i in 0..len168 {
                                                let base = base168
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l123 = *base.add(0).cast::<*mut u8>();
                                                    let l124 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l123, l124, 1);
                                                    let l125 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l125 {
                                                        0 => {
                                                            let l126 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l127 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base155 = l126;
                                                            let len155 = l127;
                                                            for i in 0..len155 {
                                                                let base = base155
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l128 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l128 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l129 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l130 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l129, l130, 1);
                                                                        }
                                                                    }
                                                                    let l131 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l131 {
                                                                        0 => {
                                                                            let l132 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l133 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base136 = l132;
                                                                            let len136 = l133;
                                                                            for i in 0..len136 {
                                                                                let base = base136
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l134 = *base.add(0).cast::<*mut u8>();
                                                                                    let l135 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l134, l135, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base136,
                                                                                len136 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l137 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l138 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base141 = l137;
                                                                            let len141 = l138;
                                                                            for i in 0..len141 {
                                                                                let base = base141
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l139 = *base.add(0).cast::<*mut u8>();
                                                                                    let l140 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l139, l140, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base141,
                                                                                len141 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l142 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l143 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base146 = l142;
                                                                            let len146 = l143;
                                                                            for i in 0..len146 {
                                                                                let base = base146
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l144 = *base.add(0).cast::<*mut u8>();
                                                                                    let l145 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l144, l145, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base146,
                                                                                len146 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l147 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l148 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base151 = l147;
                                                                            let len151 = l148;
                                                                            for i in 0..len151 {
                                                                                let base = base151
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l149 = *base.add(0).cast::<*mut u8>();
                                                                                    let l150 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l149, l150, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base151,
                                                                                len151 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l152 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l153 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base154 = l152;
                                                                            let len154 = l153;
                                                                            _rt::cabi_dealloc(base154, len154 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base155,
                                                                len155 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l156 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l156 {
                                                                0 => {}
                                                                _ => {
                                                                    let l157 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l158 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base161 = l157;
                                                                    let len161 = l158;
                                                                    for i in 0..len161 {
                                                                        let base = base161
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l159 = *base.add(0).cast::<*mut u8>();
                                                                            let l160 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l159, l160, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base161,
                                                                        len161 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l162 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l162 {
                                                                0 => {}
                                                                _ => {
                                                                    let l163 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l164 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base167 = l163;
                                                                    let len167 = l164;
                                                                    for i in 0..len167 {
                                                                        let base = base167
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l165 = *base.add(0).cast::<*mut u8>();
                                                                            let l166 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l165, l166, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base167,
                                                                        len167 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base168,
                                                len168 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l169 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l170 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base216 = l169;
                                            let len216 = l170;
                                            for i in 0..len216 {
                                                let base = base216
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l171 = *base.add(0).cast::<*mut u8>();
                                                    let l172 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l171, l172, 1);
                                                    let l173 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l173 {
                                                        0 => {
                                                            let l174 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l175 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base203 = l174;
                                                            let len203 = l175;
                                                            for i in 0..len203 {
                                                                let base = base203
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l176 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l176 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l177 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l178 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l177, l178, 1);
                                                                        }
                                                                    }
                                                                    let l179 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l179 {
                                                                        0 => {
                                                                            let l180 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l181 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base184 = l180;
                                                                            let len184 = l181;
                                                                            for i in 0..len184 {
                                                                                let base = base184
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l182 = *base.add(0).cast::<*mut u8>();
                                                                                    let l183 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l182, l183, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base184,
                                                                                len184 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l185 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l186 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base189 = l185;
                                                                            let len189 = l186;
                                                                            for i in 0..len189 {
                                                                                let base = base189
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l187 = *base.add(0).cast::<*mut u8>();
                                                                                    let l188 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l187, l188, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base189,
                                                                                len189 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l190 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l191 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base194 = l190;
                                                                            let len194 = l191;
                                                                            for i in 0..len194 {
                                                                                let base = base194
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l192 = *base.add(0).cast::<*mut u8>();
                                                                                    let l193 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l192, l193, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base194,
                                                                                len194 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l195 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l196 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base199 = l195;
                                                                            let len199 = l196;
                                                                            for i in 0..len199 {
                                                                                let base = base199
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l197 = *base.add(0).cast::<*mut u8>();
                                                                                    let l198 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l197, l198, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base199,
                                                                                len199 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l200 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l201 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base202 = l200;
                                                                            let len202 = l201;
                                                                            _rt::cabi_dealloc(base202, len202 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base203,
                                                                len203 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l204 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l204 {
                                                                0 => {}
                                                                _ => {
                                                                    let l205 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l206 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base209 = l205;
                                                                    let len209 = l206;
                                                                    for i in 0..len209 {
                                                                        let base = base209
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l207 = *base.add(0).cast::<*mut u8>();
                                                                            let l208 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l207, l208, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base209,
                                                                        len209 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l210 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l210 {
                                                                0 => {}
                                                                _ => {
                                                                    let l211 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l212 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base215 = l211;
                                                                    let len215 = l212;
                                                                    for i in 0..len215 {
                                                                        let base = base215
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l213 = *base.add(0).cast::<*mut u8>();
                                                                            let l214 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l213, l214, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base215,
                                                                        len215 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base216,
                                                len216 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l217 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l217 {
                                        0 => {
                                            let l218 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l219 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base265 = l218;
                                            let len265 = l219;
                                            for i in 0..len265 {
                                                let base = base265
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l220 = *base.add(0).cast::<*mut u8>();
                                                    let l221 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l220, l221, 1);
                                                    let l222 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l222 {
                                                        0 => {
                                                            let l223 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l224 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base252 = l223;
                                                            let len252 = l224;
                                                            for i in 0..len252 {
                                                                let base = base252
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l225 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l225 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l226 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l227 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l226, l227, 1);
                                                                        }
                                                                    }
                                                                    let l228 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l228 {
                                                                        0 => {
                                                                            let l229 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l230 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base233 = l229;
                                                                            let len233 = l230;
                                                                            for i in 0..len233 {
                                                                                let base = base233
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l231 = *base.add(0).cast::<*mut u8>();
                                                                                    let l232 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l231, l232, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base233,
                                                                                len233 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l234 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l235 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base238 = l234;
                                                                            let len238 = l235;
                                                                            for i in 0..len238 {
                                                                                let base = base238
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l236 = *base.add(0).cast::<*mut u8>();
                                                                                    let l237 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l236, l237, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base238,
                                                                                len238 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l239 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l240 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base243 = l239;
                                                                            let len243 = l240;
                                                                            for i in 0..len243 {
                                                                                let base = base243
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l241 = *base.add(0).cast::<*mut u8>();
                                                                                    let l242 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l241, l242, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base243,
                                                                                len243 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l244 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l245 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base248 = l244;
                                                                            let len248 = l245;
                                                                            for i in 0..len248 {
                                                                                let base = base248
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l246 = *base.add(0).cast::<*mut u8>();
                                                                                    let l247 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l246, l247, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base248,
                                                                                len248 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l249 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l250 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base251 = l249;
                                                                            let len251 = l250;
                                                                            _rt::cabi_dealloc(base251, len251 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base252,
                                                                len252 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l253 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l253 {
                                                                0 => {}
                                                                _ => {
                                                                    let l254 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l255 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base258 = l254;
                                                                    let len258 = l255;
                                                                    for i in 0..len258 {
                                                                        let base = base258
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l256 = *base.add(0).cast::<*mut u8>();
                                                                            let l257 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l256, l257, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base258,
                                                                        len258 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l259 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l259 {
                                                                0 => {}
                                                                _ => {
                                                                    let l260 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l261 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base264 = l260;
                                                                    let len264 = l261;
                                                                    for i in 0..len264 {
                                                                        let base = base264
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l262 = *base.add(0).cast::<*mut u8>();
                                                                            let l263 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l262, l263, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base264,
                                                                        len264 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base265,
                                                len265 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l266 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l267 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base313 = l266;
                                            let len313 = l267;
                                            for i in 0..len313 {
                                                let base = base313
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l268 = *base.add(0).cast::<*mut u8>();
                                                    let l269 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l268, l269, 1);
                                                    let l270 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l270 {
                                                        0 => {
                                                            let l271 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l272 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base300 = l271;
                                                            let len300 = l272;
                                                            for i in 0..len300 {
                                                                let base = base300
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l273 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l273 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l274 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l275 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l274, l275, 1);
                                                                        }
                                                                    }
                                                                    let l276 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l276 {
                                                                        0 => {
                                                                            let l277 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l278 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base281 = l277;
                                                                            let len281 = l278;
                                                                            for i in 0..len281 {
                                                                                let base = base281
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l279 = *base.add(0).cast::<*mut u8>();
                                                                                    let l280 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l279, l280, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base281,
                                                                                len281 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l282 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l283 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base286 = l282;
                                                                            let len286 = l283;
                                                                            for i in 0..len286 {
                                                                                let base = base286
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l284 = *base.add(0).cast::<*mut u8>();
                                                                                    let l285 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l284, l285, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base286,
                                                                                len286 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l287 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l288 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base291 = l287;
                                                                            let len291 = l288;
                                                                            for i in 0..len291 {
                                                                                let base = base291
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l289 = *base.add(0).cast::<*mut u8>();
                                                                                    let l290 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l289, l290, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base291,
                                                                                len291 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l292 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l293 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base296 = l292;
                                                                            let len296 = l293;
                                                                            for i in 0..len296 {
                                                                                let base = base296
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l294 = *base.add(0).cast::<*mut u8>();
                                                                                    let l295 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l294, l295, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base296,
                                                                                len296 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l297 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l298 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base299 = l297;
                                                                            let len299 = l298;
                                                                            _rt::cabi_dealloc(base299, len299 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base300,
                                                                len300 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l301 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l301 {
                                                                0 => {}
                                                                _ => {
                                                                    let l302 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l303 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base306 = l302;
                                                                    let len306 = l303;
                                                                    for i in 0..len306 {
                                                                        let base = base306
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l304 = *base.add(0).cast::<*mut u8>();
                                                                            let l305 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l304, l305, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base306,
                                                                        len306 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l307 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l307 {
                                                                0 => {}
                                                                _ => {
                                                                    let l308 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l309 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base312 = l308;
                                                                    let len312 = l309;
                                                                    for i in 0..len312 {
                                                                        let base = base312
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l310 = *base.add(0).cast::<*mut u8>();
                                                                            let l311 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l310, l311, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base312,
                                                                        len312 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base313,
                                                len313 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base314,
                                len314 * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l315 = *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l316 = *base
                                .add(18 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base631 = l315;
                            let len631 = l316;
                            for i in 0..len631 {
                                let base = base631
                                    .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l317 = *base.add(0).cast::<*mut u8>();
                                    let l318 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l317, l318, 1);
                                    let l319 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l319 {
                                        0 => {}
                                        _ => {
                                            let l320 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l321 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l320, l321, 1);
                                        }
                                    }
                                    let l322 = i32::from(
                                        *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l322 {
                                        0 => {}
                                        _ => {
                                            let l323 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l324 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l323, l324, 1);
                                        }
                                    }
                                    let l325 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l326 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l325, l326, 1);
                                    let l327 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l327 {
                                        0 => {}
                                        _ => {
                                            let l328 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l329 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l328, l329, 1);
                                        }
                                    }
                                    let l330 = i32::from(
                                        *base
                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l330 {
                                        0 => {
                                            let l331 = *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l332 = *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base378 = l331;
                                            let len378 = l332;
                                            for i in 0..len378 {
                                                let base = base378
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l333 = *base.add(0).cast::<*mut u8>();
                                                    let l334 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l333, l334, 1);
                                                    let l335 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l335 {
                                                        0 => {
                                                            let l336 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l337 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base365 = l336;
                                                            let len365 = l337;
                                                            for i in 0..len365 {
                                                                let base = base365
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l338 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l338 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l339 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l340 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l339, l340, 1);
                                                                        }
                                                                    }
                                                                    let l341 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l341 {
                                                                        0 => {
                                                                            let l342 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l343 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base346 = l342;
                                                                            let len346 = l343;
                                                                            for i in 0..len346 {
                                                                                let base = base346
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l344 = *base.add(0).cast::<*mut u8>();
                                                                                    let l345 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l344, l345, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base346,
                                                                                len346 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l347 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l348 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base351 = l347;
                                                                            let len351 = l348;
                                                                            for i in 0..len351 {
                                                                                let base = base351
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l349 = *base.add(0).cast::<*mut u8>();
                                                                                    let l350 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l349, l350, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base351,
                                                                                len351 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l352 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l353 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base356 = l352;
                                                                            let len356 = l353;
                                                                            for i in 0..len356 {
                                                                                let base = base356
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l354 = *base.add(0).cast::<*mut u8>();
                                                                                    let l355 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l354, l355, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base356,
                                                                                len356 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l357 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l358 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base361 = l357;
                                                                            let len361 = l358;
                                                                            for i in 0..len361 {
                                                                                let base = base361
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l359 = *base.add(0).cast::<*mut u8>();
                                                                                    let l360 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l359, l360, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base361,
                                                                                len361 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l362 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l363 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base364 = l362;
                                                                            let len364 = l363;
                                                                            _rt::cabi_dealloc(base364, len364 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base365,
                                                                len365 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l366 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l366 {
                                                                0 => {}
                                                                _ => {
                                                                    let l367 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l368 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base371 = l367;
                                                                    let len371 = l368;
                                                                    for i in 0..len371 {
                                                                        let base = base371
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l369 = *base.add(0).cast::<*mut u8>();
                                                                            let l370 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l369, l370, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base371,
                                                                        len371 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l372 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l372 {
                                                                0 => {}
                                                                _ => {
                                                                    let l373 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l374 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base377 = l373;
                                                                    let len377 = l374;
                                                                    for i in 0..len377 {
                                                                        let base = base377
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l375 = *base.add(0).cast::<*mut u8>();
                                                                            let l376 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l375, l376, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base377,
                                                                        len377 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base378,
                                                len378 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l379 = *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l380 = *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base426 = l379;
                                            let len426 = l380;
                                            for i in 0..len426 {
                                                let base = base426
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l381 = *base.add(0).cast::<*mut u8>();
                                                    let l382 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l381, l382, 1);
                                                    let l383 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l383 {
                                                        0 => {
                                                            let l384 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l385 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base413 = l384;
                                                            let len413 = l385;
                                                            for i in 0..len413 {
                                                                let base = base413
                                                                    .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l386 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l386 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l387 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l388 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l387, l388, 1);
                                                                        }
                                                                    }
                                                                    let l389 = i32::from(
                                                                        *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l389 {
                                                                        0 => {
                                                                            let l390 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l391 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base394 = l390;
                                                                            let len394 = l391;
                                                                            for i in 0..len394 {
                                                                                let base = base394
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l392 = *base.add(0).cast::<*mut u8>();
                                                                                    let l393 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l392, l393, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base394,
                                                                                len394 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l395 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l396 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base399 = l395;
                                                                            let len399 = l396;
                                                                            for i in 0..len399 {
                                                                                let base = base399
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l397 = *base.add(0).cast::<*mut u8>();
                                                                                    let l398 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l397, l398, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base399,
                                                                                len399 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l400 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l401 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base404 = l400;
                                                                            let len404 = l401;
                                                                            for i in 0..len404 {
                                                                                let base = base404
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l402 = *base.add(0).cast::<*mut u8>();
                                                                                    let l403 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l402, l403, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base404,
                                                                                len404 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l405 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l406 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base409 = l405;
                                                                            let len409 = l406;
                                                                            for i in 0..len409 {
                                                                                let base = base409
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l407 = *base.add(0).cast::<*mut u8>();
                                                                                    let l408 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l407, l408, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base409,
                                                                                len409 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l410 = *base
                                                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l411 = *base
                                                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base412 = l410;
                                                                            let len412 = l411;
                                                                            _rt::cabi_dealloc(base412, len412 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base413,
                                                                len413 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l414 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l414 {
                                                                0 => {}
                                                                _ => {
                                                                    let l415 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l416 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base419 = l415;
                                                                    let len419 = l416;
                                                                    for i in 0..len419 {
                                                                        let base = base419
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l417 = *base.add(0).cast::<*mut u8>();
                                                                            let l418 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l417, l418, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base419,
                                                                        len419 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l420 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l420 {
                                                                0 => {}
                                                                _ => {
                                                                    let l421 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l422 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base425 = l421;
                                                                    let len425 = l422;
                                                                    for i in 0..len425 {
                                                                        let base = base425
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l423 = *base.add(0).cast::<*mut u8>();
                                                                            let l424 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l423, l424, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base425,
                                                                        len425 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base426,
                                                len426 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l427 = *base
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l428 = *base
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base630 = l427;
                                    let len630 = l428;
                                    for i in 0..len630 {
                                        let base = base630
                                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l429 = *base.add(0).cast::<*mut u8>();
                                            let l430 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l429, l430, 1);
                                            let l431 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l432 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l431, l432, 1);
                                            let l433 = i32::from(
                                                *base
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l433 {
                                                0 => {}
                                                _ => {
                                                    let l434 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l435 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l434, l435, 1);
                                                }
                                            }
                                            let l436 = i32::from(
                                                *base
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l436 {
                                                0 => {
                                                    let l437 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l438 = *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base484 = l437;
                                                    let len484 = l438;
                                                    for i in 0..len484 {
                                                        let base = base484
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l439 = *base.add(0).cast::<*mut u8>();
                                                            let l440 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l439, l440, 1);
                                                            let l441 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l441 {
                                                                0 => {
                                                                    let l442 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l443 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base471 = l442;
                                                                    let len471 = l443;
                                                                    for i in 0..len471 {
                                                                        let base = base471
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l444 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l444 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l445 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l446 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l445, l446, 1);
                                                                                }
                                                                            }
                                                                            let l447 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l447 {
                                                                                0 => {
                                                                                    let l448 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l449 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base452 = l448;
                                                                                    let len452 = l449;
                                                                                    for i in 0..len452 {
                                                                                        let base = base452
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l450 = *base.add(0).cast::<*mut u8>();
                                                                                            let l451 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l450, l451, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base452,
                                                                                        len452 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l453 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l454 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base457 = l453;
                                                                                    let len457 = l454;
                                                                                    for i in 0..len457 {
                                                                                        let base = base457
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l455 = *base.add(0).cast::<*mut u8>();
                                                                                            let l456 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l455, l456, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base457,
                                                                                        len457 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l458 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l459 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base462 = l458;
                                                                                    let len462 = l459;
                                                                                    for i in 0..len462 {
                                                                                        let base = base462
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l460 = *base.add(0).cast::<*mut u8>();
                                                                                            let l461 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l460, l461, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base462,
                                                                                        len462 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l463 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l464 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base467 = l463;
                                                                                    let len467 = l464;
                                                                                    for i in 0..len467 {
                                                                                        let base = base467
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l465 = *base.add(0).cast::<*mut u8>();
                                                                                            let l466 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l465, l466, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base467,
                                                                                        len467 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l468 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l469 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base470 = l468;
                                                                                    let len470 = l469;
                                                                                    _rt::cabi_dealloc(base470, len470 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base471,
                                                                        len471 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l472 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l472 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l473 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l474 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base477 = l473;
                                                                            let len477 = l474;
                                                                            for i in 0..len477 {
                                                                                let base = base477
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l475 = *base.add(0).cast::<*mut u8>();
                                                                                    let l476 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l475, l476, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base477,
                                                                                len477 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l478 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l478 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l479 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l480 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base483 = l479;
                                                                            let len483 = l480;
                                                                            for i in 0..len483 {
                                                                                let base = base483
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l481 = *base.add(0).cast::<*mut u8>();
                                                                                    let l482 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l481, l482, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base483,
                                                                                len483 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base484,
                                                        len484 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l485 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l486 = *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base532 = l485;
                                                    let len532 = l486;
                                                    for i in 0..len532 {
                                                        let base = base532
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l487 = *base.add(0).cast::<*mut u8>();
                                                            let l488 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l487, l488, 1);
                                                            let l489 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l489 {
                                                                0 => {
                                                                    let l490 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l491 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base519 = l490;
                                                                    let len519 = l491;
                                                                    for i in 0..len519 {
                                                                        let base = base519
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l492 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l492 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l493 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l494 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l493, l494, 1);
                                                                                }
                                                                            }
                                                                            let l495 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l495 {
                                                                                0 => {
                                                                                    let l496 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l497 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base500 = l496;
                                                                                    let len500 = l497;
                                                                                    for i in 0..len500 {
                                                                                        let base = base500
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l498 = *base.add(0).cast::<*mut u8>();
                                                                                            let l499 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l498, l499, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base500,
                                                                                        len500 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l501 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l502 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base505 = l501;
                                                                                    let len505 = l502;
                                                                                    for i in 0..len505 {
                                                                                        let base = base505
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l503 = *base.add(0).cast::<*mut u8>();
                                                                                            let l504 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l503, l504, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base505,
                                                                                        len505 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l506 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l507 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base510 = l506;
                                                                                    let len510 = l507;
                                                                                    for i in 0..len510 {
                                                                                        let base = base510
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l508 = *base.add(0).cast::<*mut u8>();
                                                                                            let l509 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l508, l509, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base510,
                                                                                        len510 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l511 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l512 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base515 = l511;
                                                                                    let len515 = l512;
                                                                                    for i in 0..len515 {
                                                                                        let base = base515
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l513 = *base.add(0).cast::<*mut u8>();
                                                                                            let l514 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l513, l514, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base515,
                                                                                        len515 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l516 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l517 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base518 = l516;
                                                                                    let len518 = l517;
                                                                                    _rt::cabi_dealloc(base518, len518 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base519,
                                                                        len519 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l520 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l520 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l521 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l522 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base525 = l521;
                                                                            let len525 = l522;
                                                                            for i in 0..len525 {
                                                                                let base = base525
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l523 = *base.add(0).cast::<*mut u8>();
                                                                                    let l524 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l523, l524, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base525,
                                                                                len525 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l526 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l526 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l527 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l528 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base531 = l527;
                                                                            let len531 = l528;
                                                                            for i in 0..len531 {
                                                                                let base = base531
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l529 = *base.add(0).cast::<*mut u8>();
                                                                                    let l530 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l529, l530, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base531,
                                                                                len531 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base532,
                                                        len532 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                            let l533 = i32::from(
                                                *base
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l533 {
                                                0 => {
                                                    let l534 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l535 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base581 = l534;
                                                    let len581 = l535;
                                                    for i in 0..len581 {
                                                        let base = base581
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l536 = *base.add(0).cast::<*mut u8>();
                                                            let l537 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l536, l537, 1);
                                                            let l538 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l538 {
                                                                0 => {
                                                                    let l539 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l540 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base568 = l539;
                                                                    let len568 = l540;
                                                                    for i in 0..len568 {
                                                                        let base = base568
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l541 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l541 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l542 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l543 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l542, l543, 1);
                                                                                }
                                                                            }
                                                                            let l544 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l544 {
                                                                                0 => {
                                                                                    let l545 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l546 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base549 = l545;
                                                                                    let len549 = l546;
                                                                                    for i in 0..len549 {
                                                                                        let base = base549
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l547 = *base.add(0).cast::<*mut u8>();
                                                                                            let l548 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l547, l548, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base549,
                                                                                        len549 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l550 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l551 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base554 = l550;
                                                                                    let len554 = l551;
                                                                                    for i in 0..len554 {
                                                                                        let base = base554
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l552 = *base.add(0).cast::<*mut u8>();
                                                                                            let l553 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l552, l553, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base554,
                                                                                        len554 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l555 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l556 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base559 = l555;
                                                                                    let len559 = l556;
                                                                                    for i in 0..len559 {
                                                                                        let base = base559
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l557 = *base.add(0).cast::<*mut u8>();
                                                                                            let l558 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l557, l558, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base559,
                                                                                        len559 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l560 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l561 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base564 = l560;
                                                                                    let len564 = l561;
                                                                                    for i in 0..len564 {
                                                                                        let base = base564
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l562 = *base.add(0).cast::<*mut u8>();
                                                                                            let l563 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l562, l563, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base564,
                                                                                        len564 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l565 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l566 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base567 = l565;
                                                                                    let len567 = l566;
                                                                                    _rt::cabi_dealloc(base567, len567 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base568,
                                                                        len568 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l569 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l569 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l570 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l571 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base574 = l570;
                                                                            let len574 = l571;
                                                                            for i in 0..len574 {
                                                                                let base = base574
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l572 = *base.add(0).cast::<*mut u8>();
                                                                                    let l573 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l572, l573, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base574,
                                                                                len574 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l575 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l575 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l576 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l577 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base580 = l576;
                                                                            let len580 = l577;
                                                                            for i in 0..len580 {
                                                                                let base = base580
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l578 = *base.add(0).cast::<*mut u8>();
                                                                                    let l579 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l578, l579, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base580,
                                                                                len580 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base581,
                                                        len581 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l582 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l583 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base629 = l582;
                                                    let len629 = l583;
                                                    for i in 0..len629 {
                                                        let base = base629
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l584 = *base.add(0).cast::<*mut u8>();
                                                            let l585 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l584, l585, 1);
                                                            let l586 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l586 {
                                                                0 => {
                                                                    let l587 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l588 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base616 = l587;
                                                                    let len616 = l588;
                                                                    for i in 0..len616 {
                                                                        let base = base616
                                                                            .add(i * (32 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l589 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l589 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l590 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l591 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l590, l591, 1);
                                                                                }
                                                                            }
                                                                            let l592 = i32::from(
                                                                                *base
                                                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l592 {
                                                                                0 => {
                                                                                    let l593 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l594 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base597 = l593;
                                                                                    let len597 = l594;
                                                                                    for i in 0..len597 {
                                                                                        let base = base597
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l595 = *base.add(0).cast::<*mut u8>();
                                                                                            let l596 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l595, l596, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base597,
                                                                                        len597 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l598 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l599 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base602 = l598;
                                                                                    let len602 = l599;
                                                                                    for i in 0..len602 {
                                                                                        let base = base602
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l600 = *base.add(0).cast::<*mut u8>();
                                                                                            let l601 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l600, l601, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base602,
                                                                                        len602 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l603 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l604 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base607 = l603;
                                                                                    let len607 = l604;
                                                                                    for i in 0..len607 {
                                                                                        let base = base607
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l605 = *base.add(0).cast::<*mut u8>();
                                                                                            let l606 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l605, l606, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base607,
                                                                                        len607 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l608 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l609 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base612 = l608;
                                                                                    let len612 = l609;
                                                                                    for i in 0..len612 {
                                                                                        let base = base612
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l610 = *base.add(0).cast::<*mut u8>();
                                                                                            let l611 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l610, l611, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base612,
                                                                                        len612 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l613 = *base
                                                                                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l614 = *base
                                                                                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base615 = l613;
                                                                                    let len615 = l614;
                                                                                    _rt::cabi_dealloc(base615, len615 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base616,
                                                                        len616 * (32 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l617 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l617 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l618 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l619 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base622 = l618;
                                                                            let len622 = l619;
                                                                            for i in 0..len622 {
                                                                                let base = base622
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l620 = *base.add(0).cast::<*mut u8>();
                                                                                    let l621 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l620, l621, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base622,
                                                                                len622 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l623 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l623 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l624 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l625 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base628 = l624;
                                                                            let len628 = l625;
                                                                            for i in 0..len628 {
                                                                                let base = base628
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l626 = *base.add(0).cast::<*mut u8>();
                                                                                    let l627 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l626, l627, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base628,
                                                                                len628 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base629,
                                                        len629 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base630,
                                        len630 * (13 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            _rt::cabi_dealloc(
                                base631,
                                len631 * (18 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    _rt::cabi_dealloc(
                        base632,
                        len632 * (19 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    type Agent: GuestAgent;
                    fn get_agent(
                        agent_type: _rt::String,
                        agent_id: _rt::String,
                    ) -> Agent;
                    fn discover_agents() -> _rt::Vec<Agent>;
                    fn discover_agent_types() -> _rt::Vec<AgentType>;
                }
                pub trait GuestAgent: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agent/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]agent"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agent/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]agent"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn create(
                        agent_type: _rt::String,
                        input: DataValue,
                    ) -> Result<Agent, AgentError>;
                    fn get_id(&self) -> _rt::String;
                    fn invoke(
                        &self,
                        method_name: _rt::String,
                        input: DataValue,
                    ) -> Result<DataValue, AgentError>;
                    fn get_definition(&self) -> AgentType;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_agent_guest_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:agent/guest#[static]agent.create")] unsafe extern "C" fn
                        export_static_agent_create(arg0 : * mut u8, arg1 : usize, arg2 :
                        i32, arg3 : * mut u8, arg4 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_static_agent_create_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0, arg1, arg2, arg3,
                        arg4) } } #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#[static]agent.create")] unsafe
                        extern "C" fn _post_return_static_agent_create(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_static_agent_create::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#[method]agent.get-id")] unsafe extern "C" fn
                        export_method_agent_get_id(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_method_agent_get_id_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:agent/guest#[method]agent.get-id")] unsafe
                        extern "C" fn _post_return_method_agent_get_id(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_agent_get_id::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#[method]agent.invoke")] unsafe extern "C" fn
                        export_method_agent_invoke(arg0 : * mut u8, arg1 : * mut u8, arg2
                        : usize, arg3 : i32, arg4 : * mut u8, arg5 : usize,) -> * mut u8
                        { unsafe { $($path_to_types)*::
                        _export_method_agent_invoke_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0, arg1, arg2, arg3, arg4, arg5) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#[method]agent.invoke")] unsafe
                        extern "C" fn _post_return_method_agent_invoke(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_agent_invoke::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#[method]agent.get-definition")] unsafe extern
                        "C" fn export_method_agent_get_definition(arg0 : * mut u8,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_method_agent_get_definition_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:agent/guest#[method]agent.get-definition")]
                        unsafe extern "C" fn
                        _post_return_method_agent_get_definition(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_agent_get_definition::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } } #[unsafe
                        (export_name = "golem:agent/guest#get-agent")] unsafe extern "C"
                        fn export_get_agent(arg0 : * mut u8, arg1 : usize, arg2 : * mut
                        u8, arg3 : usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_get_agent_cabi::<$ty > (arg0, arg1, arg2, arg3) } }
                        #[unsafe (export_name = "golem:agent/guest#discover-agents")]
                        unsafe extern "C" fn export_discover_agents() -> * mut u8 {
                        unsafe { $($path_to_types)*:: _export_discover_agents_cabi::<$ty
                        > () } } #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#discover-agents")] unsafe extern "C"
                        fn _post_return_discover_agents(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_discover_agents::<$ty > (arg0)
                        } } #[unsafe (export_name =
                        "golem:agent/guest#discover-agent-types")] unsafe extern "C" fn
                        export_discover_agent_types() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_discover_agent_types_cabi::<$ty > ()
                        } } #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#discover-agent-types")] unsafe
                        extern "C" fn _post_return_discover_agent_types(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_discover_agent_types::<$ty > (arg0) } } const _ :
                        () = { #[doc(hidden)] #[unsafe (export_name =
                        "golem:agent/guest#[dtor]agent")] #[allow(non_snake_case)] unsafe
                        extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Agent::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Agent > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_agent_guest_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 19 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 19
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_agent_guest_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::agent::guest::__export_golem_agent_guest_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::agent::guest);
    };
}
#[doc(inline)]
pub(crate) use __export_agent_guest_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:agent-guest:agent-guest:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 6862] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xcc4\x01A\x02\x01A\x19\
\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08datetime\x03\0\0\x01@\0\0\
\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\0\x1cwasi:clocks/wall-\
clock@0.2.3\x05\0\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\
\0\x7f\x04\0\x16[method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16\
[method]pollable.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04\
poll\x01\x06\x03\0\x12wasi:io/poll@0.2.3\x05\x01\x02\x03\0\0\x08datetime\x02\x03\
\0\x01\x08pollable\x01B[\x02\x03\x02\x01\x02\x04\0\x08datetime\x03\0\0\x02\x03\x02\
\x01\x03\x04\0\x08pollable\x03\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04\
uuid\x03\0\x04\x01r\x01\x04uuid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0c\
component-id\x07\x0bworker-names\x04\0\x09worker-id\x03\0\x08\x01z\x04\0\x0anode\
-index\x03\0\x0a\x01w\x04\0\x0bresource-id\x03\0\x0c\x01m\x02\x05owned\x08borrow\
ed\x04\0\x0dresource-mode\x03\0\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\
\x01p\x13\x01ps\x01p\x0b\x01o\x02\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-ty\
pe\x01\x11\0\x0cvariant-type\x01\x14\0\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\
\0\x0atuple-type\x01\x16\0\x09list-type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bre\
sult-type\x01\x17\0\x0cprim-u8-type\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\
\x0dprim-u64-type\0\0\x0cprim-s8-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\
\0\x0dprim-s64-type\0\0\x0dprim-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-t\
ype\0\0\x0eprim-bool-type\0\0\x10prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\
\0\x0dwit-type-node\x03\0\x19\x01ks\x01r\x02\x04name\x1b\x04type\x1a\x04\0\x13na\
med-wit-type-node\x03\0\x1c\x01p\x1d\x01r\x01\x05nodes\x1e\x04\0\x08wit-type\x03\
\0\x1f\x01r\x01\x05values\x04\0\x03uri\x03\0!\x01o\x02y\x12\x01p\x7f\x01j\x01\x12\
\x01\x12\x01o\x02\"w\x01q\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01#\0\x0a\
enum-value\x01y\0\x0bflags-value\x01$\0\x0btuple-value\x01\x16\0\x0alist-value\x01\
\x16\0\x0coption-value\x01\x12\0\x0cresult-value\x01%\0\x07prim-u8\x01}\0\x08pri\
m-u16\x01{\0\x08prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08prim-s16\
\x01|\0\x08prim-s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0cprim-flo\
at64\x01u\0\x09prim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01s\0\x06\
handle\x01&\0\x04\0\x08wit-node\x03\0'\x01p(\x01r\x01\x05nodes)\x04\0\x09wit-val\
ue\x03\0*\x01r\x02\x05value+\x03typ\x20\x04\0\x0evalue-and-type\x03\0,\x01q\x04\x0e\
protocol-error\x01s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-internal-er\
ror\x01s\0\x04\0\x09rpc-error\x03\0.\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-i\
nvoke-result\x03\x01\x04\0\x12cancellation-token\x03\x01\x01i0\x01@\x01\x09worke\
r-id\x09\03\x04\0\x15[constructor]wasm-rpc\x014\x01@\x01\x0ccomponent-id\x07\03\x04\
\0\x1a[static]wasm-rpc.ephemeral\x015\x01h0\x01p+\x01j\x01+\x01/\x01@\x03\x04sel\
f6\x0dfunction-names\x0ffunction-params7\08\x04\0![method]wasm-rpc.invoke-and-aw\
ait\x019\x01j\0\x01/\x01@\x03\x04self6\x0dfunction-names\x0ffunction-params7\0:\x04\
\0\x17[method]wasm-rpc.invoke\x01;\x01i1\x01@\x03\x04self6\x0dfunction-names\x0f\
function-params7\0<\x04\0'[method]wasm-rpc.async-invoke-and-await\x01=\x01@\x04\x04\
self6\x0escheduled-time\x01\x0dfunction-names\x0ffunction-params7\x01\0\x04\0$[m\
ethod]wasm-rpc.schedule-invocation\x01>\x01i2\x01@\x04\x04self6\x0escheduled-tim\
e\x01\x0dfunction-names\x0ffunction-params7\0?\x04\0/[method]wasm-rpc.schedule-c\
ancelable-invocation\x01@\x01h1\x01i\x03\x01@\x01\x04self\xc1\0\0\xc2\0\x04\0&[m\
ethod]future-invoke-result.subscribe\x01C\x01k8\x01@\x01\x04self\xc1\0\0\xc4\0\x04\
\0\x20[method]future-invoke-result.get\x01E\x01h2\x01@\x01\x04self\xc6\0\x01\0\x04\
\0![method]cancellation-token.cancel\x01G\x01j\x01\x05\x01s\x01@\x01\x04uuids\0\xc8\
\0\x04\0\x0aparse-uuid\x01I\x01@\x01\x04uuid\x05\0s\x04\0\x0euuid-to-string\x01J\
\x01@\x01\x03vnt-\0+\x04\0\x0dextract-value\x01K\x01@\x01\x03vnt-\0\x20\x04\0\x0c\
extract-type\x01L\x03\0\x15golem:rpc/types@0.2.2\x05\x04\x02\x03\0\x02\x08wit-ty\
pe\x02\x03\0\x02\x09wit-value\x01B6\x02\x03\x02\x01\x05\x04\0\x08wit-type\x03\0\0\
\x02\x03\x02\x01\x06\x04\0\x09wit-value\x03\0\x02\x01s\x04\0\x03url\x03\0\x04\x01\
r\x01\x0dlanguage-codes\x04\0\x09text-type\x03\0\x06\x01k\x07\x01r\x02\x04datas\x09\
text-type\x08\x04\0\x0btext-source\x03\0\x09\x01q\x02\x03url\x01s\0\x06inline\x01\
\x0a\0\x04\0\x0etext-reference\x03\0\x0b\x01p\x07\x01k\x0d\x01r\x01\x0crestricti\
ons\x0e\x04\0\x0ftext-descriptor\x03\0\x0f\x01r\x01\x09mime-types\x04\0\x0bbinar\
y-type\x03\0\x11\x01p\x12\x01k\x13\x01r\x01\x0crestrictions\x14\x04\0\x11binary-\
descriptor\x03\0\x15\x01q\x03\x0fcomponent-model\x01\x01\0\x11unstructured-text\x01\
\x10\0\x13unstructured-binary\x01\x16\0\x04\0\x0eelement-schema\x03\0\x17\x01o\x02\
s\x18\x01p\x19\x01q\x02\x05tuple\x01\x1a\0\x0amultimodal\x01\x1a\0\x04\0\x0bdata\
-schema\x03\0\x1b\x01ks\x01r\x05\x04names\x0bdescriptions\x0bprompt-hint\x1d\x0c\
input-schema\x1c\x0doutput-schema\x1c\x04\0\x0cagent-method\x03\0\x1e\x01r\x04\x04\
name\x1d\x0bdescriptions\x0bprompt-hint\x1d\x0cinput-schema\x1c\x04\0\x11agent-c\
onstructor\x03\0\x20\x01p\x1f\x01r\x04\x09type-names\x0bdescription\x1d\x0bconst\
ructor!\x07methods\"\x04\0\x10agent-dependency\x03\0#\x01p$\x01r\x05\x09type-nam\
es\x0bdescriptions\x0bconstructor!\x07methods\"\x0cdependencies%\x04\0\x0aagent-\
type\x03\0&\x01p}\x01r\x02\x04data(\x0bbinary-type\x12\x04\0\x0dbinary-source\x03\
\0)\x01q\x02\x03url\x01\x05\0\x06inline\x01*\0\x04\0\x10binary-reference\x03\0+\x01\
q\x03\x0fcomponent-model\x01\x03\0\x11unstructured-text\x01\x0c\0\x13unstructure\
d-binary\x01,\0\x04\0\x0delement-value\x03\0-\x01p.\x01o\x02s.\x01p0\x01q\x02\x05\
tuple\x01/\0\x0amultimodal\x011\0\x04\0\x0adata-value\x03\02\x01q\x05\x0dinvalid\
-input\x01s\0\x0einvalid-method\x01s\0\x0cinvalid-type\x01s\0\x10invalid-agent-i\
d\x01s\0\x0ccustom-error\x013\0\x04\0\x0bagent-error\x03\04\x03\0\x12golem:agent\
/common\x05\x07\x01B\x0f\x02\x03\x02\x01\x03\x04\0\x08pollable\x03\0\0\x01w\x04\0\
\x07instant\x03\0\x02\x01w\x04\0\x08duration\x03\0\x04\x01@\0\0\x03\x04\0\x03now\
\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\x07\x01i\x01\x01@\x01\x04when\x03\0\
\x08\x04\0\x11subscribe-instant\x01\x09\x01@\x01\x04when\x05\0\x08\x04\0\x12subs\
cribe-duration\x01\x0a\x03\0!wasi:clocks/monotonic-clock@0.2.3\x05\x08\x02\x03\0\
\x04\x08duration\x02\x03\0\x02\x0ccomponent-id\x02\x03\0\x02\x04uuid\x02\x03\0\x02\
\x09worker-id\x01B{\x02\x03\x02\x01\x09\x04\0\x08duration\x03\0\0\x02\x03\x02\x01\
\x0a\x04\0\x0ccomponent-id\x03\0\x02\x02\x03\x02\x01\x0b\x04\0\x04uuid\x03\0\x04\
\x02\x03\x02\x01\x0c\x04\0\x09worker-id\x03\0\x06\x01w\x04\0\x0boplog-index\x03\0\
\x08\x01r\x02\x09worker-id\x07\x09oplog-idx\x09\x04\0\x0apromise-id\x03\0\x0a\x01\
w\x04\0\x11component-version\x03\0\x0c\x01r\x01\x05values\x04\0\x0aaccount-id\x03\
\0\x0e\x01r\x01\x04uuid\x05\x04\0\x0aproject-id\x03\0\x10\x01ku\x01r\x05\x0cmax-\
attemptsy\x09min-delay\x01\x09max-delay\x01\x0amultiplieru\x11max-jitter-factor\x12\
\x04\0\x0cretry-policy\x03\0\x13\x01q\x03\x0fpersist-nothing\0\0\x1bpersist-remo\
te-side-effects\0\0\x05smart\0\0\x04\0\x11persistence-level\x03\0\x15\x01m\x02\x09\
automatic\x0esnapshot-based\x04\0\x0bupdate-mode\x03\0\x17\x01m\x06\x05equal\x09\
not-equal\x0dgreater-equal\x07greater\x0aless-equal\x04less\x04\0\x11filter-comp\
arator\x03\0\x19\x01m\x04\x05equal\x09not-equal\x04like\x08not-like\x04\0\x18str\
ing-filter-comparator\x03\0\x1b\x01m\x07\x07running\x04idle\x09suspended\x0binte\
rrupted\x08retrying\x06failed\x06exited\x04\0\x0dworker-status\x03\0\x1d\x01r\x02\
\x0acomparator\x1c\x05values\x04\0\x12worker-name-filter\x03\0\x1f\x01r\x02\x0ac\
omparator\x1a\x05value\x1e\x04\0\x14worker-status-filter\x03\0!\x01r\x02\x0acomp\
arator\x1a\x05valuew\x04\0\x15worker-version-filter\x03\0#\x01r\x02\x0acomparato\
r\x1a\x05valuew\x04\0\x18worker-created-at-filter\x03\0%\x01r\x03\x04names\x0aco\
mparator\x1c\x05values\x04\0\x11worker-env-filter\x03\0'\x01q\x05\x04name\x01\x20\
\0\x06status\x01\"\0\x07version\x01$\0\x0acreated-at\x01&\0\x03env\x01(\0\x04\0\x16\
worker-property-filter\x03\0)\x01p*\x01r\x01\x07filters+\x04\0\x11worker-all-fil\
ter\x03\0,\x01p-\x01r\x01\x07filters.\x04\0\x11worker-any-filter\x03\0/\x01ps\x01\
o\x02ss\x01p2\x01r\x06\x09worker-id\x07\x04args1\x03env3\x06status\x1e\x11compon\
ent-versionw\x0bretry-countw\x04\0\x0fworker-metadata\x03\04\x04\0\x0bget-worker\
s\x03\x01\x01q\x02\x15revert-to-oplog-index\x01\x09\0\x17revert-last-invocations\
\x01w\0\x04\0\x14revert-worker-target\x03\07\x01m\x02\x08original\x06forked\x04\0\
\x0bfork-result\x03\09\x01k0\x01i6\x01@\x03\x0ccomponent-id\x03\x06filter;\x07pr\
ecise\x7f\0<\x04\0\x18[constructor]get-workers\x01=\x01h6\x01p5\x01k?\x01@\x01\x04\
self>\0\xc0\0\x04\0\x1c[method]get-workers.get-next\x01A\x01@\0\0\x0b\x04\0\x0ec\
reate-promise\x01B\x01p}\x01@\x01\x0apromise-id\x0b\0\xc3\0\x04\0\x0dawait-promi\
se\x01D\x01k\xc3\0\x01@\x01\x0apromise-id\x0b\0\xc5\0\x04\0\x0cpoll-promise\x01F\
\x01@\x02\x0apromise-id\x0b\x04data\xc3\0\0\x7f\x04\0\x10complete-promise\x01G\x01\
@\x01\x0apromise-id\x0b\x01\0\x04\0\x0edelete-promise\x01H\x01@\0\0\x09\x04\0\x0f\
get-oplog-index\x01I\x01@\x01\x09oplog-idx\x09\x01\0\x04\0\x0fset-oplog-index\x01\
J\x01@\x01\x08replicas}\x01\0\x04\0\x0coplog-commit\x01K\x04\0\x14mark-begin-ope\
ration\x01I\x01@\x01\x05begin\x09\x01\0\x04\0\x12mark-end-operation\x01L\x01@\0\0\
\x14\x04\0\x10get-retry-policy\x01M\x01@\x01\x10new-retry-policy\x14\x01\0\x04\0\
\x10set-retry-policy\x01N\x01@\0\0\x16\x04\0\x1bget-oplog-persistence-level\x01O\
\x01@\x01\x15new-persistence-level\x16\x01\0\x04\0\x1bset-oplog-persistence-leve\
l\x01P\x01@\0\0\x7f\x04\0\x14get-idempotence-mode\x01Q\x01@\x01\x0aidempotent\x7f\
\x01\0\x04\0\x14set-idempotence-mode\x01R\x01@\0\0\x05\x04\0\x18generate-idempot\
ency-key\x01S\x01@\x03\x09worker-id\x07\x0etarget-version\x0d\x04mode\x18\x01\0\x04\
\0\x0dupdate-worker\x01T\x01@\0\05\x04\0\x11get-self-metadata\x01U\x01k5\x01@\x01\
\x09worker-id\x07\0\xd6\0\x04\0\x13get-worker-metadata\x01W\x01@\x03\x10source-w\
orker-id\x07\x10target-worker-id\x07\x11oplog-idx-cut-off\x09\x01\0\x04\0\x0bfor\
k-worker\x01X\x01@\x02\x09worker-id\x07\x0drevert-target8\x01\0\x04\0\x0drevert-\
worker\x01Y\x01k\x03\x01@\x01\x13component-references\0\xda\0\x04\0\x14resolve-c\
omponent-id\x01[\x01k\x07\x01@\x02\x13component-references\x0bworker-names\0\xdc\
\0\x04\0\x11resolve-worker-id\x01]\x04\0\x18resolve-worker-id-strict\x01]\x01@\x01\
\x08new-names\0:\x04\0\x04fork\x01^\x03\0\x14golem:api/host@1.1.7\x05\x0d\x02\x03\
\0\x03\x0bagent-error\x02\x03\0\x03\x0aagent-type\x02\x03\0\x03\x0adata-value\x01\
B\x1b\x02\x03\x02\x01\x0e\x04\0\x0bagent-error\x03\0\0\x02\x03\x02\x01\x0f\x04\0\
\x0aagent-type\x03\0\x02\x02\x03\x02\x01\x10\x04\0\x0adata-value\x03\0\x04\x04\0\
\x05agent\x03\x01\x01i\x06\x01j\x01\x07\x01\x01\x01@\x02\x0aagent-types\x05input\
\x05\0\x08\x04\0\x14[static]agent.create\x01\x09\x01h\x06\x01@\x01\x04self\x0a\0\
s\x04\0\x14[method]agent.get-id\x01\x0b\x01j\x01\x05\x01\x01\x01@\x03\x04self\x0a\
\x0bmethod-names\x05input\x05\0\x0c\x04\0\x14[method]agent.invoke\x01\x0d\x01@\x01\
\x04self\x0a\0\x03\x04\0\x1c[method]agent.get-definition\x01\x0e\x01@\x02\x0aage\
nt-types\x08agent-ids\0\x07\x04\0\x09get-agent\x01\x0f\x01p\x07\x01@\0\0\x10\x04\
\0\x0fdiscover-agents\x01\x11\x01p\x03\x01@\0\0\x12\x04\0\x14discover-agent-type\
s\x01\x13\x04\0\x11golem:agent/guest\x05\x11\x04\0\x1dgolem:agent-guest/agent-gu\
est\x04\0\x0b\x11\x01\0\x0bagent-guest\x03\0\0\0G\x09producers\x01\x0cprocessed-\
by\x02\x0dwit-component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
