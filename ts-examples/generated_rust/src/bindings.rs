// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod golem {
    pub mod agent {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod common {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type ValueAndType = super::super::super::golem::rpc::types::ValueAndType;
            pub type WitType = super::super::super::golem::rpc::types::WitType;
            pub type WitValue = super::super::super::golem::rpc::types::WitValue;
            pub type Url = _rt::String;
            #[derive(Clone)]
            pub struct TextType {
                pub language_code: _rt::String,
            }
            impl ::core::fmt::Debug for TextType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextType")
                        .field("language-code", &self.language_code)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct TextSource {
                pub data: _rt::String,
                pub text_type: Option<TextType>,
            }
            impl ::core::fmt::Debug for TextSource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextSource")
                        .field("data", &self.data)
                        .field("text-type", &self.text_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum TextReference {
                Url(_rt::String),
                Inline(TextSource),
            }
            impl ::core::fmt::Debug for TextReference {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        TextReference::Url(e) => {
                            f.debug_tuple("TextReference::Url").field(e).finish()
                        }
                        TextReference::Inline(e) => {
                            f.debug_tuple("TextReference::Inline").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct TextDescriptor {
                pub restrictions: Option<_rt::Vec<TextType>>,
            }
            impl ::core::fmt::Debug for TextDescriptor {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("TextDescriptor")
                        .field("restrictions", &self.restrictions)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BinaryType {
                pub mime_type: _rt::String,
            }
            impl ::core::fmt::Debug for BinaryType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinaryType")
                        .field("mime-type", &self.mime_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BinaryDescriptor {
                pub restrictions: Option<_rt::Vec<BinaryType>>,
            }
            impl ::core::fmt::Debug for BinaryDescriptor {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinaryDescriptor")
                        .field("restrictions", &self.restrictions)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum ElementSchema {
                ComponentModel(WitType),
                UnstructuredText(TextDescriptor),
                UnstructuredBinary(BinaryDescriptor),
            }
            impl ::core::fmt::Debug for ElementSchema {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ElementSchema::ComponentModel(e) => {
                            f.debug_tuple("ElementSchema::ComponentModel")
                                .field(e)
                                .finish()
                        }
                        ElementSchema::UnstructuredText(e) => {
                            f.debug_tuple("ElementSchema::UnstructuredText")
                                .field(e)
                                .finish()
                        }
                        ElementSchema::UnstructuredBinary(e) => {
                            f.debug_tuple("ElementSchema::UnstructuredBinary")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum DataSchema {
                /// List of named elements
                Tuple(_rt::Vec<(_rt::String, ElementSchema)>),
                /// List of named variants that can be used 0 or more times in a multimodal `data-value`
                Multimodal(_rt::Vec<(_rt::String, ElementSchema)>),
            }
            impl ::core::fmt::Debug for DataSchema {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DataSchema::Tuple(e) => {
                            f.debug_tuple("DataSchema::Tuple").field(e).finish()
                        }
                        DataSchema::Multimodal(e) => {
                            f.debug_tuple("DataSchema::Multimodal").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct AgentMethod {
                pub name: _rt::String,
                pub description: _rt::String,
                pub prompt_hint: Option<_rt::String>,
                pub input_schema: DataSchema,
                pub output_schema: DataSchema,
            }
            impl ::core::fmt::Debug for AgentMethod {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentMethod")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("prompt-hint", &self.prompt_hint)
                        .field("input-schema", &self.input_schema)
                        .field("output-schema", &self.output_schema)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AgentConstructor {
                pub name: Option<_rt::String>,
                pub description: _rt::String,
                pub prompt_hint: Option<_rt::String>,
                pub input_schema: DataSchema,
            }
            impl ::core::fmt::Debug for AgentConstructor {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentConstructor")
                        .field("name", &self.name)
                        .field("description", &self.description)
                        .field("prompt-hint", &self.prompt_hint)
                        .field("input-schema", &self.input_schema)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AgentDependency {
                pub type_name: _rt::String,
                pub description: Option<_rt::String>,
                pub constructor: AgentConstructor,
                pub methods: _rt::Vec<AgentMethod>,
            }
            impl ::core::fmt::Debug for AgentDependency {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentDependency")
                        .field("type-name", &self.type_name)
                        .field("description", &self.description)
                        .field("constructor", &self.constructor)
                        .field("methods", &self.methods)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct AgentType {
                pub type_name: _rt::String,
                pub description: _rt::String,
                pub constructor: AgentConstructor,
                pub methods: _rt::Vec<AgentMethod>,
                pub dependencies: _rt::Vec<AgentDependency>,
            }
            impl ::core::fmt::Debug for AgentType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("AgentType")
                        .field("type-name", &self.type_name)
                        .field("description", &self.description)
                        .field("constructor", &self.constructor)
                        .field("methods", &self.methods)
                        .field("dependencies", &self.dependencies)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct BinarySource {
                pub data: _rt::Vec<u8>,
                pub binary_type: BinaryType,
            }
            impl ::core::fmt::Debug for BinarySource {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("BinarySource")
                        .field("data", &self.data)
                        .field("binary-type", &self.binary_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum BinaryReference {
                Url(Url),
                Inline(BinarySource),
            }
            impl ::core::fmt::Debug for BinaryReference {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        BinaryReference::Url(e) => {
                            f.debug_tuple("BinaryReference::Url").field(e).finish()
                        }
                        BinaryReference::Inline(e) => {
                            f.debug_tuple("BinaryReference::Inline").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum ElementValue {
                ComponentModel(WitValue),
                UnstructuredText(TextReference),
                UnstructuredBinary(BinaryReference),
            }
            impl ::core::fmt::Debug for ElementValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ElementValue::ComponentModel(e) => {
                            f.debug_tuple("ElementValue::ComponentModel")
                                .field(e)
                                .finish()
                        }
                        ElementValue::UnstructuredText(e) => {
                            f.debug_tuple("ElementValue::UnstructuredText")
                                .field(e)
                                .finish()
                        }
                        ElementValue::UnstructuredBinary(e) => {
                            f.debug_tuple("ElementValue::UnstructuredBinary")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum DataValue {
                /// List of element values, each corresponding to an element of the tuple `data-schema`
                Tuple(_rt::Vec<ElementValue>),
                /// List of element values and their schema names; each name points to one named element of the corresponding
                /// multimodal `data-schema`.
                Multimodal(_rt::Vec<(_rt::String, ElementValue)>),
            }
            impl ::core::fmt::Debug for DataValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        DataValue::Tuple(e) => {
                            f.debug_tuple("DataValue::Tuple").field(e).finish()
                        }
                        DataValue::Multimodal(e) => {
                            f.debug_tuple("DataValue::Multimodal").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub enum AgentError {
                InvalidInput(_rt::String),
                InvalidMethod(_rt::String),
                InvalidType(_rt::String),
                InvalidAgentId(_rt::String),
                CustomError(ValueAndType),
            }
            impl ::core::fmt::Debug for AgentError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        AgentError::InvalidInput(e) => {
                            f.debug_tuple("AgentError::InvalidInput").field(e).finish()
                        }
                        AgentError::InvalidMethod(e) => {
                            f.debug_tuple("AgentError::InvalidMethod").field(e).finish()
                        }
                        AgentError::InvalidType(e) => {
                            f.debug_tuple("AgentError::InvalidType").field(e).finish()
                        }
                        AgentError::InvalidAgentId(e) => {
                            f.debug_tuple("AgentError::InvalidAgentId").field(e).finish()
                        }
                        AgentError::CustomError(e) => {
                            f.debug_tuple("AgentError::CustomError").field(e).finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for AgentError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for AgentError {}
        }
    }
    pub mod api {
        /// The Golem host API provides low level access to Golem specific features such as promises and control over
        /// the durability and transactional guarantees the executor provides.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod host {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Duration = super::super::super::wasi::clocks::monotonic_clock::Duration;
            pub type ComponentId = super::super::super::golem::rpc::types::ComponentId;
            pub type Uuid = super::super::super::golem::rpc::types::Uuid;
            pub type WorkerId = super::super::super::golem::rpc::types::WorkerId;
            /// An index into the persistent log storing all performed operations of a worker
            pub type OplogIndex = u64;
            /// A promise ID is a value that can be passed to an external Golem API to complete that promise
            /// from an arbitrary external source, while Golem workers can await for this completion.
            #[derive(Clone)]
            pub struct PromiseId {
                pub worker_id: WorkerId,
                pub oplog_idx: OplogIndex,
            }
            impl ::core::fmt::Debug for PromiseId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("PromiseId")
                        .field("worker-id", &self.worker_id)
                        .field("oplog-idx", &self.oplog_idx)
                        .finish()
                }
            }
            /// Represents a Golem component's version
            pub type ComponentVersion = u64;
            /// Configures how the executor retries failures
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct RetryPolicy {
                /// The maximum number of retries before the worker becomes permanently failed
                pub max_attempts: u32,
                /// The minimum delay between retries (applied to the first retry)
                pub min_delay: Duration,
                /// The maximum delay between retries
                pub max_delay: Duration,
                /// Multiplier applied to the delay on each retry to implement exponential backoff
                pub multiplier: f64,
                /// The maximum amount of jitter to add to the delay
                pub max_jitter_factor: Option<f64>,
            }
            impl ::core::fmt::Debug for RetryPolicy {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("RetryPolicy")
                        .field("max-attempts", &self.max_attempts)
                        .field("min-delay", &self.min_delay)
                        .field("max-delay", &self.max_delay)
                        .field("multiplier", &self.multiplier)
                        .field("max-jitter-factor", &self.max_jitter_factor)
                        .finish()
                }
            }
            /// Configurable persistence level for workers
            #[derive(Clone, Copy)]
            pub enum PersistenceLevel {
                PersistNothing,
                PersistRemoteSideEffects,
                Smart,
            }
            impl ::core::fmt::Debug for PersistenceLevel {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        PersistenceLevel::PersistNothing => {
                            f.debug_tuple("PersistenceLevel::PersistNothing").finish()
                        }
                        PersistenceLevel::PersistRemoteSideEffects => {
                            f.debug_tuple("PersistenceLevel::PersistRemoteSideEffects")
                                .finish()
                        }
                        PersistenceLevel::Smart => {
                            f.debug_tuple("PersistenceLevel::Smart").finish()
                        }
                    }
                }
            }
            /// Describes how to update a worker to a different component version
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum UpdateMode {
                /// Automatic update tries to recover the worker using the new component version
                /// and may fail if there is a divergence.
                Automatic,
                /// Manual, snapshot-based update uses a user-defined implementation of the `save-snapshot` interface
                /// to store the worker's state, and a user-defined implementation of the `load-snapshot` interface to
                /// load it into the new version.
                SnapshotBased,
            }
            impl ::core::fmt::Debug for UpdateMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        UpdateMode::Automatic => {
                            f.debug_tuple("UpdateMode::Automatic").finish()
                        }
                        UpdateMode::SnapshotBased => {
                            f.debug_tuple("UpdateMode::SnapshotBased").finish()
                        }
                    }
                }
            }
            impl UpdateMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> UpdateMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => UpdateMode::Automatic,
                        1 => UpdateMode::SnapshotBased,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum FilterComparator {
                Equal,
                NotEqual,
                GreaterEqual,
                Greater,
                LessEqual,
                Less,
            }
            impl ::core::fmt::Debug for FilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        FilterComparator::Equal => {
                            f.debug_tuple("FilterComparator::Equal").finish()
                        }
                        FilterComparator::NotEqual => {
                            f.debug_tuple("FilterComparator::NotEqual").finish()
                        }
                        FilterComparator::GreaterEqual => {
                            f.debug_tuple("FilterComparator::GreaterEqual").finish()
                        }
                        FilterComparator::Greater => {
                            f.debug_tuple("FilterComparator::Greater").finish()
                        }
                        FilterComparator::LessEqual => {
                            f.debug_tuple("FilterComparator::LessEqual").finish()
                        }
                        FilterComparator::Less => {
                            f.debug_tuple("FilterComparator::Less").finish()
                        }
                    }
                }
            }
            impl FilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> FilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => FilterComparator::Equal,
                        1 => FilterComparator::NotEqual,
                        2 => FilterComparator::GreaterEqual,
                        3 => FilterComparator::Greater,
                        4 => FilterComparator::LessEqual,
                        5 => FilterComparator::Less,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum StringFilterComparator {
                Equal,
                NotEqual,
                Like,
                NotLike,
            }
            impl ::core::fmt::Debug for StringFilterComparator {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        StringFilterComparator::Equal => {
                            f.debug_tuple("StringFilterComparator::Equal").finish()
                        }
                        StringFilterComparator::NotEqual => {
                            f.debug_tuple("StringFilterComparator::NotEqual").finish()
                        }
                        StringFilterComparator::Like => {
                            f.debug_tuple("StringFilterComparator::Like").finish()
                        }
                        StringFilterComparator::NotLike => {
                            f.debug_tuple("StringFilterComparator::NotLike").finish()
                        }
                    }
                }
            }
            impl StringFilterComparator {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> StringFilterComparator {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => StringFilterComparator::Equal,
                        1 => StringFilterComparator::NotEqual,
                        2 => StringFilterComparator::Like,
                        3 => StringFilterComparator::NotLike,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum WorkerStatus {
                /// The worker is running an invoked function
                Running,
                /// The worker is ready to run an invoked function
                Idle,
                /// An invocation is active but waiting for something (sleeping, waiting for a promise)
                Suspended,
                /// The last invocation was interrupted but will be resumed
                Interrupted,
                /// The last invocation failed and a retry was scheduled
                Retrying,
                /// The last invocation failed and the worker can no longer be used
                Failed,
                /// The worker exited after a successful invocation and can no longer be invoked
                Exited,
            }
            impl ::core::fmt::Debug for WorkerStatus {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerStatus::Running => {
                            f.debug_tuple("WorkerStatus::Running").finish()
                        }
                        WorkerStatus::Idle => {
                            f.debug_tuple("WorkerStatus::Idle").finish()
                        }
                        WorkerStatus::Suspended => {
                            f.debug_tuple("WorkerStatus::Suspended").finish()
                        }
                        WorkerStatus::Interrupted => {
                            f.debug_tuple("WorkerStatus::Interrupted").finish()
                        }
                        WorkerStatus::Retrying => {
                            f.debug_tuple("WorkerStatus::Retrying").finish()
                        }
                        WorkerStatus::Failed => {
                            f.debug_tuple("WorkerStatus::Failed").finish()
                        }
                        WorkerStatus::Exited => {
                            f.debug_tuple("WorkerStatus::Exited").finish()
                        }
                    }
                }
            }
            impl WorkerStatus {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> WorkerStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => WorkerStatus::Running,
                        1 => WorkerStatus::Idle,
                        2 => WorkerStatus::Suspended,
                        3 => WorkerStatus::Interrupted,
                        4 => WorkerStatus::Retrying,
                        5 => WorkerStatus::Failed,
                        6 => WorkerStatus::Exited,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerNameFilter {
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerNameFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerNameFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerStatusFilter {
                pub comparator: FilterComparator,
                pub value: WorkerStatus,
            }
            impl ::core::fmt::Debug for WorkerStatusFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerStatusFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerVersionFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerVersionFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerVersionFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct WorkerCreatedAtFilter {
                pub comparator: FilterComparator,
                pub value: u64,
            }
            impl ::core::fmt::Debug for WorkerCreatedAtFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerCreatedAtFilter")
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerEnvFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerEnvFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerEnvFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerWasiConfigVarsFilter {
                pub name: _rt::String,
                pub comparator: StringFilterComparator,
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerWasiConfigVarsFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerWasiConfigVarsFilter")
                        .field("name", &self.name)
                        .field("comparator", &self.comparator)
                        .field("value", &self.value)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum WorkerPropertyFilter {
                Name(WorkerNameFilter),
                Status(WorkerStatusFilter),
                Version(WorkerVersionFilter),
                CreatedAt(WorkerCreatedAtFilter),
                Env(WorkerEnvFilter),
                WasiConfigVars(WorkerWasiConfigVarsFilter),
            }
            impl ::core::fmt::Debug for WorkerPropertyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WorkerPropertyFilter::Name(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Name").field(e).finish()
                        }
                        WorkerPropertyFilter::Status(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Status")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Version(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Version")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::CreatedAt(e) => {
                            f.debug_tuple("WorkerPropertyFilter::CreatedAt")
                                .field(e)
                                .finish()
                        }
                        WorkerPropertyFilter::Env(e) => {
                            f.debug_tuple("WorkerPropertyFilter::Env").field(e).finish()
                        }
                        WorkerPropertyFilter::WasiConfigVars(e) => {
                            f.debug_tuple("WorkerPropertyFilter::WasiConfigVars")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WorkerAllFilter {
                pub filters: _rt::Vec<WorkerPropertyFilter>,
            }
            impl ::core::fmt::Debug for WorkerAllFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAllFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerAnyFilter {
                pub filters: _rt::Vec<WorkerAllFilter>,
            }
            impl ::core::fmt::Debug for WorkerAnyFilter {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerAnyFilter")
                        .field("filters", &self.filters)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WorkerMetadata {
                pub worker_id: WorkerId,
                pub args: _rt::Vec<_rt::String>,
                pub env: _rt::Vec<(_rt::String, _rt::String)>,
                pub wasi_config_vars: _rt::Vec<(_rt::String, _rt::String)>,
                pub status: WorkerStatus,
                pub component_version: u64,
                pub retry_count: u64,
            }
            impl ::core::fmt::Debug for WorkerMetadata {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerMetadata")
                        .field("worker-id", &self.worker_id)
                        .field("args", &self.args)
                        .field("env", &self.env)
                        .field("wasi-config-vars", &self.wasi_config_vars)
                        .field("status", &self.status)
                        .field("component-version", &self.component_version)
                        .field("retry-count", &self.retry_count)
                        .finish()
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct GetWorkers {
                handle: _rt::Resource<GetWorkers>,
            }
            impl GetWorkers {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for GetWorkers {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]get-workers"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            /// Target parameter for the `revert-worker` operation
            #[derive(Clone, Copy)]
            pub enum RevertWorkerTarget {
                /// Revert to a specific oplog index. The given index will be the last one to be kept.
                RevertToOplogIndex(OplogIndex),
                /// Revert the last N invocations.
                RevertLastInvocations(u64),
            }
            impl ::core::fmt::Debug for RevertWorkerTarget {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertToOplogIndex")
                                .field(e)
                                .finish()
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            f.debug_tuple("RevertWorkerTarget::RevertLastInvocations")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            /// Indicates which worker the code is running on after `fork`
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ForkResult {
                /// The original worker that called `fork`
                Original,
                /// The new worker
                Forked,
            }
            impl ::core::fmt::Debug for ForkResult {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ForkResult::Original => {
                            f.debug_tuple("ForkResult::Original").finish()
                        }
                        ForkResult::Forked => {
                            f.debug_tuple("ForkResult::Forked").finish()
                        }
                    }
                }
            }
            impl ForkResult {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ForkResult {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ForkResult::Original,
                        1 => ForkResult::Forked,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(
                    component_id: ComponentId,
                    filter: Option<&WorkerAnyFilter>,
                    precise: bool,
                ) -> Self {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::golem::rpc::types::ComponentId {
                            uuid: uuid0,
                        } = component_id;
                        let super::super::super::golem::rpc::types::Uuid {
                            high_bits: high_bits1,
                            low_bits: low_bits1,
                        } = uuid0;
                        let (result17_0, result17_1, result17_2) = match filter {
                            Some(e) => {
                                let WorkerAnyFilter { filters: filters2 } = e;
                                let vec16 = filters2;
                                let len16 = vec16.len();
                                let layout16 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec16.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let result16 = if layout16.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout16).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout16);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec16.into_iter().enumerate() {
                                    let base = result16
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        let WorkerAllFilter { filters: filters3 } = e;
                                        let vec15 = filters3;
                                        let len15 = vec15.len();
                                        let layout15 = _rt::alloc::Layout::from_size_align_unchecked(
                                            vec15.len()
                                                * (16 + 4 * ::core::mem::size_of::<*const u8>()),
                                            8,
                                        );
                                        let result15 = if layout15.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout15);
                                            }
                                            ptr
                                        } else {
                                            ::core::ptr::null_mut()
                                        };
                                        for (i, e) in vec15.into_iter().enumerate() {
                                            let base = result15
                                                .add(i * (16 + 4 * ::core::mem::size_of::<*const u8>()));
                                            {
                                                match e {
                                                    WorkerPropertyFilter::Name(e) => {
                                                        *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        let WorkerNameFilter {
                                                            comparator: comparator4,
                                                            value: value4,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator4.clone() as i32)
                                                            as u8;
                                                        let vec5 = value4;
                                                        let ptr5 = vec5.as_ptr().cast::<u8>();
                                                        let len5 = vec5.len();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len5;
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr5.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::Status(e) => {
                                                        *base.add(0).cast::<u8>() = (1i32) as u8;
                                                        let WorkerStatusFilter {
                                                            comparator: comparator6,
                                                            value: value6,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator6.clone() as i32)
                                                            as u8;
                                                        *base.add(9).cast::<u8>() = (value6.clone() as i32) as u8;
                                                    }
                                                    WorkerPropertyFilter::Version(e) => {
                                                        *base.add(0).cast::<u8>() = (2i32) as u8;
                                                        let WorkerVersionFilter {
                                                            comparator: comparator7,
                                                            value: value7,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator7.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value7);
                                                    }
                                                    WorkerPropertyFilter::CreatedAt(e) => {
                                                        *base.add(0).cast::<u8>() = (3i32) as u8;
                                                        let WorkerCreatedAtFilter {
                                                            comparator: comparator8,
                                                            value: value8,
                                                        } = e;
                                                        *base.add(8).cast::<u8>() = (comparator8.clone() as i32)
                                                            as u8;
                                                        *base.add(16).cast::<i64>() = _rt::as_i64(value8);
                                                    }
                                                    WorkerPropertyFilter::Env(e) => {
                                                        *base.add(0).cast::<u8>() = (4i32) as u8;
                                                        let WorkerEnvFilter {
                                                            name: name9,
                                                            comparator: comparator9,
                                                            value: value9,
                                                        } = e;
                                                        let vec10 = name9;
                                                        let ptr10 = vec10.as_ptr().cast::<u8>();
                                                        let len10 = vec10.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len10;
                                                        *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator9.clone() as i32) as u8;
                                                        let vec11 = value9;
                                                        let ptr11 = vec11.as_ptr().cast::<u8>();
                                                        let len11 = vec11.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len11;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr11.cast_mut();
                                                    }
                                                    WorkerPropertyFilter::WasiConfigVars(e) => {
                                                        *base.add(0).cast::<u8>() = (5i32) as u8;
                                                        let WorkerWasiConfigVarsFilter {
                                                            name: name12,
                                                            comparator: comparator12,
                                                            value: value12,
                                                        } = e;
                                                        let vec13 = name12;
                                                        let ptr13 = vec13.as_ptr().cast::<u8>();
                                                        let len13 = vec13.len();
                                                        *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len13;
                                                        *base.add(8).cast::<*mut u8>() = ptr13.cast_mut();
                                                        *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>() = (comparator12.clone() as i32) as u8;
                                                        let vec14 = value12;
                                                        let ptr14 = vec14.as_ptr().cast::<u8>();
                                                        let len14 = vec14.len();
                                                        *base
                                                            .add(8 + 4 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>() = len14;
                                                        *base
                                                            .add(8 + 3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<*mut u8>() = ptr14.cast_mut();
                                                    }
                                                }
                                            }
                                        }
                                        *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>() = len15;
                                        *base.add(0).cast::<*mut u8>() = result15;
                                        cleanup_list.extend_from_slice(&[(result15, layout15)]);
                                    }
                                }
                                cleanup_list.extend_from_slice(&[(result16, layout16)]);
                                (1i32, result16, len16)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]get-workers"]
                            fn wit_import18(
                                _: i64,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import18(
                            _: i64,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import18(
                                _rt::as_i64(high_bits1),
                                _rt::as_i64(low_bits1),
                                result17_0,
                                result17_1,
                                result17_2,
                                match &precise {
                                    true => 1,
                                    false => 0,
                                },
                            )
                        };
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { GetWorkers::from_handle(ret as u32) }
                    }
                }
            }
            impl GetWorkers {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get_next(&self) -> Option<_rt::Vec<WorkerMetadata>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 3 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 3
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:api/host@1.1.7")]
                        unsafe extern "C" {
                            #[link_name = "[method]get-workers.get-next"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result38 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = *ptr0
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l4 = *ptr0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base37 = l3;
                                    let len37 = l4;
                                    let mut result37 = _rt::Vec::with_capacity(len37);
                                    for i in 0..len37 {
                                        let base = base37
                                            .add(i * (40 + 8 * ::core::mem::size_of::<*const u8>()));
                                        let e37 = {
                                            let l5 = *base.add(0).cast::<i64>();
                                            let l6 = *base.add(8).cast::<i64>();
                                            let l7 = *base.add(16).cast::<*mut u8>();
                                            let l8 = *base
                                                .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len9 = l8;
                                            let bytes9 = _rt::Vec::from_raw_parts(
                                                l7.cast(),
                                                len9,
                                                len9,
                                            );
                                            let l10 = *base
                                                .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l11 = *base
                                                .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base15 = l10;
                                            let len15 = l11;
                                            let mut result15 = _rt::Vec::with_capacity(len15);
                                            for i in 0..len15 {
                                                let base = base15
                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                let e15 = {
                                                    let l12 = *base.add(0).cast::<*mut u8>();
                                                    let l13 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len14 = l13;
                                                    let bytes14 = _rt::Vec::from_raw_parts(
                                                        l12.cast(),
                                                        len14,
                                                        len14,
                                                    );
                                                    _rt::string_lift(bytes14)
                                                };
                                                result15.push(e15);
                                            }
                                            _rt::cabi_dealloc(
                                                base15,
                                                len15 * (2 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l16 = *base
                                                .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l17 = *base
                                                .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base24 = l16;
                                            let len24 = l17;
                                            let mut result24 = _rt::Vec::with_capacity(len24);
                                            for i in 0..len24 {
                                                let base = base24
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e24 = {
                                                    let l18 = *base.add(0).cast::<*mut u8>();
                                                    let l19 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len20 = l19;
                                                    let bytes20 = _rt::Vec::from_raw_parts(
                                                        l18.cast(),
                                                        len20,
                                                        len20,
                                                    );
                                                    let l21 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l22 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len23 = l22;
                                                    let bytes23 = _rt::Vec::from_raw_parts(
                                                        l21.cast(),
                                                        len23,
                                                        len23,
                                                    );
                                                    (_rt::string_lift(bytes20), _rt::string_lift(bytes23))
                                                };
                                                result24.push(e24);
                                            }
                                            _rt::cabi_dealloc(
                                                base24,
                                                len24 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l25 = *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l26 = *base
                                                .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base33 = l25;
                                            let len33 = l26;
                                            let mut result33 = _rt::Vec::with_capacity(len33);
                                            for i in 0..len33 {
                                                let base = base33
                                                    .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                                let e33 = {
                                                    let l27 = *base.add(0).cast::<*mut u8>();
                                                    let l28 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len29 = l28;
                                                    let bytes29 = _rt::Vec::from_raw_parts(
                                                        l27.cast(),
                                                        len29,
                                                        len29,
                                                    );
                                                    let l30 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l31 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let len32 = l31;
                                                    let bytes32 = _rt::Vec::from_raw_parts(
                                                        l30.cast(),
                                                        len32,
                                                        len32,
                                                    );
                                                    (_rt::string_lift(bytes29), _rt::string_lift(bytes32))
                                                };
                                                result33.push(e33);
                                            }
                                            _rt::cabi_dealloc(
                                                base33,
                                                len33 * (4 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let l34 = i32::from(
                                                *base
                                                    .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            let l35 = *base
                                                .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            let l36 = *base
                                                .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i64>();
                                            WorkerMetadata {
                                                worker_id: super::super::super::golem::rpc::types::WorkerId {
                                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                                            high_bits: l5 as u64,
                                                            low_bits: l6 as u64,
                                                        },
                                                    },
                                                    worker_name: _rt::string_lift(bytes9),
                                                },
                                                args: result15,
                                                env: result24,
                                                wasi_config_vars: result33,
                                                status: WorkerStatus::_lift(l34 as u8),
                                                component_version: l35 as u64,
                                                retry_count: l36 as u64,
                                            }
                                        };
                                        result37.push(e37);
                                    }
                                    _rt::cabi_dealloc(
                                        base37,
                                        len37 * (40 + 8 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    result37
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result38
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a new promise
            pub fn create_promise() -> PromiseId {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "create-promise"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result8 = PromiseId {
                        worker_id: super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes6),
                        },
                        oplog_idx: l7 as u64,
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Suspends execution until the given promise gets completed, and returns the payload passed to
            /// the promise completion.
            pub fn await_promise(promise_id: &PromiseId) -> _rt::Vec<u8> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "await-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5,
                        )
                    };
                    let l7 = *ptr5.add(0).cast::<*mut u8>();
                    let l8 = *ptr5
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len9 = l8;
                    let result10 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Checks whether the given promise is completed. If not, it returns None. If the promise is completed,
            /// it returns the payload passed to the promise completion.
            pub fn poll_promise(promise_id: &PromiseId) -> Option<_rt::Vec<u8>> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 3 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 3
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let ptr5 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "poll-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5,
                        )
                    };
                    let l7 = i32::from(*ptr5.add(0).cast::<u8>());
                    let result11 = match l7 {
                        0 => None,
                        1 => {
                            let e = {
                                let l8 = *ptr5
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l9 = *ptr5
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len10 = l9;
                                _rt::Vec::from_raw_parts(l8.cast(), len10, len10)
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result11
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Completes the given promise with the given payload. Returns true if the promise was completed, false
            /// if the promise was already completed. The payload is passed to the worker that is awaiting the promise.
            pub fn complete_promise(promise_id: &PromiseId, data: &[u8]) -> bool {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    let vec5 = data;
                    let ptr5 = vec5.as_ptr().cast::<u8>();
                    let len5 = vec5.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "complete-promise"]
                        fn wit_import6(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import6(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                    ) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe {
                        wit_import6(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                            ptr5.cast_mut(),
                            len5,
                        )
                    };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Deletes the given promise
            pub fn delete_promise(promise_id: &PromiseId) -> () {
                unsafe {
                    let PromiseId { worker_id: worker_id0, oplog_idx: oplog_idx0 } = promise_id;
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id1,
                        worker_name: worker_name1,
                    } = worker_id0;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid2,
                    } = component_id1;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits3,
                        low_bits: low_bits3,
                    } = uuid2;
                    let vec4 = worker_name1;
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "delete-promise"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits3),
                            _rt::as_i64(low_bits3),
                            ptr4.cast_mut(),
                            len4,
                            _rt::as_i64(oplog_idx0),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Returns the current position in the persistent op log
            pub fn get_oplog_index() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-index"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Makes the current worker travel back in time and continue execution from the given position in the persistent
            /// op log.
            pub fn set_oplog_index(oplog_idx: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-index"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(oplog_idx)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Blocks the execution until the oplog has been written to at least the specified number of replicas,
            /// or the maximum number of replicas if the requested number is higher.
            pub fn oplog_commit(replicas: u8) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "oplog-commit"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i32(&replicas)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Marks the beginning of an atomic operation.
            /// In case of a failure within the region selected by `mark-begin-operation` and `mark-end-operation`
            /// the whole region will be reexecuted on retry.
            /// The end of the region is when `mark-end-operation` is called with the returned oplog-index.
            pub fn mark_begin_operation() -> OplogIndex {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-begin-operation"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Commits this atomic operation. After `mark-end-operation` is called for a given index, further calls
            /// with the same parameter will do nothing.
            pub fn mark_end_operation(begin: OplogIndex) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "mark-end-operation"]
                        fn wit_import0(_: i64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) {
                        unreachable!()
                    }
                    unsafe { wit_import0(_rt::as_i64(begin)) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current retry policy associated with the worker
            pub fn get_retry_policy() -> RetryPolicy {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 48]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 48]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-retry-policy"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i32>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<i64>();
                    let l5 = *ptr0.add(24).cast::<f64>();
                    let l6 = i32::from(*ptr0.add(32).cast::<u8>());
                    let result8 = RetryPolicy {
                        max_attempts: l2 as u32,
                        min_delay: l3 as u64,
                        max_delay: l4 as u64,
                        multiplier: l5,
                        max_jitter_factor: match l6 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l7 = *ptr0.add(40).cast::<f64>();
                                    l7
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        },
                    };
                    result8
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Overrides the current retry policy associated with the worker. Following this call, `get-retry-policy` will return the
            /// new retry policy.
            pub fn set_retry_policy(new_retry_policy: RetryPolicy) -> () {
                unsafe {
                    let RetryPolicy {
                        max_attempts: max_attempts0,
                        min_delay: min_delay0,
                        max_delay: max_delay0,
                        multiplier: multiplier0,
                        max_jitter_factor: max_jitter_factor0,
                    } = new_retry_policy;
                    let (result1_0, result1_1) = match max_jitter_factor0 {
                        Some(e) => (1i32, _rt::as_f64(e)),
                        None => (0i32, 0.0f64),
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-retry-policy"]
                        fn wit_import2(_: i32, _: i64, _: i64, _: f64, _: i32, _: f64);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(
                        _: i32,
                        _: i64,
                        _: i64,
                        _: f64,
                        _: i32,
                        _: f64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i32(max_attempts0),
                            _rt::as_i64(min_delay0),
                            _rt::as_i64(max_delay0),
                            _rt::as_f64(multiplier0),
                            result1_0,
                            result1_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the worker's current persistence level.
            pub fn get_oplog_persistence_level() -> PersistenceLevel {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-oplog-persistence-level"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    let v1 = match ret {
                        0 => PersistenceLevel::PersistNothing,
                        1 => PersistenceLevel::PersistRemoteSideEffects,
                        n => {
                            debug_assert_eq!(n, 2, "invalid enum discriminant");
                            PersistenceLevel::Smart
                        }
                    };
                    v1
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the worker's current persistence level. This can increase the performance of execution in cases where durable
            /// execution is not required.
            pub fn set_oplog_persistence_level(
                new_persistence_level: PersistenceLevel,
            ) -> () {
                unsafe {
                    let result0 = match new_persistence_level {
                        PersistenceLevel::PersistNothing => 0i32,
                        PersistenceLevel::PersistRemoteSideEffects => 1i32,
                        PersistenceLevel::Smart => 2i32,
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-oplog-persistence-level"]
                        fn wit_import1(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: i32) {
                        unreachable!()
                    }
                    unsafe { wit_import1(result0) };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Gets the current idempotence mode. See `set-idempotence-mode` for details.
            pub fn get_idempotence_mode() -> bool {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-idempotence-mode"]
                        fn wit_import0() -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Sets the current idempotence mode. The default is true.
            /// True means side-effects are treated idempotent and Golem guarantees at-least-once semantics.
            /// In case of false the executor provides at-most-once semantics, failing the worker in case it is
            /// not known if the side effect was already executed.
            pub fn set_idempotence_mode(idempotent: bool) -> () {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "set-idempotence-mode"]
                        fn wit_import0(_: i32);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i32) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import0(
                            match &idempotent {
                                true => 1,
                                false => 0,
                            },
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Generates an idempotency key. This operation will never be replayed —
            /// i.e. not only is this key generated, but it is persisted and committed, such that the key can be used in third-party systems (e.g. payment processing)
            /// to introduce idempotence.
            pub fn generate_idempotency_key() -> Uuid {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "generate-idempotency-key"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let result4 = super::super::super::golem::rpc::types::Uuid {
                        high_bits: l2 as u64,
                        low_bits: l3 as u64,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Initiates an update attempt for the given worker. The function returns immediately once the request has been processed,
            /// not waiting for the worker to get updated.
            pub fn update_worker(
                worker_id: &WorkerId,
                target_version: ComponentVersion,
                mode: UpdateMode,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "update-worker"]
                        fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i32,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import4(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i32,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import4(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(target_version),
                            mode.clone() as i32,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current worker metadata
            pub fn get_self_metadata() -> WorkerMetadata {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 40 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 40
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-self-metadata"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i64>();
                    let l4 = *ptr0.add(16).cast::<*mut u8>();
                    let l5 = *ptr0
                        .add(16 + 1 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len6 = l5;
                    let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                    let l7 = *ptr0
                        .add(16 + 2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *ptr0
                        .add(16 + 3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base12 = l7;
                    let len12 = l8;
                    let mut result12 = _rt::Vec::with_capacity(len12);
                    for i in 0..len12 {
                        let base = base12
                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                        let e12 = {
                            let l9 = *base.add(0).cast::<*mut u8>();
                            let l10 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len11 = l10;
                            let bytes11 = _rt::Vec::from_raw_parts(
                                l9.cast(),
                                len11,
                                len11,
                            );
                            _rt::string_lift(bytes11)
                        };
                        result12.push(e12);
                    }
                    _rt::cabi_dealloc(
                        base12,
                        len12 * (2 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l13 = *ptr0
                        .add(16 + 4 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *ptr0
                        .add(16 + 5 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base21 = l13;
                    let len21 = l14;
                    let mut result21 = _rt::Vec::with_capacity(len21);
                    for i in 0..len21 {
                        let base = base21
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e21 = {
                            let l15 = *base.add(0).cast::<*mut u8>();
                            let l16 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len17 = l16;
                            let bytes17 = _rt::Vec::from_raw_parts(
                                l15.cast(),
                                len17,
                                len17,
                            );
                            let l18 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l19 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len20 = l19;
                            let bytes20 = _rt::Vec::from_raw_parts(
                                l18.cast(),
                                len20,
                                len20,
                            );
                            (_rt::string_lift(bytes17), _rt::string_lift(bytes20))
                        };
                        result21.push(e21);
                    }
                    _rt::cabi_dealloc(
                        base21,
                        len21 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l22 = *ptr0
                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l23 = *ptr0
                        .add(16 + 7 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base30 = l22;
                    let len30 = l23;
                    let mut result30 = _rt::Vec::with_capacity(len30);
                    for i in 0..len30 {
                        let base = base30
                            .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                        let e30 = {
                            let l24 = *base.add(0).cast::<*mut u8>();
                            let l25 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len26 = l25;
                            let bytes26 = _rt::Vec::from_raw_parts(
                                l24.cast(),
                                len26,
                                len26,
                            );
                            let l27 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l28 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let len29 = l28;
                            let bytes29 = _rt::Vec::from_raw_parts(
                                l27.cast(),
                                len29,
                                len29,
                            );
                            (_rt::string_lift(bytes26), _rt::string_lift(bytes29))
                        };
                        result30.push(e30);
                    }
                    _rt::cabi_dealloc(
                        base30,
                        len30 * (4 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l31 = i32::from(
                        *ptr0
                            .add(16 + 8 * ::core::mem::size_of::<*const u8>())
                            .cast::<u8>(),
                    );
                    let l32 = *ptr0
                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let l33 = *ptr0
                        .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                        .cast::<i64>();
                    let result34 = WorkerMetadata {
                        worker_id: super::super::super::golem::rpc::types::WorkerId {
                            component_id: super::super::super::golem::rpc::types::ComponentId {
                                uuid: super::super::super::golem::rpc::types::Uuid {
                                    high_bits: l2 as u64,
                                    low_bits: l3 as u64,
                                },
                            },
                            worker_name: _rt::string_lift(bytes6),
                        },
                        args: result12,
                        env: result21,
                        wasi_config_vars: result30,
                        status: WorkerStatus::_lift(l31 as u8),
                        component_version: l32 as u64,
                        retry_count: l33 as u64,
                    };
                    result34
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get worker metadata
            pub fn get_worker_metadata(worker_id: &WorkerId) -> Option<WorkerMetadata> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 48 + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 48
                            + 8 * ::core::mem::size_of::<*const u8>()],
                    );
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let ptr4 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "get-worker-metadata"]
                        fn wit_import5(_: i64, _: i64, _: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            ptr4,
                        )
                    };
                    let l6 = i32::from(*ptr4.add(0).cast::<u8>());
                    let result39 = match l6 {
                        0 => None,
                        1 => {
                            let e = {
                                let l7 = *ptr4.add(8).cast::<i64>();
                                let l8 = *ptr4.add(16).cast::<i64>();
                                let l9 = *ptr4.add(24).cast::<*mut u8>();
                                let l10 = *ptr4
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len11 = l10;
                                let bytes11 = _rt::Vec::from_raw_parts(
                                    l9.cast(),
                                    len11,
                                    len11,
                                );
                                let l12 = *ptr4
                                    .add(24 + 2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l13 = *ptr4
                                    .add(24 + 3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base17 = l12;
                                let len17 = l13;
                                let mut result17 = _rt::Vec::with_capacity(len17);
                                for i in 0..len17 {
                                    let base = base17
                                        .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                    let e17 = {
                                        let l14 = *base.add(0).cast::<*mut u8>();
                                        let l15 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len16 = l15;
                                        let bytes16 = _rt::Vec::from_raw_parts(
                                            l14.cast(),
                                            len16,
                                            len16,
                                        );
                                        _rt::string_lift(bytes16)
                                    };
                                    result17.push(e17);
                                }
                                _rt::cabi_dealloc(
                                    base17,
                                    len17 * (2 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l18 = *ptr4
                                    .add(24 + 4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l19 = *ptr4
                                    .add(24 + 5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base26 = l18;
                                let len26 = l19;
                                let mut result26 = _rt::Vec::with_capacity(len26);
                                for i in 0..len26 {
                                    let base = base26
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e26 = {
                                        let l20 = *base.add(0).cast::<*mut u8>();
                                        let l21 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len22 = l21;
                                        let bytes22 = _rt::Vec::from_raw_parts(
                                            l20.cast(),
                                            len22,
                                            len22,
                                        );
                                        let l23 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l24 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len25 = l24;
                                        let bytes25 = _rt::Vec::from_raw_parts(
                                            l23.cast(),
                                            len25,
                                            len25,
                                        );
                                        (_rt::string_lift(bytes22), _rt::string_lift(bytes25))
                                    };
                                    result26.push(e26);
                                }
                                _rt::cabi_dealloc(
                                    base26,
                                    len26 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l27 = *ptr4
                                    .add(24 + 6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<*mut u8>();
                                let l28 = *ptr4
                                    .add(24 + 7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let base35 = l27;
                                let len35 = l28;
                                let mut result35 = _rt::Vec::with_capacity(len35);
                                for i in 0..len35 {
                                    let base = base35
                                        .add(i * (4 * ::core::mem::size_of::<*const u8>()));
                                    let e35 = {
                                        let l29 = *base.add(0).cast::<*mut u8>();
                                        let l30 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len31 = l30;
                                        let bytes31 = _rt::Vec::from_raw_parts(
                                            l29.cast(),
                                            len31,
                                            len31,
                                        );
                                        let l32 = *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l33 = *base
                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len34 = l33;
                                        let bytes34 = _rt::Vec::from_raw_parts(
                                            l32.cast(),
                                            len34,
                                            len34,
                                        );
                                        (_rt::string_lift(bytes31), _rt::string_lift(bytes34))
                                    };
                                    result35.push(e35);
                                }
                                _rt::cabi_dealloc(
                                    base35,
                                    len35 * (4 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                let l36 = i32::from(
                                    *ptr4
                                        .add(24 + 8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>(),
                                );
                                let l37 = *ptr4
                                    .add(32 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                let l38 = *ptr4
                                    .add(40 + 8 * ::core::mem::size_of::<*const u8>())
                                    .cast::<i64>();
                                WorkerMetadata {
                                    worker_id: super::super::super::golem::rpc::types::WorkerId {
                                        component_id: super::super::super::golem::rpc::types::ComponentId {
                                            uuid: super::super::super::golem::rpc::types::Uuid {
                                                high_bits: l7 as u64,
                                                low_bits: l8 as u64,
                                            },
                                        },
                                        worker_name: _rt::string_lift(bytes11),
                                    },
                                    args: result17,
                                    env: result26,
                                    wasi_config_vars: result35,
                                    status: WorkerStatus::_lift(l36 as u8),
                                    component_version: l37 as u64,
                                    retry_count: l38 as u64,
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result39
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Fork a worker to another worker at a given oplog index
            pub fn fork_worker(
                source_worker_id: &WorkerId,
                target_worker_id: &WorkerId,
                oplog_idx_cut_off: OplogIndex,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = source_worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id4,
                        worker_name: worker_name4,
                    } = target_worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid5,
                    } = component_id4;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits6,
                        low_bits: low_bits6,
                    } = uuid5;
                    let vec7 = worker_name4;
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork-worker"]
                        fn wit_import8(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import8(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import8(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            _rt::as_i64(high_bits6),
                            _rt::as_i64(low_bits6),
                            ptr7.cast_mut(),
                            len7,
                            _rt::as_i64(oplog_idx_cut_off),
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Revert a worker to a previous state
            pub fn revert_worker(
                worker_id: &WorkerId,
                revert_target: RevertWorkerTarget,
            ) -> () {
                unsafe {
                    let super::super::super::golem::rpc::types::WorkerId {
                        component_id: component_id0,
                        worker_name: worker_name0,
                    } = worker_id;
                    let super::super::super::golem::rpc::types::ComponentId {
                        uuid: uuid1,
                    } = component_id0;
                    let super::super::super::golem::rpc::types::Uuid {
                        high_bits: high_bits2,
                        low_bits: low_bits2,
                    } = uuid1;
                    let vec3 = worker_name0;
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    let (result4_0, result4_1) = match revert_target {
                        RevertWorkerTarget::RevertToOplogIndex(e) => {
                            (0i32, _rt::as_i64(e))
                        }
                        RevertWorkerTarget::RevertLastInvocations(e) => {
                            (1i32, _rt::as_i64(e))
                        }
                    };
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "revert-worker"]
                        fn wit_import5(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i64,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import5(
                        _: i64,
                        _: i64,
                        _: *mut u8,
                        _: usize,
                        _: i32,
                        _: i64,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import5(
                            _rt::as_i64(high_bits2),
                            _rt::as_i64(low_bits2),
                            ptr3.cast_mut(),
                            len3,
                            result4_0,
                            result4_1,
                        )
                    };
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the component-id for a given component reference.
            /// Returns none when no component with the specified reference exists.
            /// The syntax of the component reference is implementation dependent.
            ///
            /// Golem OSS: "{component_name}"
            /// Golem Cloud:
            ///     1: "{component_name}" -> will resolve in current account and project
            ///     2: "{project_name}/{component_name}" -> will resolve in current account
            ///     3: "{account_id}/{project_name}/{component_name}"
            pub fn resolve_component_id(
                component_reference: &str,
            ) -> Option<ComponentId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-component-id"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result6 = match l3 {
                        0 => None,
                        1 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                super::super::super::golem::rpc::types::ComponentId {
                                    uuid: super::super::super::golem::rpc::types::Uuid {
                                        high_bits: l4 as u64,
                                        low_bits: l5 as u64,
                                    },
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result6
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified reference exists.
            pub fn resolve_worker_id(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-worker-id"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::WorkerId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get the worker-id for a given component and worker name.
            /// Returns none when no component for the specified component-reference or no worker with the specified worker-name exists.
            pub fn resolve_worker_id_strict(
                component_reference: &str,
                worker_name: &str,
            ) -> Option<WorkerId> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 24 + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 24
                            + 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = component_reference;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = worker_name;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();
                    let ptr2 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "resolve-worker-id-strict"]
                        fn wit_import3(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import3(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import3(ptr0.cast_mut(), len0, ptr1.cast_mut(), len1, ptr2)
                    };
                    let l4 = i32::from(*ptr2.add(0).cast::<u8>());
                    let result10 = match l4 {
                        0 => None,
                        1 => {
                            let e = {
                                let l5 = *ptr2.add(8).cast::<i64>();
                                let l6 = *ptr2.add(16).cast::<i64>();
                                let l7 = *ptr2.add(24).cast::<*mut u8>();
                                let l8 = *ptr2
                                    .add(24 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len9 = l8;
                                let bytes9 = _rt::Vec::from_raw_parts(
                                    l7.cast(),
                                    len9,
                                    len9,
                                );
                                super::super::super::golem::rpc::types::WorkerId {
                                    component_id: super::super::super::golem::rpc::types::ComponentId {
                                        uuid: super::super::super::golem::rpc::types::Uuid {
                                            high_bits: l5 as u64,
                                            low_bits: l6 as u64,
                                        },
                                    },
                                    worker_name: _rt::string_lift(bytes9),
                                }
                            };
                            Some(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result10
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Forks the current worker at the current execution point. The new worker gets the `new-name` worker name,
            /// and this worker continues running as well. The return value is going to be different in this worker and
            /// the forked worker.
            pub fn fork(new_name: &str) -> ForkResult {
                unsafe {
                    let vec0 = new_name;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:api/host@1.1.7")]
                    unsafe extern "C" {
                        #[link_name = "fork"]
                        fn wit_import1(_: *mut u8, _: usize) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import1(ptr0.cast_mut(), len0) };
                    ForkResult::_lift(ret as u8)
                }
            }
        }
    }
    pub mod rpc {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Datetime = super::super::super::wasi::clocks::wall_clock::Datetime;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// UUID
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Uuid {
                pub high_bits: u64,
                pub low_bits: u64,
            }
            impl ::core::fmt::Debug for Uuid {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uuid")
                        .field("high-bits", &self.high_bits)
                        .field("low-bits", &self.low_bits)
                        .finish()
                }
            }
            /// Represents a Golem component
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct ComponentId {
                pub uuid: Uuid,
            }
            impl ::core::fmt::Debug for ComponentId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ComponentId").field("uuid", &self.uuid).finish()
                }
            }
            /// Represents a Golem worker
            #[derive(Clone)]
            pub struct WorkerId {
                pub component_id: ComponentId,
                pub worker_name: _rt::String,
            }
            impl ::core::fmt::Debug for WorkerId {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WorkerId")
                        .field("component-id", &self.component_id)
                        .field("worker-name", &self.worker_name)
                        .finish()
                }
            }
            pub type NodeIndex = i32;
            pub type ResourceId = u64;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, Ord, PartialEq, PartialOrd)]
            pub enum ResourceMode {
                Owned,
                Borrowed,
            }
            impl ::core::fmt::Debug for ResourceMode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        ResourceMode::Owned => {
                            f.debug_tuple("ResourceMode::Owned").finish()
                        }
                        ResourceMode::Borrowed => {
                            f.debug_tuple("ResourceMode::Borrowed").finish()
                        }
                    }
                }
            }
            impl ResourceMode {
                #[doc(hidden)]
                pub unsafe fn _lift(val: u8) -> ResourceMode {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }
                    match val {
                        0 => ResourceMode::Owned,
                        1 => ResourceMode::Borrowed,
                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }
            #[derive(Clone)]
            pub enum WitTypeNode {
                RecordType(_rt::Vec<(_rt::String, NodeIndex)>),
                VariantType(_rt::Vec<(_rt::String, Option<NodeIndex>)>),
                EnumType(_rt::Vec<_rt::String>),
                FlagsType(_rt::Vec<_rt::String>),
                TupleType(_rt::Vec<NodeIndex>),
                ListType(NodeIndex),
                OptionType(NodeIndex),
                ResultType((Option<NodeIndex>, Option<NodeIndex>)),
                PrimU8Type,
                PrimU16Type,
                PrimU32Type,
                PrimU64Type,
                PrimS8Type,
                PrimS16Type,
                PrimS32Type,
                PrimS64Type,
                PrimF32Type,
                PrimF64Type,
                PrimCharType,
                PrimBoolType,
                PrimStringType,
                HandleType((ResourceId, ResourceMode)),
            }
            impl ::core::fmt::Debug for WitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitTypeNode::RecordType(e) => {
                            f.debug_tuple("WitTypeNode::RecordType").field(e).finish()
                        }
                        WitTypeNode::VariantType(e) => {
                            f.debug_tuple("WitTypeNode::VariantType").field(e).finish()
                        }
                        WitTypeNode::EnumType(e) => {
                            f.debug_tuple("WitTypeNode::EnumType").field(e).finish()
                        }
                        WitTypeNode::FlagsType(e) => {
                            f.debug_tuple("WitTypeNode::FlagsType").field(e).finish()
                        }
                        WitTypeNode::TupleType(e) => {
                            f.debug_tuple("WitTypeNode::TupleType").field(e).finish()
                        }
                        WitTypeNode::ListType(e) => {
                            f.debug_tuple("WitTypeNode::ListType").field(e).finish()
                        }
                        WitTypeNode::OptionType(e) => {
                            f.debug_tuple("WitTypeNode::OptionType").field(e).finish()
                        }
                        WitTypeNode::ResultType(e) => {
                            f.debug_tuple("WitTypeNode::ResultType").field(e).finish()
                        }
                        WitTypeNode::PrimU8Type => {
                            f.debug_tuple("WitTypeNode::PrimU8Type").finish()
                        }
                        WitTypeNode::PrimU16Type => {
                            f.debug_tuple("WitTypeNode::PrimU16Type").finish()
                        }
                        WitTypeNode::PrimU32Type => {
                            f.debug_tuple("WitTypeNode::PrimU32Type").finish()
                        }
                        WitTypeNode::PrimU64Type => {
                            f.debug_tuple("WitTypeNode::PrimU64Type").finish()
                        }
                        WitTypeNode::PrimS8Type => {
                            f.debug_tuple("WitTypeNode::PrimS8Type").finish()
                        }
                        WitTypeNode::PrimS16Type => {
                            f.debug_tuple("WitTypeNode::PrimS16Type").finish()
                        }
                        WitTypeNode::PrimS32Type => {
                            f.debug_tuple("WitTypeNode::PrimS32Type").finish()
                        }
                        WitTypeNode::PrimS64Type => {
                            f.debug_tuple("WitTypeNode::PrimS64Type").finish()
                        }
                        WitTypeNode::PrimF32Type => {
                            f.debug_tuple("WitTypeNode::PrimF32Type").finish()
                        }
                        WitTypeNode::PrimF64Type => {
                            f.debug_tuple("WitTypeNode::PrimF64Type").finish()
                        }
                        WitTypeNode::PrimCharType => {
                            f.debug_tuple("WitTypeNode::PrimCharType").finish()
                        }
                        WitTypeNode::PrimBoolType => {
                            f.debug_tuple("WitTypeNode::PrimBoolType").finish()
                        }
                        WitTypeNode::PrimStringType => {
                            f.debug_tuple("WitTypeNode::PrimStringType").finish()
                        }
                        WitTypeNode::HandleType(e) => {
                            f.debug_tuple("WitTypeNode::HandleType").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct NamedWitTypeNode {
                pub name: Option<_rt::String>,
                pub owner: Option<_rt::String>,
                pub type_: WitTypeNode,
            }
            impl ::core::fmt::Debug for NamedWitTypeNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("NamedWitTypeNode")
                        .field("name", &self.name)
                        .field("owner", &self.owner)
                        .field("type", &self.type_)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct WitType {
                pub nodes: _rt::Vec<NamedWitTypeNode>,
            }
            impl ::core::fmt::Debug for WitType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitType").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct Uri {
                pub value: _rt::String,
            }
            impl ::core::fmt::Debug for Uri {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Uri").field("value", &self.value).finish()
                }
            }
            #[derive(Clone)]
            pub enum WitNode {
                RecordValue(_rt::Vec<NodeIndex>),
                VariantValue((u32, Option<NodeIndex>)),
                EnumValue(u32),
                FlagsValue(_rt::Vec<bool>),
                TupleValue(_rt::Vec<NodeIndex>),
                ListValue(_rt::Vec<NodeIndex>),
                OptionValue(Option<NodeIndex>),
                ResultValue(Result<Option<NodeIndex>, Option<NodeIndex>>),
                PrimU8(u8),
                PrimU16(u16),
                PrimU32(u32),
                PrimU64(u64),
                PrimS8(i8),
                PrimS16(i16),
                PrimS32(i32),
                PrimS64(i64),
                PrimFloat32(f32),
                PrimFloat64(f64),
                PrimChar(char),
                PrimBool(bool),
                PrimString(_rt::String),
                Handle((Uri, u64)),
            }
            impl ::core::fmt::Debug for WitNode {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        WitNode::RecordValue(e) => {
                            f.debug_tuple("WitNode::RecordValue").field(e).finish()
                        }
                        WitNode::VariantValue(e) => {
                            f.debug_tuple("WitNode::VariantValue").field(e).finish()
                        }
                        WitNode::EnumValue(e) => {
                            f.debug_tuple("WitNode::EnumValue").field(e).finish()
                        }
                        WitNode::FlagsValue(e) => {
                            f.debug_tuple("WitNode::FlagsValue").field(e).finish()
                        }
                        WitNode::TupleValue(e) => {
                            f.debug_tuple("WitNode::TupleValue").field(e).finish()
                        }
                        WitNode::ListValue(e) => {
                            f.debug_tuple("WitNode::ListValue").field(e).finish()
                        }
                        WitNode::OptionValue(e) => {
                            f.debug_tuple("WitNode::OptionValue").field(e).finish()
                        }
                        WitNode::ResultValue(e) => {
                            f.debug_tuple("WitNode::ResultValue").field(e).finish()
                        }
                        WitNode::PrimU8(e) => {
                            f.debug_tuple("WitNode::PrimU8").field(e).finish()
                        }
                        WitNode::PrimU16(e) => {
                            f.debug_tuple("WitNode::PrimU16").field(e).finish()
                        }
                        WitNode::PrimU32(e) => {
                            f.debug_tuple("WitNode::PrimU32").field(e).finish()
                        }
                        WitNode::PrimU64(e) => {
                            f.debug_tuple("WitNode::PrimU64").field(e).finish()
                        }
                        WitNode::PrimS8(e) => {
                            f.debug_tuple("WitNode::PrimS8").field(e).finish()
                        }
                        WitNode::PrimS16(e) => {
                            f.debug_tuple("WitNode::PrimS16").field(e).finish()
                        }
                        WitNode::PrimS32(e) => {
                            f.debug_tuple("WitNode::PrimS32").field(e).finish()
                        }
                        WitNode::PrimS64(e) => {
                            f.debug_tuple("WitNode::PrimS64").field(e).finish()
                        }
                        WitNode::PrimFloat32(e) => {
                            f.debug_tuple("WitNode::PrimFloat32").field(e).finish()
                        }
                        WitNode::PrimFloat64(e) => {
                            f.debug_tuple("WitNode::PrimFloat64").field(e).finish()
                        }
                        WitNode::PrimChar(e) => {
                            f.debug_tuple("WitNode::PrimChar").field(e).finish()
                        }
                        WitNode::PrimBool(e) => {
                            f.debug_tuple("WitNode::PrimBool").field(e).finish()
                        }
                        WitNode::PrimString(e) => {
                            f.debug_tuple("WitNode::PrimString").field(e).finish()
                        }
                        WitNode::Handle(e) => {
                            f.debug_tuple("WitNode::Handle").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct WitValue {
                pub nodes: _rt::Vec<WitNode>,
            }
            impl ::core::fmt::Debug for WitValue {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("WitValue").field("nodes", &self.nodes).finish()
                }
            }
            #[derive(Clone)]
            pub struct ValueAndType {
                pub value: WitValue,
                pub typ: WitType,
            }
            impl ::core::fmt::Debug for ValueAndType {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("ValueAndType")
                        .field("value", &self.value)
                        .field("typ", &self.typ)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum RpcError {
                ProtocolError(_rt::String),
                Denied(_rt::String),
                NotFound(_rt::String),
                RemoteInternalError(_rt::String),
            }
            impl ::core::fmt::Debug for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        RpcError::ProtocolError(e) => {
                            f.debug_tuple("RpcError::ProtocolError").field(e).finish()
                        }
                        RpcError::Denied(e) => {
                            f.debug_tuple("RpcError::Denied").field(e).finish()
                        }
                        RpcError::NotFound(e) => {
                            f.debug_tuple("RpcError::NotFound").field(e).finish()
                        }
                        RpcError::RemoteInternalError(e) => {
                            f.debug_tuple("RpcError::RemoteInternalError")
                                .field(e)
                                .finish()
                        }
                    }
                }
            }
            impl ::core::fmt::Display for RpcError {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for RpcError {}
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct WasmRpc {
                handle: _rt::Resource<WasmRpc>,
            }
            impl WasmRpc {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for WasmRpc {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]wasm-rpc"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct FutureInvokeResult {
                handle: _rt::Resource<FutureInvokeResult>,
            }
            impl FutureInvokeResult {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for FutureInvokeResult {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]future-invoke-result"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct CancellationToken {
                handle: _rt::Resource<CancellationToken>,
            }
            impl CancellationToken {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for CancellationToken {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]cancellation-token"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Parses a UUID from a string
            pub fn parse_uuid(uuid: &str) -> Result<Uuid, _rt::String> {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 24]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 24]);
                    let vec0 = uuid;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "parse-uuid"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(ptr0.cast_mut(), len0, ptr1) };
                    let l3 = i32::from(*ptr1.add(0).cast::<u8>());
                    let result9 = match l3 {
                        0 => {
                            let e = {
                                let l4 = *ptr1.add(8).cast::<i64>();
                                let l5 = *ptr1.add(16).cast::<i64>();
                                Uuid {
                                    high_bits: l4 as u64,
                                    low_bits: l5 as u64,
                                }
                            };
                            Ok(e)
                        }
                        1 => {
                            let e = {
                                let l6 = *ptr1.add(8).cast::<*mut u8>();
                                let l7 = *ptr1
                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                    .cast::<usize>();
                                let len8 = l7;
                                let bytes8 = _rt::Vec::from_raw_parts(
                                    l6.cast(),
                                    len8,
                                    len8,
                                );
                                _rt::string_lift(bytes8)
                            };
                            Err(e)
                        }
                        _ => _rt::invalid_enum_discriminant(),
                    };
                    result9
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Converts a UUID to a string
            pub fn uuid_to_string(uuid: Uuid) -> _rt::String {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let Uuid { high_bits: high_bits0, low_bits: low_bits0 } = uuid;
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "uuid-to-string"]
                        fn wit_import2(_: i64, _: i64, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: i64, _: i64, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe {
                        wit_import2(
                            _rt::as_i64(high_bits0),
                            _rt::as_i64(low_bits0),
                            ptr1,
                        )
                    };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    let result6 = _rt::string_lift(bytes5);
                    result6
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new(worker_id: &WorkerId) -> Self {
                    unsafe {
                        let WorkerId {
                            component_id: component_id0,
                            worker_name: worker_name0,
                        } = worker_id;
                        let ComponentId { uuid: uuid1 } = component_id0;
                        let Uuid { high_bits: high_bits2, low_bits: low_bits2 } = uuid1;
                        let vec3 = worker_name0;
                        let ptr3 = vec3.as_ptr().cast::<u8>();
                        let len3 = vec3.len();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[constructor]wasm-rpc"]
                            fn wit_import4(_: i64, _: i64, _: *mut u8, _: usize) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import4(
                            _: i64,
                            _: i64,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import4(
                                _rt::as_i64(high_bits2),
                                _rt::as_i64(low_bits2),
                                ptr3.cast_mut(),
                                len3,
                            )
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn ephemeral(component_id: ComponentId) -> WasmRpc {
                    unsafe {
                        let ComponentId { uuid: uuid0 } = component_id;
                        let Uuid { high_bits: high_bits1, low_bits: low_bits1 } = uuid0;
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[static]wasm-rpc.ephemeral"]
                            fn wit_import2(_: i64, _: i64) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import2(_: i64, _: i64) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import2(_rt::as_i64(high_bits1), _rt::as_i64(low_bits1))
                        };
                        unsafe { WasmRpc::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<WitValue, RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke-and-await"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result78 = match l15 {
                            0 => {
                                let e = {
                                    let l16 = *ptr13
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l17 = *ptr13
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base63 = l16;
                                    let len63 = l17;
                                    let mut result63 = _rt::Vec::with_capacity(len63);
                                    for i in 0..len63 {
                                        let base = base63
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        let e63 = {
                                            let l18 = i32::from(*base.add(0).cast::<u8>());
                                            let v62 = match l18 {
                                                0 => {
                                                    let e62 = {
                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                        let l20 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len21 = l20;
                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                    };
                                                    WitNode::RecordValue(e62)
                                                }
                                                1 => {
                                                    let e62 = {
                                                        let l22 = *base.add(8).cast::<i32>();
                                                        let l23 = i32::from(*base.add(12).cast::<u8>());
                                                        (
                                                            l22 as u32,
                                                            match l23 {
                                                                0 => None,
                                                                1 => {
                                                                    let e = {
                                                                        let l24 = *base.add(16).cast::<i32>();
                                                                        l24
                                                                    };
                                                                    Some(e)
                                                                }
                                                                _ => _rt::invalid_enum_discriminant(),
                                                            },
                                                        )
                                                    };
                                                    WitNode::VariantValue(e62)
                                                }
                                                2 => {
                                                    let e62 = {
                                                        let l25 = *base.add(8).cast::<i32>();
                                                        l25 as u32
                                                    };
                                                    WitNode::EnumValue(e62)
                                                }
                                                3 => {
                                                    let e62 = {
                                                        let l26 = *base.add(8).cast::<*mut u8>();
                                                        let l27 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let base29 = l26;
                                                        let len29 = l27;
                                                        let mut result29 = _rt::Vec::with_capacity(len29);
                                                        for i in 0..len29 {
                                                            let base = base29.add(i * 1);
                                                            let e29 = {
                                                                let l28 = i32::from(*base.add(0).cast::<u8>());
                                                                _rt::bool_lift(l28 as u8)
                                                            };
                                                            result29.push(e29);
                                                        }
                                                        _rt::cabi_dealloc(base29, len29 * 1, 1);
                                                        result29
                                                    };
                                                    WitNode::FlagsValue(e62)
                                                }
                                                4 => {
                                                    let e62 = {
                                                        let l30 = *base.add(8).cast::<*mut u8>();
                                                        let l31 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len32 = l31;
                                                        _rt::Vec::from_raw_parts(l30.cast(), len32, len32)
                                                    };
                                                    WitNode::TupleValue(e62)
                                                }
                                                5 => {
                                                    let e62 = {
                                                        let l33 = *base.add(8).cast::<*mut u8>();
                                                        let l34 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len35 = l34;
                                                        _rt::Vec::from_raw_parts(l33.cast(), len35, len35)
                                                    };
                                                    WitNode::ListValue(e62)
                                                }
                                                6 => {
                                                    let e62 = {
                                                        let l36 = i32::from(*base.add(8).cast::<u8>());
                                                        match l36 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l37 = *base.add(12).cast::<i32>();
                                                                    l37
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::OptionValue(e62)
                                                }
                                                7 => {
                                                    let e62 = {
                                                        let l38 = i32::from(*base.add(8).cast::<u8>());
                                                        match l38 {
                                                            0 => {
                                                                let e = {
                                                                    let l39 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l39 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l40 = *base.add(16).cast::<i32>();
                                                                                l40
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Ok(e)
                                                            }
                                                            1 => {
                                                                let e = {
                                                                    let l41 = i32::from(*base.add(12).cast::<u8>());
                                                                    match l41 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l42 = *base.add(16).cast::<i32>();
                                                                                l42
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                Err(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        }
                                                    };
                                                    WitNode::ResultValue(e62)
                                                }
                                                8 => {
                                                    let e62 = {
                                                        let l43 = i32::from(*base.add(8).cast::<u8>());
                                                        l43 as u8
                                                    };
                                                    WitNode::PrimU8(e62)
                                                }
                                                9 => {
                                                    let e62 = {
                                                        let l44 = i32::from(*base.add(8).cast::<u16>());
                                                        l44 as u16
                                                    };
                                                    WitNode::PrimU16(e62)
                                                }
                                                10 => {
                                                    let e62 = {
                                                        let l45 = *base.add(8).cast::<i32>();
                                                        l45 as u32
                                                    };
                                                    WitNode::PrimU32(e62)
                                                }
                                                11 => {
                                                    let e62 = {
                                                        let l46 = *base.add(8).cast::<i64>();
                                                        l46 as u64
                                                    };
                                                    WitNode::PrimU64(e62)
                                                }
                                                12 => {
                                                    let e62 = {
                                                        let l47 = i32::from(*base.add(8).cast::<i8>());
                                                        l47 as i8
                                                    };
                                                    WitNode::PrimS8(e62)
                                                }
                                                13 => {
                                                    let e62 = {
                                                        let l48 = i32::from(*base.add(8).cast::<i16>());
                                                        l48 as i16
                                                    };
                                                    WitNode::PrimS16(e62)
                                                }
                                                14 => {
                                                    let e62 = {
                                                        let l49 = *base.add(8).cast::<i32>();
                                                        l49
                                                    };
                                                    WitNode::PrimS32(e62)
                                                }
                                                15 => {
                                                    let e62 = {
                                                        let l50 = *base.add(8).cast::<i64>();
                                                        l50
                                                    };
                                                    WitNode::PrimS64(e62)
                                                }
                                                16 => {
                                                    let e62 = {
                                                        let l51 = *base.add(8).cast::<f32>();
                                                        l51
                                                    };
                                                    WitNode::PrimFloat32(e62)
                                                }
                                                17 => {
                                                    let e62 = {
                                                        let l52 = *base.add(8).cast::<f64>();
                                                        l52
                                                    };
                                                    WitNode::PrimFloat64(e62)
                                                }
                                                18 => {
                                                    let e62 = {
                                                        let l53 = *base.add(8).cast::<i32>();
                                                        _rt::char_lift(l53 as u32)
                                                    };
                                                    WitNode::PrimChar(e62)
                                                }
                                                19 => {
                                                    let e62 = {
                                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                                        _rt::bool_lift(l54 as u8)
                                                    };
                                                    WitNode::PrimBool(e62)
                                                }
                                                20 => {
                                                    let e62 = {
                                                        let l55 = *base.add(8).cast::<*mut u8>();
                                                        let l56 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len57 = l56;
                                                        let bytes57 = _rt::Vec::from_raw_parts(
                                                            l55.cast(),
                                                            len57,
                                                            len57,
                                                        );
                                                        _rt::string_lift(bytes57)
                                                    };
                                                    WitNode::PrimString(e62)
                                                }
                                                n => {
                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                    let e62 = {
                                                        let l58 = *base.add(8).cast::<*mut u8>();
                                                        let l59 = *base
                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<usize>();
                                                        let len60 = l59;
                                                        let bytes60 = _rt::Vec::from_raw_parts(
                                                            l58.cast(),
                                                            len60,
                                                            len60,
                                                        );
                                                        let l61 = *base
                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i64>();
                                                        (
                                                            Uri {
                                                                value: _rt::string_lift(bytes60),
                                                            },
                                                            l61 as u64,
                                                        )
                                                    };
                                                    WitNode::Handle(e62)
                                                }
                                            };
                                            v62
                                        };
                                        result63.push(e63);
                                    }
                                    _rt::cabi_dealloc(
                                        base63,
                                        len63 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    WitValue { nodes: result63 }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l64 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v77 = match l64 {
                                        0 => {
                                            let e77 = {
                                                let l65 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l66 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len67 = l66;
                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                    l65.cast(),
                                                    len67,
                                                    len67,
                                                );
                                                _rt::string_lift(bytes67)
                                            };
                                            RpcError::ProtocolError(e77)
                                        }
                                        1 => {
                                            let e77 = {
                                                let l68 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l69 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len70 = l69;
                                                let bytes70 = _rt::Vec::from_raw_parts(
                                                    l68.cast(),
                                                    len70,
                                                    len70,
                                                );
                                                _rt::string_lift(bytes70)
                                            };
                                            RpcError::Denied(e77)
                                        }
                                        2 => {
                                            let e77 = {
                                                let l71 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l72 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len73 = l72;
                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                    l71.cast(),
                                                    len73,
                                                    len73,
                                                );
                                                _rt::string_lift(bytes73)
                                            };
                                            RpcError::NotFound(e77)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e77 = {
                                                let l74 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l75 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len76 = l75;
                                                let bytes76 = _rt::Vec::from_raw_parts(
                                                    l74.cast(),
                                                    len76,
                                                    len76,
                                                );
                                                _rt::string_lift(bytes76)
                                            };
                                            RpcError::RemoteInternalError(e77)
                                        }
                                    };
                                    v77
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result78
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn invoke(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> Result<(), RpcError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 4 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 4
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        let ptr13 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.invoke"]
                            fn wit_import14(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                                ptr13,
                            )
                        };
                        let l15 = i32::from(*ptr13.add(0).cast::<u8>());
                        let result30 = match l15 {
                            0 => {
                                let e = ();
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l16 = i32::from(
                                        *ptr13.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    let v29 = match l16 {
                                        0 => {
                                            let e29 = {
                                                let l17 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l18 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len19 = l18;
                                                let bytes19 = _rt::Vec::from_raw_parts(
                                                    l17.cast(),
                                                    len19,
                                                    len19,
                                                );
                                                _rt::string_lift(bytes19)
                                            };
                                            RpcError::ProtocolError(e29)
                                        }
                                        1 => {
                                            let e29 = {
                                                let l20 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l21 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len22 = l21;
                                                let bytes22 = _rt::Vec::from_raw_parts(
                                                    l20.cast(),
                                                    len22,
                                                    len22,
                                                );
                                                _rt::string_lift(bytes22)
                                            };
                                            RpcError::Denied(e29)
                                        }
                                        2 => {
                                            let e29 = {
                                                let l23 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l24 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len25 = l24;
                                                let bytes25 = _rt::Vec::from_raw_parts(
                                                    l23.cast(),
                                                    len25,
                                                    len25,
                                                );
                                                _rt::string_lift(bytes25)
                                            };
                                            RpcError::NotFound(e29)
                                        }
                                        n => {
                                            debug_assert_eq!(n, 3, "invalid enum discriminant");
                                            let e29 = {
                                                let l26 = *ptr13
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l27 = *ptr13
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len28 = l27;
                                                let bytes28 = _rt::Vec::from_raw_parts(
                                                    l26.cast(),
                                                    len28,
                                                    len28,
                                                );
                                                _rt::string_lift(bytes28)
                                            };
                                            RpcError::RemoteInternalError(e29)
                                        }
                                    };
                                    v29
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        result30
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                pub fn async_invoke_and_await(
                    &self,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> FutureInvokeResult {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let vec0 = function_name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec12 = function_params;
                        let len12 = vec12.len();
                        let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec12.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result12 = if layout12.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout12);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec12.into_iter().enumerate() {
                            let base = result12
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes1 } = e;
                                let vec11 = nodes1;
                                let len11 = vec11.len();
                                let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec11.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result11 = if layout11.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout11);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec11.into_iter().enumerate() {
                                    let base = result11
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec2 = e;
                                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                                let len2 = vec2.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len2;
                                                *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t3_0, t3_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                                match t3_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec4 = e;
                                                let len4 = vec4.len();
                                                let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec4.len() * 1,
                                                    1,
                                                );
                                                let result4 = if layout4.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout4);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec4.into_iter().enumerate() {
                                                    let base = result4.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len4;
                                                *base.add(8).cast::<*mut u8>() = result4;
                                                cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec5 = e;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t8_0, t8_1) = e;
                                                let Uri { value: value9 } = t8_0;
                                                let vec10 = value9;
                                                let ptr10 = vec10.as_ptr().cast::<u8>();
                                                let len10 = vec10.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len10;
                                                *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t8_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len11;
                                *base.add(0).cast::<*mut u8>() = result11;
                                cleanup_list.extend_from_slice(&[(result11, layout11)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.async-invoke-and-await"]
                            fn wit_import13(
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import13(
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import13(
                                (self).handle() as i32,
                                ptr0.cast_mut(),
                                len0,
                                result12,
                                len12,
                            )
                        };
                        if layout12.size() != 0 {
                            _rt::alloc::dealloc(result12.cast(), layout12);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { FutureInvokeResult::from_handle(ret as u32) }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later
                pub fn schedule_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> () {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            );
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) {
                            unreachable!()
                        }
                        unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                    }
                }
            }
            impl WasmRpc {
                #[allow(unused_unsafe, clippy::all)]
                /// Schedule invocation for later. Call cancel on the returned resource to cancel the invocation before the scheduled time.
                pub fn schedule_cancelable_invocation(
                    &self,
                    scheduled_time: Datetime,
                    function_name: &str,
                    function_params: &[WitValue],
                ) -> CancellationToken {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        let super::super::super::wasi::clocks::wall_clock::Datetime {
                            seconds: seconds0,
                            nanoseconds: nanoseconds0,
                        } = scheduled_time;
                        let vec1 = function_name;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let vec13 = function_params;
                        let len13 = vec13.len();
                        let layout13 = _rt::alloc::Layout::from_size_align_unchecked(
                            vec13.len() * (2 * ::core::mem::size_of::<*const u8>()),
                            ::core::mem::size_of::<*const u8>(),
                        );
                        let result13 = if layout13.size() != 0 {
                            let ptr = _rt::alloc::alloc(layout13).cast::<u8>();
                            if ptr.is_null() {
                                _rt::alloc::handle_alloc_error(layout13);
                            }
                            ptr
                        } else {
                            ::core::ptr::null_mut()
                        };
                        for (i, e) in vec13.into_iter().enumerate() {
                            let base = result13
                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                            {
                                let WitValue { nodes: nodes2 } = e;
                                let vec12 = nodes2;
                                let len12 = vec12.len();
                                let layout12 = _rt::alloc::Layout::from_size_align_unchecked(
                                    vec12.len()
                                        * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                    8,
                                );
                                let result12 = if layout12.size() != 0 {
                                    let ptr = _rt::alloc::alloc(layout12).cast::<u8>();
                                    if ptr.is_null() {
                                        _rt::alloc::handle_alloc_error(layout12);
                                    }
                                    ptr
                                } else {
                                    ::core::ptr::null_mut()
                                };
                                for (i, e) in vec12.into_iter().enumerate() {
                                    let base = result12
                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                    {
                                        match e {
                                            WitNode::RecordValue(e) => {
                                                *base.add(0).cast::<u8>() = (0i32) as u8;
                                                let vec3 = e;
                                                let ptr3 = vec3.as_ptr().cast::<u8>();
                                                let len3 = vec3.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len3;
                                                *base.add(8).cast::<*mut u8>() = ptr3.cast_mut();
                                            }
                                            WitNode::VariantValue(e) => {
                                                *base.add(0).cast::<u8>() = (1i32) as u8;
                                                let (t4_0, t4_1) = e;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(t4_0);
                                                match t4_1 {
                                                    Some(e) => {
                                                        *base.add(12).cast::<u8>() = (1i32) as u8;
                                                        *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(12).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::EnumValue(e) => {
                                                *base.add(0).cast::<u8>() = (2i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::FlagsValue(e) => {
                                                *base.add(0).cast::<u8>() = (3i32) as u8;
                                                let vec5 = e;
                                                let len5 = vec5.len();
                                                let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec5.len() * 1,
                                                    1,
                                                );
                                                let result5 = if layout5.size() != 0 {
                                                    let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                                    if ptr.is_null() {
                                                        _rt::alloc::handle_alloc_error(layout5);
                                                    }
                                                    ptr
                                                } else {
                                                    ::core::ptr::null_mut()
                                                };
                                                for (i, e) in vec5.into_iter().enumerate() {
                                                    let base = result5.add(i * 1);
                                                    {
                                                        *base.add(0).cast::<u8>() = (match e {
                                                            true => 1,
                                                            false => 0,
                                                        }) as u8;
                                                    }
                                                }
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len5;
                                                *base.add(8).cast::<*mut u8>() = result5;
                                                cleanup_list.extend_from_slice(&[(result5, layout5)]);
                                            }
                                            WitNode::TupleValue(e) => {
                                                *base.add(0).cast::<u8>() = (4i32) as u8;
                                                let vec6 = e;
                                                let ptr6 = vec6.as_ptr().cast::<u8>();
                                                let len6 = vec6.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len6;
                                                *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                            }
                                            WitNode::ListValue(e) => {
                                                *base.add(0).cast::<u8>() = (5i32) as u8;
                                                let vec7 = e;
                                                let ptr7 = vec7.as_ptr().cast::<u8>();
                                                let len7 = vec7.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len7;
                                                *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                            }
                                            WitNode::OptionValue(e) => {
                                                *base.add(0).cast::<u8>() = (6i32) as u8;
                                                match e {
                                                    Some(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                    }
                                                    None => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                    }
                                                };
                                            }
                                            WitNode::ResultValue(e) => {
                                                *base.add(0).cast::<u8>() = (7i32) as u8;
                                                match e {
                                                    Ok(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                    Err(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        match e {
                                                            Some(e) => {
                                                                *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                            }
                                                            None => {
                                                                *base.add(12).cast::<u8>() = (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                };
                                            }
                                            WitNode::PrimU8(e) => {
                                                *base.add(0).cast::<u8>() = (8i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimU16(e) => {
                                                *base.add(0).cast::<u8>() = (9i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimU32(e) => {
                                                *base.add(0).cast::<u8>() = (10i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimU64(e) => {
                                                *base.add(0).cast::<u8>() = (11i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimS8(e) => {
                                                *base.add(0).cast::<u8>() = (12i32) as u8;
                                                *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                            }
                                            WitNode::PrimS16(e) => {
                                                *base.add(0).cast::<u8>() = (13i32) as u8;
                                                *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                            }
                                            WitNode::PrimS32(e) => {
                                                *base.add(0).cast::<u8>() = (14i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimS64(e) => {
                                                *base.add(0).cast::<u8>() = (15i32) as u8;
                                                *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                            }
                                            WitNode::PrimFloat32(e) => {
                                                *base.add(0).cast::<u8>() = (16i32) as u8;
                                                *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                            }
                                            WitNode::PrimFloat64(e) => {
                                                *base.add(0).cast::<u8>() = (17i32) as u8;
                                                *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                            }
                                            WitNode::PrimChar(e) => {
                                                *base.add(0).cast::<u8>() = (18i32) as u8;
                                                *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                            }
                                            WitNode::PrimBool(e) => {
                                                *base.add(0).cast::<u8>() = (19i32) as u8;
                                                *base.add(8).cast::<u8>() = (match e {
                                                    true => 1,
                                                    false => 0,
                                                }) as u8;
                                            }
                                            WitNode::PrimString(e) => {
                                                *base.add(0).cast::<u8>() = (20i32) as u8;
                                                let vec8 = e;
                                                let ptr8 = vec8.as_ptr().cast::<u8>();
                                                let len8 = vec8.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len8;
                                                *base.add(8).cast::<*mut u8>() = ptr8.cast_mut();
                                            }
                                            WitNode::Handle(e) => {
                                                *base.add(0).cast::<u8>() = (21i32) as u8;
                                                let (t9_0, t9_1) = e;
                                                let Uri { value: value10 } = t9_0;
                                                let vec11 = value10;
                                                let ptr11 = vec11.as_ptr().cast::<u8>();
                                                let len11 = vec11.len();
                                                *base
                                                    .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>() = len11;
                                                *base.add(8).cast::<*mut u8>() = ptr11.cast_mut();
                                                *base
                                                    .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i64>() = _rt::as_i64(t9_1);
                                            }
                                        }
                                    }
                                }
                                *base
                                    .add(::core::mem::size_of::<*const u8>())
                                    .cast::<usize>() = len12;
                                *base.add(0).cast::<*mut u8>() = result12;
                                cleanup_list.extend_from_slice(&[(result12, layout12)]);
                            }
                        }
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]wasm-rpc.schedule-cancelable-invocation"]
                            fn wit_import14(
                                _: i32,
                                _: i64,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                                _: usize,
                            ) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import14(
                            _: i32,
                            _: i64,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                        ) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe {
                            wit_import14(
                                (self).handle() as i32,
                                _rt::as_i64(seconds0),
                                _rt::as_i32(nanoseconds0),
                                ptr1.cast_mut(),
                                len1,
                                result13,
                                len13,
                            )
                        };
                        if layout13.size() != 0 {
                            _rt::alloc::dealloc(result13.cast(), layout13);
                        }
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        unsafe { CancellationToken::from_handle(ret as u32) }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn subscribe(&self) -> Pollable {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.subscribe"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        unsafe {
                            super::super::super::wasi::io::poll::Pollable::from_handle(
                                ret as u32,
                            )
                        }
                    }
                }
            }
            impl FutureInvokeResult {
                #[allow(unused_unsafe, clippy::all)]
                pub fn get(&self) -> Option<Result<WitValue, RpcError>> {
                    unsafe {
                        #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                        #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                        struct RetArea(
                            [::core::mem::MaybeUninit<
                                u8,
                            >; 5 * ::core::mem::size_of::<*const u8>()],
                        );
                        let mut ret_area = RetArea(
                            [::core::mem::MaybeUninit::uninit(); 5
                                * ::core::mem::size_of::<*const u8>()],
                        );
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]future-invoke-result.get"]
                            fn wit_import1(_: i32, _: *mut u8);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import1(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        unsafe { wit_import1((self).handle() as i32, ptr0) };
                        let l2 = i32::from(*ptr0.add(0).cast::<u8>());
                        let result66 = match l2 {
                            0 => None,
                            1 => {
                                let e = {
                                    let l3 = i32::from(
                                        *ptr0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                    );
                                    match l3 {
                                        0 => {
                                            let e = {
                                                let l4 = *ptr0
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<*mut u8>();
                                                let l5 = *ptr0
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let base51 = l4;
                                                let len51 = l5;
                                                let mut result51 = _rt::Vec::with_capacity(len51);
                                                for i in 0..len51 {
                                                    let base = base51
                                                        .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                    let e51 = {
                                                        let l6 = i32::from(*base.add(0).cast::<u8>());
                                                        let v50 = match l6 {
                                                            0 => {
                                                                let e50 = {
                                                                    let l7 = *base.add(8).cast::<*mut u8>();
                                                                    let l8 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len9 = l8;
                                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                };
                                                                WitNode::RecordValue(e50)
                                                            }
                                                            1 => {
                                                                let e50 = {
                                                                    let l10 = *base.add(8).cast::<i32>();
                                                                    let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                    (
                                                                        l10 as u32,
                                                                        match l11 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l12 = *base.add(16).cast::<i32>();
                                                                                    l12
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        },
                                                                    )
                                                                };
                                                                WitNode::VariantValue(e50)
                                                            }
                                                            2 => {
                                                                let e50 = {
                                                                    let l13 = *base.add(8).cast::<i32>();
                                                                    l13 as u32
                                                                };
                                                                WitNode::EnumValue(e50)
                                                            }
                                                            3 => {
                                                                let e50 = {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base17 = l14;
                                                                    let len17 = l15;
                                                                    let mut result17 = _rt::Vec::with_capacity(len17);
                                                                    for i in 0..len17 {
                                                                        let base = base17.add(i * 1);
                                                                        let e17 = {
                                                                            let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                            _rt::bool_lift(l16 as u8)
                                                                        };
                                                                        result17.push(e17);
                                                                    }
                                                                    _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                    result17
                                                                };
                                                                WitNode::FlagsValue(e50)
                                                            }
                                                            4 => {
                                                                let e50 = {
                                                                    let l18 = *base.add(8).cast::<*mut u8>();
                                                                    let l19 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len20 = l19;
                                                                    _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                };
                                                                WitNode::TupleValue(e50)
                                                            }
                                                            5 => {
                                                                let e50 = {
                                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                                    let l22 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len23 = l22;
                                                                    _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                };
                                                                WitNode::ListValue(e50)
                                                            }
                                                            6 => {
                                                                let e50 = {
                                                                    let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l24 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l25 = *base.add(12).cast::<i32>();
                                                                                l25
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::OptionValue(e50)
                                                            }
                                                            7 => {
                                                                let e50 = {
                                                                    let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                    match l26 {
                                                                        0 => {
                                                                            let e = {
                                                                                let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l27 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l28 = *base.add(16).cast::<i32>();
                                                                                            l28
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Ok(e)
                                                                        }
                                                                        1 => {
                                                                            let e = {
                                                                                let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                match l29 {
                                                                                    0 => None,
                                                                                    1 => {
                                                                                        let e = {
                                                                                            let l30 = *base.add(16).cast::<i32>();
                                                                                            l30
                                                                                        };
                                                                                        Some(e)
                                                                                    }
                                                                                    _ => _rt::invalid_enum_discriminant(),
                                                                                }
                                                                            };
                                                                            Err(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    }
                                                                };
                                                                WitNode::ResultValue(e50)
                                                            }
                                                            8 => {
                                                                let e50 = {
                                                                    let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                    l31 as u8
                                                                };
                                                                WitNode::PrimU8(e50)
                                                            }
                                                            9 => {
                                                                let e50 = {
                                                                    let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                    l32 as u16
                                                                };
                                                                WitNode::PrimU16(e50)
                                                            }
                                                            10 => {
                                                                let e50 = {
                                                                    let l33 = *base.add(8).cast::<i32>();
                                                                    l33 as u32
                                                                };
                                                                WitNode::PrimU32(e50)
                                                            }
                                                            11 => {
                                                                let e50 = {
                                                                    let l34 = *base.add(8).cast::<i64>();
                                                                    l34 as u64
                                                                };
                                                                WitNode::PrimU64(e50)
                                                            }
                                                            12 => {
                                                                let e50 = {
                                                                    let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                    l35 as i8
                                                                };
                                                                WitNode::PrimS8(e50)
                                                            }
                                                            13 => {
                                                                let e50 = {
                                                                    let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                    l36 as i16
                                                                };
                                                                WitNode::PrimS16(e50)
                                                            }
                                                            14 => {
                                                                let e50 = {
                                                                    let l37 = *base.add(8).cast::<i32>();
                                                                    l37
                                                                };
                                                                WitNode::PrimS32(e50)
                                                            }
                                                            15 => {
                                                                let e50 = {
                                                                    let l38 = *base.add(8).cast::<i64>();
                                                                    l38
                                                                };
                                                                WitNode::PrimS64(e50)
                                                            }
                                                            16 => {
                                                                let e50 = {
                                                                    let l39 = *base.add(8).cast::<f32>();
                                                                    l39
                                                                };
                                                                WitNode::PrimFloat32(e50)
                                                            }
                                                            17 => {
                                                                let e50 = {
                                                                    let l40 = *base.add(8).cast::<f64>();
                                                                    l40
                                                                };
                                                                WitNode::PrimFloat64(e50)
                                                            }
                                                            18 => {
                                                                let e50 = {
                                                                    let l41 = *base.add(8).cast::<i32>();
                                                                    _rt::char_lift(l41 as u32)
                                                                };
                                                                WitNode::PrimChar(e50)
                                                            }
                                                            19 => {
                                                                let e50 = {
                                                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                    _rt::bool_lift(l42 as u8)
                                                                };
                                                                WitNode::PrimBool(e50)
                                                            }
                                                            20 => {
                                                                let e50 = {
                                                                    let l43 = *base.add(8).cast::<*mut u8>();
                                                                    let l44 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len45 = l44;
                                                                    let bytes45 = _rt::Vec::from_raw_parts(
                                                                        l43.cast(),
                                                                        len45,
                                                                        len45,
                                                                    );
                                                                    _rt::string_lift(bytes45)
                                                                };
                                                                WitNode::PrimString(e50)
                                                            }
                                                            n => {
                                                                debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                let e50 = {
                                                                    let l46 = *base.add(8).cast::<*mut u8>();
                                                                    let l47 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let len48 = l47;
                                                                    let bytes48 = _rt::Vec::from_raw_parts(
                                                                        l46.cast(),
                                                                        len48,
                                                                        len48,
                                                                    );
                                                                    let l49 = *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>();
                                                                    (
                                                                        Uri {
                                                                            value: _rt::string_lift(bytes48),
                                                                        },
                                                                        l49 as u64,
                                                                    )
                                                                };
                                                                WitNode::Handle(e50)
                                                            }
                                                        };
                                                        v50
                                                    };
                                                    result51.push(e51);
                                                }
                                                _rt::cabi_dealloc(
                                                    base51,
                                                    len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                    8,
                                                );
                                                WitValue { nodes: result51 }
                                            };
                                            Ok(e)
                                        }
                                        1 => {
                                            let e = {
                                                let l52 = i32::from(
                                                    *ptr0
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                let v65 = match l52 {
                                                    0 => {
                                                        let e65 = {
                                                            let l53 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l54 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len55 = l54;
                                                            let bytes55 = _rt::Vec::from_raw_parts(
                                                                l53.cast(),
                                                                len55,
                                                                len55,
                                                            );
                                                            _rt::string_lift(bytes55)
                                                        };
                                                        RpcError::ProtocolError(e65)
                                                    }
                                                    1 => {
                                                        let e65 = {
                                                            let l56 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l57 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len58 = l57;
                                                            let bytes58 = _rt::Vec::from_raw_parts(
                                                                l56.cast(),
                                                                len58,
                                                                len58,
                                                            );
                                                            _rt::string_lift(bytes58)
                                                        };
                                                        RpcError::Denied(e65)
                                                    }
                                                    2 => {
                                                        let e65 = {
                                                            let l59 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l60 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len61 = l60;
                                                            let bytes61 = _rt::Vec::from_raw_parts(
                                                                l59.cast(),
                                                                len61,
                                                                len61,
                                                            );
                                                            _rt::string_lift(bytes61)
                                                        };
                                                        RpcError::NotFound(e65)
                                                    }
                                                    n => {
                                                        debug_assert_eq!(n, 3, "invalid enum discriminant");
                                                        let e65 = {
                                                            let l62 = *ptr0
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l63 = *ptr0
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let len64 = l63;
                                                            let bytes64 = _rt::Vec::from_raw_parts(
                                                                l62.cast(),
                                                                len64,
                                                                len64,
                                                            );
                                                            _rt::string_lift(bytes64)
                                                        };
                                                        RpcError::RemoteInternalError(e65)
                                                    }
                                                };
                                                v65
                                            };
                                            Err(e)
                                        }
                                        _ => _rt::invalid_enum_discriminant(),
                                    }
                                };
                                Some(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        };
                        result66
                    }
                }
            }
            impl CancellationToken {
                #[allow(unused_unsafe, clippy::all)]
                pub fn cancel(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                        unsafe extern "C" {
                            #[link_name = "[method]cancellation-token.cancel"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_value(vnt: &ValueAndType) -> WitValue {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec29 = nodes12;
                    let len29 = vec29.len();
                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec29.len() * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result29 = if layout29.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout29);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec29.into_iter().enumerate() {
                        let base = result29
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let NamedWitTypeNode {
                                name: name13,
                                owner: owner13,
                                type_: type_13,
                            } = e;
                            match name13 {
                                Some(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match owner13 {
                                Some(e) => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match type_13 {
                                WitTypeNode::RecordType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(t16_1);
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec21 = e;
                                    let len21 = vec21.len();
                                    let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec21.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result21 = if layout21.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout21);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec21.into_iter().enumerate() {
                                        let base = result21
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t19_0, t19_1) = e;
                                            let vec20 = t19_0;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                            match t19_1 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result21;
                                    cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec23 = e;
                                    let len23 = vec23.len();
                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec23.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result23 = if layout23.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout23);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec23.into_iter().enumerate() {
                                        let base = result23
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec22 = e;
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result23;
                                    cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec25 = e;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec24 = e;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result25;
                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec26 = e;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let (t27_0, t27_1) = e;
                                    match t27_0 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t27_1 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (21i32) as u8;
                                    let (t28_0, t28_1) = e;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t28_0);
                                    *base
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (t28_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr30 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "extract-value"]
                        fn wit_import31(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import31(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import31(result11, len11, result29, len29, ptr30) };
                    let l32 = *ptr30.add(0).cast::<*mut u8>();
                    let l33 = *ptr30
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base79 = l32;
                    let len79 = l33;
                    let mut result79 = _rt::Vec::with_capacity(len79);
                    for i in 0..len79 {
                        let base = base79
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        let e79 = {
                            let l34 = i32::from(*base.add(0).cast::<u8>());
                            let v78 = match l34 {
                                0 => {
                                    let e78 = {
                                        let l35 = *base.add(8).cast::<*mut u8>();
                                        let l36 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len37 = l36;
                                        _rt::Vec::from_raw_parts(l35.cast(), len37, len37)
                                    };
                                    WitNode::RecordValue(e78)
                                }
                                1 => {
                                    let e78 = {
                                        let l38 = *base.add(8).cast::<i32>();
                                        let l39 = i32::from(*base.add(12).cast::<u8>());
                                        (
                                            l38 as u32,
                                            match l39 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l40 = *base.add(16).cast::<i32>();
                                                        l40
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitNode::VariantValue(e78)
                                }
                                2 => {
                                    let e78 = {
                                        let l41 = *base.add(8).cast::<i32>();
                                        l41 as u32
                                    };
                                    WitNode::EnumValue(e78)
                                }
                                3 => {
                                    let e78 = {
                                        let l42 = *base.add(8).cast::<*mut u8>();
                                        let l43 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base45 = l42;
                                        let len45 = l43;
                                        let mut result45 = _rt::Vec::with_capacity(len45);
                                        for i in 0..len45 {
                                            let base = base45.add(i * 1);
                                            let e45 = {
                                                let l44 = i32::from(*base.add(0).cast::<u8>());
                                                _rt::bool_lift(l44 as u8)
                                            };
                                            result45.push(e45);
                                        }
                                        _rt::cabi_dealloc(base45, len45 * 1, 1);
                                        result45
                                    };
                                    WitNode::FlagsValue(e78)
                                }
                                4 => {
                                    let e78 = {
                                        let l46 = *base.add(8).cast::<*mut u8>();
                                        let l47 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len48 = l47;
                                        _rt::Vec::from_raw_parts(l46.cast(), len48, len48)
                                    };
                                    WitNode::TupleValue(e78)
                                }
                                5 => {
                                    let e78 = {
                                        let l49 = *base.add(8).cast::<*mut u8>();
                                        let l50 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len51 = l50;
                                        _rt::Vec::from_raw_parts(l49.cast(), len51, len51)
                                    };
                                    WitNode::ListValue(e78)
                                }
                                6 => {
                                    let e78 = {
                                        let l52 = i32::from(*base.add(8).cast::<u8>());
                                        match l52 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l53 = *base.add(12).cast::<i32>();
                                                    l53
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::OptionValue(e78)
                                }
                                7 => {
                                    let e78 = {
                                        let l54 = i32::from(*base.add(8).cast::<u8>());
                                        match l54 {
                                            0 => {
                                                let e = {
                                                    let l55 = i32::from(*base.add(12).cast::<u8>());
                                                    match l55 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l56 = *base.add(16).cast::<i32>();
                                                                l56
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Ok(e)
                                            }
                                            1 => {
                                                let e = {
                                                    let l57 = i32::from(*base.add(12).cast::<u8>());
                                                    match l57 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l58 = *base.add(16).cast::<i32>();
                                                                l58
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    }
                                                };
                                                Err(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        }
                                    };
                                    WitNode::ResultValue(e78)
                                }
                                8 => {
                                    let e78 = {
                                        let l59 = i32::from(*base.add(8).cast::<u8>());
                                        l59 as u8
                                    };
                                    WitNode::PrimU8(e78)
                                }
                                9 => {
                                    let e78 = {
                                        let l60 = i32::from(*base.add(8).cast::<u16>());
                                        l60 as u16
                                    };
                                    WitNode::PrimU16(e78)
                                }
                                10 => {
                                    let e78 = {
                                        let l61 = *base.add(8).cast::<i32>();
                                        l61 as u32
                                    };
                                    WitNode::PrimU32(e78)
                                }
                                11 => {
                                    let e78 = {
                                        let l62 = *base.add(8).cast::<i64>();
                                        l62 as u64
                                    };
                                    WitNode::PrimU64(e78)
                                }
                                12 => {
                                    let e78 = {
                                        let l63 = i32::from(*base.add(8).cast::<i8>());
                                        l63 as i8
                                    };
                                    WitNode::PrimS8(e78)
                                }
                                13 => {
                                    let e78 = {
                                        let l64 = i32::from(*base.add(8).cast::<i16>());
                                        l64 as i16
                                    };
                                    WitNode::PrimS16(e78)
                                }
                                14 => {
                                    let e78 = {
                                        let l65 = *base.add(8).cast::<i32>();
                                        l65
                                    };
                                    WitNode::PrimS32(e78)
                                }
                                15 => {
                                    let e78 = {
                                        let l66 = *base.add(8).cast::<i64>();
                                        l66
                                    };
                                    WitNode::PrimS64(e78)
                                }
                                16 => {
                                    let e78 = {
                                        let l67 = *base.add(8).cast::<f32>();
                                        l67
                                    };
                                    WitNode::PrimFloat32(e78)
                                }
                                17 => {
                                    let e78 = {
                                        let l68 = *base.add(8).cast::<f64>();
                                        l68
                                    };
                                    WitNode::PrimFloat64(e78)
                                }
                                18 => {
                                    let e78 = {
                                        let l69 = *base.add(8).cast::<i32>();
                                        _rt::char_lift(l69 as u32)
                                    };
                                    WitNode::PrimChar(e78)
                                }
                                19 => {
                                    let e78 = {
                                        let l70 = i32::from(*base.add(8).cast::<u8>());
                                        _rt::bool_lift(l70 as u8)
                                    };
                                    WitNode::PrimBool(e78)
                                }
                                20 => {
                                    let e78 = {
                                        let l71 = *base.add(8).cast::<*mut u8>();
                                        let l72 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len73 = l72;
                                        let bytes73 = _rt::Vec::from_raw_parts(
                                            l71.cast(),
                                            len73,
                                            len73,
                                        );
                                        _rt::string_lift(bytes73)
                                    };
                                    WitNode::PrimString(e78)
                                }
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e78 = {
                                        let l74 = *base.add(8).cast::<*mut u8>();
                                        let l75 = *base
                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len76 = l75;
                                        let bytes76 = _rt::Vec::from_raw_parts(
                                            l74.cast(),
                                            len76,
                                            len76,
                                        );
                                        let l77 = *base
                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        (
                                            Uri {
                                                value: _rt::string_lift(bytes76),
                                            },
                                            l77 as u64,
                                        )
                                    };
                                    WitNode::Handle(e78)
                                }
                            };
                            v78
                        };
                        result79.push(e79);
                    }
                    _rt::cabi_dealloc(
                        base79,
                        len79 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result80 = WitValue { nodes: result79 };
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout29.size() != 0 {
                        _rt::alloc::dealloc(result29.cast(), layout29);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result80
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn extract_type(vnt: &ValueAndType) -> WitType {
                unsafe {
                    let mut cleanup_list = _rt::Vec::new();
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let ValueAndType { value: value0, typ: typ0 } = vnt;
                    let WitValue { nodes: nodes1 } = value0;
                    let vec11 = nodes1;
                    let len11 = vec11.len();
                    let layout11 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec11.len() * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11
                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                        {
                            match e {
                                WitNode::RecordValue(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let vec2 = e;
                                    let ptr2 = vec2.as_ptr().cast::<u8>();
                                    let len2 = vec2.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len2;
                                    *base.add(8).cast::<*mut u8>() = ptr2.cast_mut();
                                }
                                WitNode::VariantValue(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let (t3_0, t3_1) = e;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(t3_0);
                                    match t3_1 {
                                        Some(e) => {
                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::EnumValue(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::FlagsValue(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let vec4 = e;
                                    let len4 = vec4.len();
                                    let layout4 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec4.len() * 1,
                                        1,
                                    );
                                    let result4 = if layout4.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout4).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout4);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec4.into_iter().enumerate() {
                                        let base = result4.add(i * 1);
                                        {
                                            *base.add(0).cast::<u8>() = (match e {
                                                true => 1,
                                                false => 0,
                                            }) as u8;
                                        }
                                    }
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len4;
                                    *base.add(8).cast::<*mut u8>() = result4;
                                    cleanup_list.extend_from_slice(&[(result4, layout4)]);
                                }
                                WitNode::TupleValue(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let vec5 = e;
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                                WitNode::ListValue(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let vec6 = e;
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base.add(8).cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                WitNode::OptionValue(e) => {
                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                    match e {
                                        Some(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitNode::ResultValue(e) => {
                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                    match e {
                                        Ok(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        Err(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            match e {
                                                Some(e) => {
                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    };
                                }
                                WitNode::PrimU8(e) => {
                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimU16(e) => {
                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimU32(e) => {
                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimU64(e) => {
                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimS8(e) => {
                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                }
                                WitNode::PrimS16(e) => {
                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                WitNode::PrimS32(e) => {
                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimS64(e) => {
                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                }
                                WitNode::PrimFloat32(e) => {
                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                }
                                WitNode::PrimFloat64(e) => {
                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                }
                                WitNode::PrimChar(e) => {
                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                }
                                WitNode::PrimBool(e) => {
                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                    *base.add(8).cast::<u8>() = (match e {
                                        true => 1,
                                        false => 0,
                                    }) as u8;
                                }
                                WitNode::PrimString(e) => {
                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                    let vec7 = e;
                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                    let len7 = vec7.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len7;
                                    *base.add(8).cast::<*mut u8>() = ptr7.cast_mut();
                                }
                                WitNode::Handle(e) => {
                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                    let (t8_0, t8_1) = e;
                                    let Uri { value: value9 } = t8_0;
                                    let vec10 = value9;
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    *base
                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(8).cast::<*mut u8>() = ptr10.cast_mut();
                                    *base
                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t8_1);
                                }
                            }
                        }
                    }
                    let WitType { nodes: nodes12 } = typ0;
                    let vec29 = nodes12;
                    let len29 = vec29.len();
                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec29.len() * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result29 = if layout29.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout29);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec29.into_iter().enumerate() {
                        let base = result29
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        {
                            let NamedWitTypeNode {
                                name: name13,
                                owner: owner13,
                                type_: type_13,
                            } = e;
                            match name13 {
                                Some(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let vec14 = e;
                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                    let len14 = vec14.len();
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len14;
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                }
                                None => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match owner13 {
                                Some(e) => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec15 = e;
                                    let ptr15 = vec15.as_ptr().cast::<u8>();
                                    let len15 = vec15.len();
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len15;
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr15.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match type_13 {
                                WitTypeNode::RecordType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec18 = e;
                                    let len18 = vec18.len();
                                    let layout18 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec18.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result18 = if layout18.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout18);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec18.into_iter().enumerate() {
                                        let base = result18
                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t16_0, t16_1) = e;
                                            let vec17 = t16_0;
                                            let ptr17 = vec17.as_ptr().cast::<u8>();
                                            let len17 = vec17.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len17;
                                            *base.add(0).cast::<*mut u8>() = ptr17.cast_mut();
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(t16_1);
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len18;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result18;
                                    cleanup_list.extend_from_slice(&[(result18, layout18)]);
                                }
                                WitTypeNode::VariantType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec21 = e;
                                    let len21 = vec21.len();
                                    let layout21 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec21.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result21 = if layout21.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout21).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout21);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec21.into_iter().enumerate() {
                                        let base = result21
                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t19_0, t19_1) = e;
                                            let vec20 = t19_0;
                                            let ptr20 = vec20.as_ptr().cast::<u8>();
                                            let len20 = vec20.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len20;
                                            *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                            match t19_1 {
                                                Some(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    *base
                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                None => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len21;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result21;
                                    cleanup_list.extend_from_slice(&[(result21, layout21)]);
                                }
                                WitTypeNode::EnumType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec23 = e;
                                    let len23 = vec23.len();
                                    let layout23 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec23.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result23 = if layout23.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout23).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout23);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec23.into_iter().enumerate() {
                                        let base = result23
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec22 = e;
                                            let ptr22 = vec22.as_ptr().cast::<u8>();
                                            let len22 = vec22.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len22;
                                            *base.add(0).cast::<*mut u8>() = ptr22.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len23;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result23;
                                    cleanup_list.extend_from_slice(&[(result23, layout23)]);
                                }
                                WitTypeNode::FlagsType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec25 = e;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25
                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let vec24 = e;
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len24;
                                            *base.add(0).cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len25;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result25;
                                    cleanup_list.extend_from_slice(&[(result25, layout25)]);
                                }
                                WitTypeNode::TupleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let vec26 = e;
                                    let ptr26 = vec26.as_ptr().cast::<u8>();
                                    let len26 = vec26.len();
                                    *base
                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len26;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr26.cast_mut();
                                }
                                WitTypeNode::ListType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (5i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::OptionType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (6i32) as u8;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i32>() = _rt::as_i32(e);
                                }
                                WitTypeNode::ResultType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (7i32) as u8;
                                    let (t27_0, t27_1) = e;
                                    match t27_0 {
                                        Some(e) => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match t27_1 {
                                        Some(e) => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            *base
                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<i32>() = _rt::as_i32(e);
                                        }
                                        None => {
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                WitTypeNode::PrimU8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (8i32) as u8;
                                }
                                WitTypeNode::PrimU16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (9i32) as u8;
                                }
                                WitTypeNode::PrimU32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (10i32) as u8;
                                }
                                WitTypeNode::PrimU64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (11i32) as u8;
                                }
                                WitTypeNode::PrimS8Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (12i32) as u8;
                                }
                                WitTypeNode::PrimS16Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (13i32) as u8;
                                }
                                WitTypeNode::PrimS32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (14i32) as u8;
                                }
                                WitTypeNode::PrimS64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (15i32) as u8;
                                }
                                WitTypeNode::PrimF32Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (16i32) as u8;
                                }
                                WitTypeNode::PrimF64Type => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (17i32) as u8;
                                }
                                WitTypeNode::PrimCharType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (18i32) as u8;
                                }
                                WitTypeNode::PrimBoolType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (19i32) as u8;
                                }
                                WitTypeNode::PrimStringType => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (20i32) as u8;
                                }
                                WitTypeNode::HandleType(e) => {
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (21i32) as u8;
                                    let (t28_0, t28_1) = e;
                                    *base
                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<i64>() = _rt::as_i64(t28_0);
                                    *base
                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (t28_1.clone() as i32) as u8;
                                }
                            }
                        }
                    }
                    let ptr30 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "golem:rpc/types@0.2.2")]
                    unsafe extern "C" {
                        #[link_name = "extract-type"]
                        fn wit_import31(
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        );
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import31(
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                        _: usize,
                        _: *mut u8,
                    ) {
                        unreachable!()
                    }
                    unsafe { wit_import31(result11, len11, result29, len29, ptr30) };
                    let l32 = *ptr30.add(0).cast::<*mut u8>();
                    let l33 = *ptr30
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base82 = l32;
                    let len82 = l33;
                    let mut result82 = _rt::Vec::with_capacity(len82);
                    for i in 0..len82 {
                        let base = base82
                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                        let e82 = {
                            let l34 = i32::from(*base.add(0).cast::<u8>());
                            let l38 = i32::from(
                                *base
                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let l42 = i32::from(
                                *base
                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            let v81 = match l42 {
                                0 => {
                                    let e81 = {
                                        let l43 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l44 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base49 = l43;
                                        let len49 = l44;
                                        let mut result49 = _rt::Vec::with_capacity(len49);
                                        for i in 0..len49 {
                                            let base = base49
                                                .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                            let e49 = {
                                                let l45 = *base.add(0).cast::<*mut u8>();
                                                let l46 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len47 = l46;
                                                let bytes47 = _rt::Vec::from_raw_parts(
                                                    l45.cast(),
                                                    len47,
                                                    len47,
                                                );
                                                let l48 = *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<i32>();
                                                (_rt::string_lift(bytes47), l48)
                                            };
                                            result49.push(e49);
                                        }
                                        _rt::cabi_dealloc(
                                            base49,
                                            len49 * (3 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result49
                                    };
                                    WitTypeNode::RecordType(e81)
                                }
                                1 => {
                                    let e81 = {
                                        let l50 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l51 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base57 = l50;
                                        let len57 = l51;
                                        let mut result57 = _rt::Vec::with_capacity(len57);
                                        for i in 0..len57 {
                                            let base = base57
                                                .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                            let e57 = {
                                                let l52 = *base.add(0).cast::<*mut u8>();
                                                let l53 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len54 = l53;
                                                let bytes54 = _rt::Vec::from_raw_parts(
                                                    l52.cast(),
                                                    len54,
                                                    len54,
                                                );
                                                let l55 = i32::from(
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>(),
                                                );
                                                (
                                                    _rt::string_lift(bytes54),
                                                    match l55 {
                                                        0 => None,
                                                        1 => {
                                                            let e = {
                                                                let l56 = *base
                                                                    .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<i32>();
                                                                l56
                                                            };
                                                            Some(e)
                                                        }
                                                        _ => _rt::invalid_enum_discriminant(),
                                                    },
                                                )
                                            };
                                            result57.push(e57);
                                        }
                                        _rt::cabi_dealloc(
                                            base57,
                                            len57 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result57
                                    };
                                    WitTypeNode::VariantType(e81)
                                }
                                2 => {
                                    let e81 = {
                                        let l58 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l59 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base63 = l58;
                                        let len63 = l59;
                                        let mut result63 = _rt::Vec::with_capacity(len63);
                                        for i in 0..len63 {
                                            let base = base63
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e63 = {
                                                let l60 = *base.add(0).cast::<*mut u8>();
                                                let l61 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len62 = l61;
                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                    l60.cast(),
                                                    len62,
                                                    len62,
                                                );
                                                _rt::string_lift(bytes62)
                                            };
                                            result63.push(e63);
                                        }
                                        _rt::cabi_dealloc(
                                            base63,
                                            len63 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result63
                                    };
                                    WitTypeNode::EnumType(e81)
                                }
                                3 => {
                                    let e81 = {
                                        let l64 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l65 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let base69 = l64;
                                        let len69 = l65;
                                        let mut result69 = _rt::Vec::with_capacity(len69);
                                        for i in 0..len69 {
                                            let base = base69
                                                .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                            let e69 = {
                                                let l66 = *base.add(0).cast::<*mut u8>();
                                                let l67 = *base
                                                    .add(::core::mem::size_of::<*const u8>())
                                                    .cast::<usize>();
                                                let len68 = l67;
                                                let bytes68 = _rt::Vec::from_raw_parts(
                                                    l66.cast(),
                                                    len68,
                                                    len68,
                                                );
                                                _rt::string_lift(bytes68)
                                            };
                                            result69.push(e69);
                                        }
                                        _rt::cabi_dealloc(
                                            base69,
                                            len69 * (2 * ::core::mem::size_of::<*const u8>()),
                                            ::core::mem::size_of::<*const u8>(),
                                        );
                                        result69
                                    };
                                    WitTypeNode::FlagsType(e81)
                                }
                                4 => {
                                    let e81 = {
                                        let l70 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<*mut u8>();
                                        let l71 = *base
                                            .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len72 = l71;
                                        _rt::Vec::from_raw_parts(l70.cast(), len72, len72)
                                    };
                                    WitTypeNode::TupleType(e81)
                                }
                                5 => {
                                    let e81 = {
                                        let l73 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l73
                                    };
                                    WitTypeNode::ListType(e81)
                                }
                                6 => {
                                    let e81 = {
                                        let l74 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i32>();
                                        l74
                                    };
                                    WitTypeNode::OptionType(e81)
                                }
                                7 => {
                                    let e81 = {
                                        let l75 = i32::from(
                                            *base
                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        let l77 = i32::from(
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        (
                                            match l75 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l76 = *base
                                                            .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i32>();
                                                        l76
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                            match l77 {
                                                0 => None,
                                                1 => {
                                                    let e = {
                                                        let l78 = *base
                                                            .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<i32>();
                                                        l78
                                                    };
                                                    Some(e)
                                                }
                                                _ => _rt::invalid_enum_discriminant(),
                                            },
                                        )
                                    };
                                    WitTypeNode::ResultType(e81)
                                }
                                8 => WitTypeNode::PrimU8Type,
                                9 => WitTypeNode::PrimU16Type,
                                10 => WitTypeNode::PrimU32Type,
                                11 => WitTypeNode::PrimU64Type,
                                12 => WitTypeNode::PrimS8Type,
                                13 => WitTypeNode::PrimS16Type,
                                14 => WitTypeNode::PrimS32Type,
                                15 => WitTypeNode::PrimS64Type,
                                16 => WitTypeNode::PrimF32Type,
                                17 => WitTypeNode::PrimF64Type,
                                18 => WitTypeNode::PrimCharType,
                                19 => WitTypeNode::PrimBoolType,
                                20 => WitTypeNode::PrimStringType,
                                n => {
                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                    let e81 = {
                                        let l79 = *base
                                            .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                            .cast::<i64>();
                                        let l80 = i32::from(
                                            *base
                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        (l79 as u64, ResourceMode::_lift(l80 as u8))
                                    };
                                    WitTypeNode::HandleType(e81)
                                }
                            };
                            NamedWitTypeNode {
                                name: match l34 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l35 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l36 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len37 = l36;
                                            let bytes37 = _rt::Vec::from_raw_parts(
                                                l35.cast(),
                                                len37,
                                                len37,
                                            );
                                            _rt::string_lift(bytes37)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                owner: match l38 {
                                    0 => None,
                                    1 => {
                                        let e = {
                                            let l39 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l40 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let len41 = l40;
                                            let bytes41 = _rt::Vec::from_raw_parts(
                                                l39.cast(),
                                                len41,
                                                len41,
                                            );
                                            _rt::string_lift(bytes41)
                                        };
                                        Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                },
                                type_: v81,
                            }
                        };
                        result82.push(e82);
                    }
                    _rt::cabi_dealloc(
                        base82,
                        len82 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                        8,
                    );
                    let result83 = WitType { nodes: result82 };
                    if layout11.size() != 0 {
                        _rt::alloc::dealloc(result11.cast(), layout11);
                    }
                    if layout29.size() != 0 {
                        _rt::alloc::dealloc(result29.cast(), layout29);
                    }
                    for (ptr, layout) in cleanup_list {
                        if layout.size() != 0 {
                            _rt::alloc::dealloc(ptr.cast(), layout);
                        }
                    }
                    result83
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod wasi {
    pub mod clocks {
        /// WASI Monotonic Clock is a clock API intended to let users measure elapsed
        /// time.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A monotonic clock is a clock which has an unspecified initial value, and
        /// successive reads of the clock will produce non-decreasing values.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod monotonic_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Pollable = super::super::super::wasi::io::poll::Pollable;
            /// An instant in time, in nanoseconds. An instant is relative to an
            /// unspecified initial value, and can only be compared to instances from
            /// the same monotonic-clock.
            pub type Instant = u64;
            /// A duration of time, in nanoseconds.
            pub type Duration = u64;
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// The clock is monotonic, therefore calling this function repeatedly will
            /// produce a sequence of non-decreasing values.
            pub fn now() -> Instant {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock. Returns the duration of time
            /// corresponding to a clock tick.
            pub fn resolution() -> Duration {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import0() -> i64;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0() -> i64 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0() };
                    ret as u64
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` which will resolve once the specified instant
            /// has occurred.
            pub fn subscribe_instant(when: Instant) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-instant"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Create a `pollable` that will resolve after the specified duration has
            /// elapsed from the time this function is invoked.
            pub fn subscribe_duration(when: Duration) -> Pollable {
                unsafe {
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/monotonic-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "subscribe-duration"]
                        fn wit_import0(_: i64) -> i32;
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import0(_: i64) -> i32 {
                        unreachable!()
                    }
                    let ret = unsafe { wit_import0(_rt::as_i64(when)) };
                    unsafe {
                        super::super::super::wasi::io::poll::Pollable::from_handle(
                            ret as u32,
                        )
                    }
                }
            }
        }
        /// WASI Wall Clock is a clock API intended to let users query the current
        /// time. The name "wall" makes an analogy to a "clock on the wall", which
        /// is not necessarily monotonic as it may be reset.
        ///
        /// It is intended to be portable at least between Unix-family platforms and
        /// Windows.
        ///
        /// A wall clock is a clock which measures the date and time according to
        /// some external reference.
        ///
        /// External references may be reset, so this clock is not necessarily
        /// monotonic, making it unsuitable for measuring elapsed time.
        ///
        /// It is intended for reporting the current date and time for humans.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod wall_clock {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            /// A time and date in seconds plus nanoseconds.
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Datetime {
                pub seconds: u64,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Datetime {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Datetime")
                        .field("seconds", &self.seconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Read the current value of the clock.
            ///
            /// This clock is not monotonic, therefore calling this function repeatedly
            /// will not necessarily produce a sequence of non-decreasing values.
            ///
            /// The returned timestamps represent the number of seconds since
            /// 1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],
            /// also known as [Unix Time].
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            ///
            /// [POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16
            /// [Unix Time]: https://en.wikipedia.org/wiki/Unix_time
            pub fn now() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "now"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Query the resolution of the clock.
            ///
            /// The nanoseconds field of the output is always less than 1000000000.
            pub fn resolution() -> Datetime {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:clocks/wall-clock@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "resolution"]
                        fn wit_import1(_: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import1(_: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import1(ptr0) };
                    let l2 = *ptr0.add(0).cast::<i64>();
                    let l3 = *ptr0.add(8).cast::<i32>();
                    let result4 = Datetime {
                        seconds: l2 as u64,
                        nanoseconds: l3 as u32,
                    };
                    result4
                }
            }
        }
    }
    pub mod io {
        /// A poll API intended to let users wait for I/O events on multiple handles
        /// at once.
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod poll {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            /// `pollable` represents a single I/O event which may be ready, or not.
            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Pollable {
                handle: _rt::Resource<Pollable>,
            }
            impl Pollable {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: unsafe { _rt::Resource::from_handle(handle) },
                    }
                }
                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }
                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }
            unsafe impl _rt::WasmResource for Pollable {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();
                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[resource-drop]pollable"]
                            fn drop(_: u32);
                        }
                        unsafe { drop(_handle) };
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// Return the readiness of a pollable. This function never blocks.
                ///
                /// Returns `true` when the pollable is ready, and `false` otherwise.
                pub fn ready(&self) -> bool {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.ready"]
                            fn wit_import0(_: i32) -> i32;
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) -> i32 {
                            unreachable!()
                        }
                        let ret = unsafe { wit_import0((self).handle() as i32) };
                        _rt::bool_lift(ret as u8)
                    }
                }
            }
            impl Pollable {
                #[allow(unused_unsafe, clippy::all)]
                /// `block` returns immediately if the pollable is ready, and otherwise
                /// blocks until ready.
                ///
                /// This function is equivalent to calling `poll.poll` on a list
                /// containing only this pollable.
                pub fn block(&self) -> () {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                        unsafe extern "C" {
                            #[link_name = "[method]pollable.block"]
                            fn wit_import0(_: i32);
                        }
                        #[cfg(not(target_arch = "wasm32"))]
                        unsafe extern "C" fn wit_import0(_: i32) {
                            unreachable!()
                        }
                        unsafe { wit_import0((self).handle() as i32) };
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Poll for completion on a set of pollables.
            ///
            /// This function takes a list of pollables, which identify I/O sources of
            /// interest, and waits until one or more of the events is ready for I/O.
            ///
            /// The result `list<u32>` contains one or more indices of handles in the
            /// argument list that is ready for I/O.
            ///
            /// This function traps if either:
            /// - the list is empty, or:
            /// - the list contains more elements than can be indexed with a `u32` value.
            ///
            /// A timeout can be implemented by adding a pollable from the
            /// wasi-clocks API to the list.
            ///
            /// This function does not return a `result`; polling in itself does not
            /// do any I/O so it doesn't fail. If any of the I/O sources identified by
            /// the pollables has an error, it is indicated by marking the source as
            /// being ready for I/O.
            pub fn poll(in_: &[&Pollable]) -> _rt::Vec<u32> {
                unsafe {
                    #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                    #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                    struct RetArea(
                        [::core::mem::MaybeUninit<
                            u8,
                        >; 2 * ::core::mem::size_of::<*const u8>()],
                    );
                    let mut ret_area = RetArea(
                        [::core::mem::MaybeUninit::uninit(); 2
                            * ::core::mem::size_of::<*const u8>()],
                    );
                    let vec0 = in_;
                    let len0 = vec0.len();
                    let layout0 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec0.len() * 4,
                        4,
                    );
                    let result0 = if layout0.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout0).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout0);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec0.into_iter().enumerate() {
                        let base = result0.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).handle() as i32;
                        }
                    }
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:io/poll@0.2.3")]
                    unsafe extern "C" {
                        #[link_name = "poll"]
                        fn wit_import2(_: *mut u8, _: usize, _: *mut u8);
                    }
                    #[cfg(not(target_arch = "wasm32"))]
                    unsafe extern "C" fn wit_import2(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    unsafe { wit_import2(result0, len0, ptr1) };
                    let l3 = *ptr1.add(0).cast::<*mut u8>();
                    let l4 = *ptr1
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let len5 = l4;
                    let result6 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);
                    if layout0.size() != 0 {
                        _rt::alloc::dealloc(result0.cast(), layout0);
                    }
                    result6
                }
            }
        }
    }
}
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod exports {
    pub mod golem {
        pub mod agent {
            #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
            pub mod guest {
                #[used]
                #[doc(hidden)]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type AgentError = super::super::super::super::golem::agent::common::AgentError;
                pub type AgentType = super::super::super::super::golem::agent::common::AgentType;
                pub type DataValue = super::super::super::super::golem::agent::common::DataValue;
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Agent {
                    handle: _rt::Resource<Agent>,
                }
                type _AgentRep<T> = Option<T>;
                impl Agent {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Agent`.
                    pub fn new<T: GuestAgent>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _AgentRep<T> = Some(val);
                        let ptr: *mut _AgentRep<T> = _rt::Box::into_raw(
                            _rt::Box::new(val),
                        );
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }
                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestAgent>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestAgent>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }
                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestAgent>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }
                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: unsafe { _rt::Resource::from_handle(handle) },
                        }
                    }
                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }
                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(! cfg!(target_feature = "atomics"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => {
                                    assert!(
                                        ty == id, "cannot use two types with this resource type"
                                    )
                                }
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }
                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = unsafe {
                            _rt::Box::from_raw(handle as *mut _AgentRep<T>)
                        };
                    }
                    fn as_ptr<T: GuestAgent>(&self) -> *mut _AgentRep<T> {
                        Agent::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }
                /// A borrowed version of [`Agent`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct AgentBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Agent>,
                }
                impl<'a> AgentBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }
                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestAgent>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }
                    fn as_ptr<T: 'static>(&self) -> *mut _AgentRep<T> {
                        Agent::type_guard::<T>();
                        self.rep.cast()
                    }
                }
                unsafe impl _rt::WasmResource for Agent {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agent/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-drop]agent"]
                                fn drop(_: u32);
                            }
                            unsafe { drop(_handle) };
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_agent_create_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: i32,
                    arg3: *mut u8,
                    arg4: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    use super::super::super::super::golem::agent::common::DataValue as V152;
                    let v152 = match arg2 {
                        0 => {
                            let e152 = {
                                let base74 = arg3;
                                let len74 = arg4;
                                let mut result74 = _rt::Vec::with_capacity(len74);
                                for i in 0..len74 {
                                    let base = base74
                                        .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                    let e74 = {
                                        let l1 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::super::golem::agent::common::ElementValue as V73;
                                        let v73 = match l1 {
                                            0 => {
                                                let e73 = {
                                                    let l2 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l3 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base49 = l2;
                                                    let len49 = l3;
                                                    let mut result49 = _rt::Vec::with_capacity(len49);
                                                    for i in 0..len49 {
                                                        let base = base49
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e49 = {
                                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V48;
                                                            let v48 = match l4 {
                                                                0 => {
                                                                    let e48 = {
                                                                        let l5 = *base.add(8).cast::<*mut u8>();
                                                                        let l6 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len7 = l6;
                                                                        _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                                                    };
                                                                    V48::RecordValue(e48)
                                                                }
                                                                1 => {
                                                                    let e48 = {
                                                                        let l8 = *base.add(8).cast::<i32>();
                                                                        let l9 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l8 as u32,
                                                                            match l9 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l10 = *base.add(16).cast::<i32>();
                                                                                        l10
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V48::VariantValue(e48)
                                                                }
                                                                2 => {
                                                                    let e48 = {
                                                                        let l11 = *base.add(8).cast::<i32>();
                                                                        l11 as u32
                                                                    };
                                                                    V48::EnumValue(e48)
                                                                }
                                                                3 => {
                                                                    let e48 = {
                                                                        let l12 = *base.add(8).cast::<*mut u8>();
                                                                        let l13 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base15 = l12;
                                                                        let len15 = l13;
                                                                        let mut result15 = _rt::Vec::with_capacity(len15);
                                                                        for i in 0..len15 {
                                                                            let base = base15.add(i * 1);
                                                                            let e15 = {
                                                                                let l14 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l14 as u8)
                                                                            };
                                                                            result15.push(e15);
                                                                        }
                                                                        _rt::cabi_dealloc(base15, len15 * 1, 1);
                                                                        result15
                                                                    };
                                                                    V48::FlagsValue(e48)
                                                                }
                                                                4 => {
                                                                    let e48 = {
                                                                        let l16 = *base.add(8).cast::<*mut u8>();
                                                                        let l17 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len18 = l17;
                                                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18)
                                                                    };
                                                                    V48::TupleValue(e48)
                                                                }
                                                                5 => {
                                                                    let e48 = {
                                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                                        let l20 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len21 = l20;
                                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                                    };
                                                                    V48::ListValue(e48)
                                                                }
                                                                6 => {
                                                                    let e48 = {
                                                                        let l22 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l22 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l23 = *base.add(12).cast::<i32>();
                                                                                    l23
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::OptionValue(e48)
                                                                }
                                                                7 => {
                                                                    let e48 = {
                                                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l24 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l25 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l25 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l26 = *base.add(16).cast::<i32>();
                                                                                                l26
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l27 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l28 = *base.add(16).cast::<i32>();
                                                                                                l28
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::ResultValue(e48)
                                                                }
                                                                8 => {
                                                                    let e48 = {
                                                                        let l29 = i32::from(*base.add(8).cast::<u8>());
                                                                        l29 as u8
                                                                    };
                                                                    V48::PrimU8(e48)
                                                                }
                                                                9 => {
                                                                    let e48 = {
                                                                        let l30 = i32::from(*base.add(8).cast::<u16>());
                                                                        l30 as u16
                                                                    };
                                                                    V48::PrimU16(e48)
                                                                }
                                                                10 => {
                                                                    let e48 = {
                                                                        let l31 = *base.add(8).cast::<i32>();
                                                                        l31 as u32
                                                                    };
                                                                    V48::PrimU32(e48)
                                                                }
                                                                11 => {
                                                                    let e48 = {
                                                                        let l32 = *base.add(8).cast::<i64>();
                                                                        l32 as u64
                                                                    };
                                                                    V48::PrimU64(e48)
                                                                }
                                                                12 => {
                                                                    let e48 = {
                                                                        let l33 = i32::from(*base.add(8).cast::<i8>());
                                                                        l33 as i8
                                                                    };
                                                                    V48::PrimS8(e48)
                                                                }
                                                                13 => {
                                                                    let e48 = {
                                                                        let l34 = i32::from(*base.add(8).cast::<i16>());
                                                                        l34 as i16
                                                                    };
                                                                    V48::PrimS16(e48)
                                                                }
                                                                14 => {
                                                                    let e48 = {
                                                                        let l35 = *base.add(8).cast::<i32>();
                                                                        l35
                                                                    };
                                                                    V48::PrimS32(e48)
                                                                }
                                                                15 => {
                                                                    let e48 = {
                                                                        let l36 = *base.add(8).cast::<i64>();
                                                                        l36
                                                                    };
                                                                    V48::PrimS64(e48)
                                                                }
                                                                16 => {
                                                                    let e48 = {
                                                                        let l37 = *base.add(8).cast::<f32>();
                                                                        l37
                                                                    };
                                                                    V48::PrimFloat32(e48)
                                                                }
                                                                17 => {
                                                                    let e48 = {
                                                                        let l38 = *base.add(8).cast::<f64>();
                                                                        l38
                                                                    };
                                                                    V48::PrimFloat64(e48)
                                                                }
                                                                18 => {
                                                                    let e48 = {
                                                                        let l39 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l39 as u32)
                                                                    };
                                                                    V48::PrimChar(e48)
                                                                }
                                                                19 => {
                                                                    let e48 = {
                                                                        let l40 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l40 as u8)
                                                                    };
                                                                    V48::PrimBool(e48)
                                                                }
                                                                20 => {
                                                                    let e48 = {
                                                                        let l41 = *base.add(8).cast::<*mut u8>();
                                                                        let l42 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len43 = l42;
                                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                                            l41.cast(),
                                                                            len43,
                                                                            len43,
                                                                        );
                                                                        _rt::string_lift(bytes43)
                                                                    };
                                                                    V48::PrimString(e48)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e48 = {
                                                                        let l44 = *base.add(8).cast::<*mut u8>();
                                                                        let l45 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len46 = l45;
                                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                                            l44.cast(),
                                                                            len46,
                                                                            len46,
                                                                        );
                                                                        let l47 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes46),
                                                                            },
                                                                            l47 as u64,
                                                                        )
                                                                    };
                                                                    V48::Handle(e48)
                                                                }
                                                            };
                                                            v48
                                                        };
                                                        result49.push(e49);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base49,
                                                        len49 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result49,
                                                    }
                                                };
                                                V73::ComponentModel(e73)
                                            }
                                            1 => {
                                                let e73 = {
                                                    let l50 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V61;
                                                    let v61 = match l50 {
                                                        0 => {
                                                            let e61 = {
                                                                let l51 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l52 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                                    l51.cast(),
                                                                    len53,
                                                                    len53,
                                                                );
                                                                _rt::string_lift(bytes53)
                                                            };
                                                            V61::Url(e61)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e61 = {
                                                                let l54 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l55 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                                    l54.cast(),
                                                                    len56,
                                                                    len56,
                                                                );
                                                                let l57 = i32::from(
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes56),
                                                                    text_type: match l57 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l58 = *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l59 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len60 = l59;
                                                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                                                    l58.cast(),
                                                                                    len60,
                                                                                    len60,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes60),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V61::Inline(e61)
                                                        }
                                                    };
                                                    v61
                                                };
                                                V73::UnstructuredText(e73)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e73 = {
                                                    let l62 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V72;
                                                    let v72 = match l62 {
                                                        0 => {
                                                            let e72 = {
                                                                let l63 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l64 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len65 = l64;
                                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                );
                                                                _rt::string_lift(bytes65)
                                                            };
                                                            V72::Url(e72)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e72 = {
                                                                let l66 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l67 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len68 = l67;
                                                                let l69 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l70 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len71 = l70;
                                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes71),
                                                                    },
                                                                }
                                                            };
                                                            V72::Inline(e72)
                                                        }
                                                    };
                                                    v72
                                                };
                                                V73::UnstructuredBinary(e73)
                                            }
                                        };
                                        v73
                                    };
                                    result74.push(e74);
                                }
                                _rt::cabi_dealloc(
                                    base74,
                                    len74 * (7 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result74
                            };
                            V152::Tuple(e152)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e152 = {
                                let base151 = arg3;
                                let len151 = arg4;
                                let mut result151 = _rt::Vec::with_capacity(len151);
                                for i in 0..len151 {
                                    let base = base151
                                        .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                    let e151 = {
                                        let l75 = *base.add(0).cast::<*mut u8>();
                                        let l76 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len77 = l76;
                                        let bytes77 = _rt::Vec::from_raw_parts(
                                            l75.cast(),
                                            len77,
                                            len77,
                                        );
                                        let l78 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::agent::common::ElementValue as V150;
                                        let v150 = match l78 {
                                            0 => {
                                                let e150 = {
                                                    let l79 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l80 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base126 = l79;
                                                    let len126 = l80;
                                                    let mut result126 = _rt::Vec::with_capacity(len126);
                                                    for i in 0..len126 {
                                                        let base = base126
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e126 = {
                                                            let l81 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V125;
                                                            let v125 = match l81 {
                                                                0 => {
                                                                    let e125 = {
                                                                        let l82 = *base.add(8).cast::<*mut u8>();
                                                                        let l83 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len84 = l83;
                                                                        _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                    };
                                                                    V125::RecordValue(e125)
                                                                }
                                                                1 => {
                                                                    let e125 = {
                                                                        let l85 = *base.add(8).cast::<i32>();
                                                                        let l86 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l85 as u32,
                                                                            match l86 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l87 = *base.add(16).cast::<i32>();
                                                                                        l87
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V125::VariantValue(e125)
                                                                }
                                                                2 => {
                                                                    let e125 = {
                                                                        let l88 = *base.add(8).cast::<i32>();
                                                                        l88 as u32
                                                                    };
                                                                    V125::EnumValue(e125)
                                                                }
                                                                3 => {
                                                                    let e125 = {
                                                                        let l89 = *base.add(8).cast::<*mut u8>();
                                                                        let l90 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base92 = l89;
                                                                        let len92 = l90;
                                                                        let mut result92 = _rt::Vec::with_capacity(len92);
                                                                        for i in 0..len92 {
                                                                            let base = base92.add(i * 1);
                                                                            let e92 = {
                                                                                let l91 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l91 as u8)
                                                                            };
                                                                            result92.push(e92);
                                                                        }
                                                                        _rt::cabi_dealloc(base92, len92 * 1, 1);
                                                                        result92
                                                                    };
                                                                    V125::FlagsValue(e125)
                                                                }
                                                                4 => {
                                                                    let e125 = {
                                                                        let l93 = *base.add(8).cast::<*mut u8>();
                                                                        let l94 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len95 = l94;
                                                                        _rt::Vec::from_raw_parts(l93.cast(), len95, len95)
                                                                    };
                                                                    V125::TupleValue(e125)
                                                                }
                                                                5 => {
                                                                    let e125 = {
                                                                        let l96 = *base.add(8).cast::<*mut u8>();
                                                                        let l97 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len98 = l97;
                                                                        _rt::Vec::from_raw_parts(l96.cast(), len98, len98)
                                                                    };
                                                                    V125::ListValue(e125)
                                                                }
                                                                6 => {
                                                                    let e125 = {
                                                                        let l99 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l99 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l100 = *base.add(12).cast::<i32>();
                                                                                    l100
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::OptionValue(e125)
                                                                }
                                                                7 => {
                                                                    let e125 = {
                                                                        let l101 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l101 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l102 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l102 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l103 = *base.add(16).cast::<i32>();
                                                                                                l103
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l104 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l104 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l105 = *base.add(16).cast::<i32>();
                                                                                                l105
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::ResultValue(e125)
                                                                }
                                                                8 => {
                                                                    let e125 = {
                                                                        let l106 = i32::from(*base.add(8).cast::<u8>());
                                                                        l106 as u8
                                                                    };
                                                                    V125::PrimU8(e125)
                                                                }
                                                                9 => {
                                                                    let e125 = {
                                                                        let l107 = i32::from(*base.add(8).cast::<u16>());
                                                                        l107 as u16
                                                                    };
                                                                    V125::PrimU16(e125)
                                                                }
                                                                10 => {
                                                                    let e125 = {
                                                                        let l108 = *base.add(8).cast::<i32>();
                                                                        l108 as u32
                                                                    };
                                                                    V125::PrimU32(e125)
                                                                }
                                                                11 => {
                                                                    let e125 = {
                                                                        let l109 = *base.add(8).cast::<i64>();
                                                                        l109 as u64
                                                                    };
                                                                    V125::PrimU64(e125)
                                                                }
                                                                12 => {
                                                                    let e125 = {
                                                                        let l110 = i32::from(*base.add(8).cast::<i8>());
                                                                        l110 as i8
                                                                    };
                                                                    V125::PrimS8(e125)
                                                                }
                                                                13 => {
                                                                    let e125 = {
                                                                        let l111 = i32::from(*base.add(8).cast::<i16>());
                                                                        l111 as i16
                                                                    };
                                                                    V125::PrimS16(e125)
                                                                }
                                                                14 => {
                                                                    let e125 = {
                                                                        let l112 = *base.add(8).cast::<i32>();
                                                                        l112
                                                                    };
                                                                    V125::PrimS32(e125)
                                                                }
                                                                15 => {
                                                                    let e125 = {
                                                                        let l113 = *base.add(8).cast::<i64>();
                                                                        l113
                                                                    };
                                                                    V125::PrimS64(e125)
                                                                }
                                                                16 => {
                                                                    let e125 = {
                                                                        let l114 = *base.add(8).cast::<f32>();
                                                                        l114
                                                                    };
                                                                    V125::PrimFloat32(e125)
                                                                }
                                                                17 => {
                                                                    let e125 = {
                                                                        let l115 = *base.add(8).cast::<f64>();
                                                                        l115
                                                                    };
                                                                    V125::PrimFloat64(e125)
                                                                }
                                                                18 => {
                                                                    let e125 = {
                                                                        let l116 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l116 as u32)
                                                                    };
                                                                    V125::PrimChar(e125)
                                                                }
                                                                19 => {
                                                                    let e125 = {
                                                                        let l117 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l117 as u8)
                                                                    };
                                                                    V125::PrimBool(e125)
                                                                }
                                                                20 => {
                                                                    let e125 = {
                                                                        let l118 = *base.add(8).cast::<*mut u8>();
                                                                        let l119 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len120 = l119;
                                                                        let bytes120 = _rt::Vec::from_raw_parts(
                                                                            l118.cast(),
                                                                            len120,
                                                                            len120,
                                                                        );
                                                                        _rt::string_lift(bytes120)
                                                                    };
                                                                    V125::PrimString(e125)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e125 = {
                                                                        let l121 = *base.add(8).cast::<*mut u8>();
                                                                        let l122 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len123 = l122;
                                                                        let bytes123 = _rt::Vec::from_raw_parts(
                                                                            l121.cast(),
                                                                            len123,
                                                                            len123,
                                                                        );
                                                                        let l124 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes123),
                                                                            },
                                                                            l124 as u64,
                                                                        )
                                                                    };
                                                                    V125::Handle(e125)
                                                                }
                                                            };
                                                            v125
                                                        };
                                                        result126.push(e126);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base126,
                                                        len126 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result126,
                                                    }
                                                };
                                                V150::ComponentModel(e150)
                                            }
                                            1 => {
                                                let e150 = {
                                                    let l127 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V138;
                                                    let v138 = match l127 {
                                                        0 => {
                                                            let e138 = {
                                                                let l128 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l129 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len130 = l129;
                                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                                    l128.cast(),
                                                                    len130,
                                                                    len130,
                                                                );
                                                                _rt::string_lift(bytes130)
                                                            };
                                                            V138::Url(e138)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e138 = {
                                                                let l131 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l132 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len133 = l132;
                                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                                    l131.cast(),
                                                                    len133,
                                                                    len133,
                                                                );
                                                                let l134 = i32::from(
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes133),
                                                                    text_type: match l134 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l135 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l136 = *base
                                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len137 = l136;
                                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                                    l135.cast(),
                                                                                    len137,
                                                                                    len137,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes137),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V138::Inline(e138)
                                                        }
                                                    };
                                                    v138
                                                };
                                                V150::UnstructuredText(e150)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e150 = {
                                                    let l139 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V149;
                                                    let v149 = match l139 {
                                                        0 => {
                                                            let e149 = {
                                                                let l140 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l141 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len142 = l141;
                                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                                    l140.cast(),
                                                                    len142,
                                                                    len142,
                                                                );
                                                                _rt::string_lift(bytes142)
                                                            };
                                                            V149::Url(e149)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e149 = {
                                                                let l143 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l144 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len145 = l144;
                                                                let l146 = *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l147 = *base
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len148 = l147;
                                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                                    l146.cast(),
                                                                    len148,
                                                                    len148,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l143.cast(), len145, len145),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes148),
                                                                    },
                                                                }
                                                            };
                                                            V149::Inline(e149)
                                                        }
                                                    };
                                                    v149
                                                };
                                                V150::UnstructuredBinary(e150)
                                            }
                                        };
                                        (_rt::string_lift(bytes77), v150)
                                    };
                                    result151.push(e151);
                                }
                                _rt::cabi_dealloc(
                                    base151,
                                    len151 * (9 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result151
                            };
                            V152::Multimodal(e152)
                        }
                    };
                    let result153 = T::create(_rt::string_lift(bytes0), v152);
                    let ptr154 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result153 {
                        Ok(e) => {
                            *ptr154.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr154
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr154.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::agent::common::AgentError as V191;
                            match e {
                                V191::InvalidInput(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec155 = (e.into_bytes()).into_boxed_slice();
                                    let ptr155 = vec155.as_ptr().cast::<u8>();
                                    let len155 = vec155.len();
                                    ::core::mem::forget(vec155);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len155;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr155.cast_mut();
                                }
                                V191::InvalidMethod(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec156 = (e.into_bytes()).into_boxed_slice();
                                    let ptr156 = vec156.as_ptr().cast::<u8>();
                                    let len156 = vec156.len();
                                    ::core::mem::forget(vec156);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len156;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr156.cast_mut();
                                }
                                V191::InvalidType(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec157 = (e.into_bytes()).into_boxed_slice();
                                    let ptr157 = vec157.as_ptr().cast::<u8>();
                                    let len157 = vec157.len();
                                    ::core::mem::forget(vec157);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len157;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr157.cast_mut();
                                }
                                V191::InvalidAgentId(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec158 = (e.into_bytes()).into_boxed_slice();
                                    let ptr158 = vec158.as_ptr().cast::<u8>();
                                    let len158 = vec158.len();
                                    ::core::mem::forget(vec158);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len158;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr158.cast_mut();
                                }
                                V191::CustomError(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let super::super::super::super::golem::rpc::types::ValueAndType {
                                        value: value159,
                                        typ: typ159,
                                    } = e;
                                    let super::super::super::super::golem::rpc::types::WitValue {
                                        nodes: nodes160,
                                    } = value159;
                                    let vec171 = nodes160;
                                    let len171 = vec171.len();
                                    let layout171 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec171.len()
                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result171 = if layout171.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout171).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout171);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec171.into_iter().enumerate() {
                                        let base = result171
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            use super::super::super::super::golem::rpc::types::WitNode as V170;
                                            match e {
                                                V170::RecordValue(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let vec161 = (e).into_boxed_slice();
                                                    let ptr161 = vec161.as_ptr().cast::<u8>();
                                                    let len161 = vec161.len();
                                                    ::core::mem::forget(vec161);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len161;
                                                    *base.add(8).cast::<*mut u8>() = ptr161.cast_mut();
                                                }
                                                V170::VariantValue(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let (t162_0, t162_1) = e;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t162_0);
                                                    match t162_1 {
                                                        Some(e) => {
                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V170::EnumValue(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V170::FlagsValue(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    let vec163 = e;
                                                    let len163 = vec163.len();
                                                    let layout163 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec163.len() * 1,
                                                        1,
                                                    );
                                                    let result163 = if layout163.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout163).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout163);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec163.into_iter().enumerate() {
                                                        let base = result163.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len163;
                                                    *base.add(8).cast::<*mut u8>() = result163;
                                                }
                                                V170::TupleValue(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    let vec164 = (e).into_boxed_slice();
                                                    let ptr164 = vec164.as_ptr().cast::<u8>();
                                                    let len164 = vec164.len();
                                                    ::core::mem::forget(vec164);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len164;
                                                    *base.add(8).cast::<*mut u8>() = ptr164.cast_mut();
                                                }
                                                V170::ListValue(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    let vec165 = (e).into_boxed_slice();
                                                    let ptr165 = vec165.as_ptr().cast::<u8>();
                                                    let len165 = vec165.len();
                                                    ::core::mem::forget(vec165);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len165;
                                                    *base.add(8).cast::<*mut u8>() = ptr165.cast_mut();
                                                }
                                                V170::OptionValue(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    match e {
                                                        Some(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V170::ResultValue(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    match e {
                                                        Ok(e) => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                            match e {
                                                                Some(e) => {
                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        Err(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            match e {
                                                                Some(e) => {
                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    };
                                                }
                                                V170::PrimU8(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V170::PrimU16(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V170::PrimU32(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V170::PrimU64(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V170::PrimS8(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V170::PrimS16(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V170::PrimS32(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V170::PrimS64(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V170::PrimFloat32(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V170::PrimFloat64(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V170::PrimChar(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V170::PrimBool(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V170::PrimString(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec166 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr166 = vec166.as_ptr().cast::<u8>();
                                                    let len166 = vec166.len();
                                                    ::core::mem::forget(vec166);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len166;
                                                    *base.add(8).cast::<*mut u8>() = ptr166.cast_mut();
                                                }
                                                V170::Handle(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let (t167_0, t167_1) = e;
                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                        value: value168,
                                                    } = t167_0;
                                                    let vec169 = (value168.into_bytes()).into_boxed_slice();
                                                    let ptr169 = vec169.as_ptr().cast::<u8>();
                                                    let len169 = vec169.len();
                                                    ::core::mem::forget(vec169);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len169;
                                                    *base.add(8).cast::<*mut u8>() = ptr169.cast_mut();
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(t167_1);
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len171;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result171;
                                    let super::super::super::super::golem::rpc::types::WitType {
                                        nodes: nodes172,
                                    } = typ159;
                                    let vec190 = nodes172;
                                    let len190 = vec190.len();
                                    let layout190 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec190.len()
                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result190 = if layout190.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout190).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout190);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec190.into_iter().enumerate() {
                                        let base = result190
                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                name: name173,
                                                owner: owner173,
                                                type_: type_173,
                                            } = e;
                                            match name173 {
                                                Some(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec174 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr174 = vec174.as_ptr().cast::<u8>();
                                                    let len174 = vec174.len();
                                                    ::core::mem::forget(vec174);
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len174;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr174.cast_mut();
                                                }
                                                None => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match owner173 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec175 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr175 = vec175.as_ptr().cast::<u8>();
                                                    let len175 = vec175.len();
                                                    ::core::mem::forget(vec175);
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len175;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr175.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V189;
                                            match type_173 {
                                                V189::RecordType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec178 = e;
                                                    let len178 = vec178.len();
                                                    let layout178 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec178.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result178 = if layout178.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout178).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout178);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec178.into_iter().enumerate() {
                                                        let base = result178
                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t176_0, t176_1) = e;
                                                            let vec177 = (t176_0.into_bytes()).into_boxed_slice();
                                                            let ptr177 = vec177.as_ptr().cast::<u8>();
                                                            let len177 = vec177.len();
                                                            ::core::mem::forget(vec177);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len177;
                                                            *base.add(0).cast::<*mut u8>() = ptr177.cast_mut();
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(t176_1);
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len178;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result178;
                                                }
                                                V189::VariantType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec181 = e;
                                                    let len181 = vec181.len();
                                                    let layout181 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec181.len()
                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result181 = if layout181.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout181).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout181);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec181.into_iter().enumerate() {
                                                        let base = result181
                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t179_0, t179_1) = e;
                                                            let vec180 = (t179_0.into_bytes()).into_boxed_slice();
                                                            let ptr180 = vec180.as_ptr().cast::<u8>();
                                                            let len180 = vec180.len();
                                                            ::core::mem::forget(vec180);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len180;
                                                            *base.add(0).cast::<*mut u8>() = ptr180.cast_mut();
                                                            match t179_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len181;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result181;
                                                }
                                                V189::EnumType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let vec183 = e;
                                                    let len183 = vec183.len();
                                                    let layout183 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec183.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result183 = if layout183.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout183).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout183);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec183.into_iter().enumerate() {
                                                        let base = result183
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let vec182 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr182 = vec182.as_ptr().cast::<u8>();
                                                            let len182 = vec182.len();
                                                            ::core::mem::forget(vec182);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len182;
                                                            *base.add(0).cast::<*mut u8>() = ptr182.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len183;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result183;
                                                }
                                                V189::FlagsType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let vec185 = e;
                                                    let len185 = vec185.len();
                                                    let layout185 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec185.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result185 = if layout185.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout185).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout185);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec185.into_iter().enumerate() {
                                                        let base = result185
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let vec184 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr184 = vec184.as_ptr().cast::<u8>();
                                                            let len184 = vec184.len();
                                                            ::core::mem::forget(vec184);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len184;
                                                            *base.add(0).cast::<*mut u8>() = ptr184.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len185;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result185;
                                                }
                                                V189::TupleType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec186 = (e).into_boxed_slice();
                                                    let ptr186 = vec186.as_ptr().cast::<u8>();
                                                    let len186 = vec186.len();
                                                    ::core::mem::forget(vec186);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len186;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr186.cast_mut();
                                                }
                                                V189::ListType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V189::OptionType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V189::ResultType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let (t187_0, t187_1) = e;
                                                    match t187_0 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match t187_1 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V189::PrimU8Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                }
                                                V189::PrimU16Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                }
                                                V189::PrimU32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (10i32) as u8;
                                                }
                                                V189::PrimU64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (11i32) as u8;
                                                }
                                                V189::PrimS8Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (12i32) as u8;
                                                }
                                                V189::PrimS16Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (13i32) as u8;
                                                }
                                                V189::PrimS32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (14i32) as u8;
                                                }
                                                V189::PrimS64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (15i32) as u8;
                                                }
                                                V189::PrimF32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (16i32) as u8;
                                                }
                                                V189::PrimF64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (17i32) as u8;
                                                }
                                                V189::PrimCharType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (18i32) as u8;
                                                }
                                                V189::PrimBoolType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (19i32) as u8;
                                                }
                                                V189::PrimStringType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (20i32) as u8;
                                                }
                                                V189::HandleType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (21i32) as u8;
                                                    let (t188_0, t188_1) = e;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(t188_0);
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (t188_1.clone() as i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len190;
                                    *ptr154
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result190;
                                }
                            }
                        }
                    };
                    ptr154
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_agent_create<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {}
                        _ => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l2, l3, 1);
                                }
                                1 => {
                                    let l4 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l5 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l4, l5, 1);
                                }
                                2 => {
                                    let l6 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l7 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l6, l7, 1);
                                }
                                3 => {
                                    let l8 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l9 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l8, l9, 1);
                                }
                                _ => {
                                    let l10 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l11 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base29 = l10;
                                    let len29 = l11;
                                    for i in 0..len29 {
                                        let base = base29
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l12 = i32::from(*base.add(0).cast::<u8>());
                                            match l12 {
                                                0 => {
                                                    let l13 = *base.add(8).cast::<*mut u8>();
                                                    let l14 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base15 = l13;
                                                    let len15 = l14;
                                                    _rt::cabi_dealloc(base15, len15 * 4, 4);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {
                                                    let l16 = *base.add(8).cast::<*mut u8>();
                                                    let l17 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base18 = l16;
                                                    let len18 = l17;
                                                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                                                }
                                                4 => {
                                                    let l19 = *base.add(8).cast::<*mut u8>();
                                                    let l20 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base21 = l19;
                                                    let len21 = l20;
                                                    _rt::cabi_dealloc(base21, len21 * 4, 4);
                                                }
                                                5 => {
                                                    let l22 = *base.add(8).cast::<*mut u8>();
                                                    let l23 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l22;
                                                    let len24 = l23;
                                                    _rt::cabi_dealloc(base24, len24 * 4, 4);
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {}
                                                9 => {}
                                                10 => {}
                                                11 => {}
                                                12 => {}
                                                13 => {}
                                                14 => {}
                                                15 => {}
                                                16 => {}
                                                17 => {}
                                                18 => {}
                                                19 => {}
                                                20 => {
                                                    let l25 = *base.add(8).cast::<*mut u8>();
                                                    let l26 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                }
                                                _ => {
                                                    let l27 = *base.add(8).cast::<*mut u8>();
                                                    let l28 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l27, l28, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base29,
                                        len29 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l30 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l31 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base62 = l30;
                                    let len62 = l31;
                                    for i in 0..len62 {
                                        let base = base62
                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l32 = i32::from(*base.add(0).cast::<u8>());
                                            match l32 {
                                                0 => {}
                                                _ => {
                                                    let l33 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l34 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l33, l34, 1);
                                                }
                                            }
                                            let l35 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l35 {
                                                0 => {}
                                                _ => {
                                                    let l36 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l37 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l36, l37, 1);
                                                }
                                            }
                                            let l38 = i32::from(
                                                *base
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l38 {
                                                0 => {
                                                    let l39 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l40 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base43 = l39;
                                                    let len43 = l40;
                                                    for i in 0..len43 {
                                                        let base = base43
                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l41 = *base.add(0).cast::<*mut u8>();
                                                            let l42 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l41, l42, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base43,
                                                        len43 * (3 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                1 => {
                                                    let l44 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l45 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base48 = l44;
                                                    let len48 = l45;
                                                    for i in 0..len48 {
                                                        let base = base48
                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l46 = *base.add(0).cast::<*mut u8>();
                                                            let l47 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l46, l47, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base48,
                                                        len48 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                2 => {
                                                    let l49 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l50 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base53 = l49;
                                                    let len53 = l50;
                                                    for i in 0..len53 {
                                                        let base = base53
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l51 = *base.add(0).cast::<*mut u8>();
                                                            let l52 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l51, l52, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base53,
                                                        len53 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                3 => {
                                                    let l54 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l55 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base58 = l54;
                                                    let len58 = l55;
                                                    for i in 0..len58 {
                                                        let base = base58
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l56 = *base.add(0).cast::<*mut u8>();
                                                            let l57 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l56, l57, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base58,
                                                        len58 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                4 => {
                                                    let l59 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l60 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base61 = l59;
                                                    let len61 = l60;
                                                    _rt::cabi_dealloc(base61, len61 * 4, 4);
                                                }
                                                5 => {}
                                                6 => {}
                                                7 => {}
                                                8 => {}
                                                9 => {}
                                                10 => {}
                                                11 => {}
                                                12 => {}
                                                13 => {}
                                                14 => {}
                                                15 => {}
                                                16 => {}
                                                17 => {}
                                                18 => {}
                                                19 => {}
                                                20 => {}
                                                _ => {}
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base62,
                                        len62 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_get_id_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_id(
                        unsafe { AgentBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_get_id<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_invoke_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                    arg3: i32,
                    arg4: *mut u8,
                    arg5: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    use super::super::super::super::golem::agent::common::DataValue as V152;
                    let v152 = match arg3 {
                        0 => {
                            let e152 = {
                                let base74 = arg4;
                                let len74 = arg5;
                                let mut result74 = _rt::Vec::with_capacity(len74);
                                for i in 0..len74 {
                                    let base = base74
                                        .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                    let e74 = {
                                        let l1 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::super::golem::agent::common::ElementValue as V73;
                                        let v73 = match l1 {
                                            0 => {
                                                let e73 = {
                                                    let l2 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l3 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base49 = l2;
                                                    let len49 = l3;
                                                    let mut result49 = _rt::Vec::with_capacity(len49);
                                                    for i in 0..len49 {
                                                        let base = base49
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e49 = {
                                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V48;
                                                            let v48 = match l4 {
                                                                0 => {
                                                                    let e48 = {
                                                                        let l5 = *base.add(8).cast::<*mut u8>();
                                                                        let l6 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len7 = l6;
                                                                        _rt::Vec::from_raw_parts(l5.cast(), len7, len7)
                                                                    };
                                                                    V48::RecordValue(e48)
                                                                }
                                                                1 => {
                                                                    let e48 = {
                                                                        let l8 = *base.add(8).cast::<i32>();
                                                                        let l9 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l8 as u32,
                                                                            match l9 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l10 = *base.add(16).cast::<i32>();
                                                                                        l10
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V48::VariantValue(e48)
                                                                }
                                                                2 => {
                                                                    let e48 = {
                                                                        let l11 = *base.add(8).cast::<i32>();
                                                                        l11 as u32
                                                                    };
                                                                    V48::EnumValue(e48)
                                                                }
                                                                3 => {
                                                                    let e48 = {
                                                                        let l12 = *base.add(8).cast::<*mut u8>();
                                                                        let l13 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base15 = l12;
                                                                        let len15 = l13;
                                                                        let mut result15 = _rt::Vec::with_capacity(len15);
                                                                        for i in 0..len15 {
                                                                            let base = base15.add(i * 1);
                                                                            let e15 = {
                                                                                let l14 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l14 as u8)
                                                                            };
                                                                            result15.push(e15);
                                                                        }
                                                                        _rt::cabi_dealloc(base15, len15 * 1, 1);
                                                                        result15
                                                                    };
                                                                    V48::FlagsValue(e48)
                                                                }
                                                                4 => {
                                                                    let e48 = {
                                                                        let l16 = *base.add(8).cast::<*mut u8>();
                                                                        let l17 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len18 = l17;
                                                                        _rt::Vec::from_raw_parts(l16.cast(), len18, len18)
                                                                    };
                                                                    V48::TupleValue(e48)
                                                                }
                                                                5 => {
                                                                    let e48 = {
                                                                        let l19 = *base.add(8).cast::<*mut u8>();
                                                                        let l20 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len21 = l20;
                                                                        _rt::Vec::from_raw_parts(l19.cast(), len21, len21)
                                                                    };
                                                                    V48::ListValue(e48)
                                                                }
                                                                6 => {
                                                                    let e48 = {
                                                                        let l22 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l22 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l23 = *base.add(12).cast::<i32>();
                                                                                    l23
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::OptionValue(e48)
                                                                }
                                                                7 => {
                                                                    let e48 = {
                                                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l24 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l25 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l25 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l26 = *base.add(16).cast::<i32>();
                                                                                                l26
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l27 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l28 = *base.add(16).cast::<i32>();
                                                                                                l28
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V48::ResultValue(e48)
                                                                }
                                                                8 => {
                                                                    let e48 = {
                                                                        let l29 = i32::from(*base.add(8).cast::<u8>());
                                                                        l29 as u8
                                                                    };
                                                                    V48::PrimU8(e48)
                                                                }
                                                                9 => {
                                                                    let e48 = {
                                                                        let l30 = i32::from(*base.add(8).cast::<u16>());
                                                                        l30 as u16
                                                                    };
                                                                    V48::PrimU16(e48)
                                                                }
                                                                10 => {
                                                                    let e48 = {
                                                                        let l31 = *base.add(8).cast::<i32>();
                                                                        l31 as u32
                                                                    };
                                                                    V48::PrimU32(e48)
                                                                }
                                                                11 => {
                                                                    let e48 = {
                                                                        let l32 = *base.add(8).cast::<i64>();
                                                                        l32 as u64
                                                                    };
                                                                    V48::PrimU64(e48)
                                                                }
                                                                12 => {
                                                                    let e48 = {
                                                                        let l33 = i32::from(*base.add(8).cast::<i8>());
                                                                        l33 as i8
                                                                    };
                                                                    V48::PrimS8(e48)
                                                                }
                                                                13 => {
                                                                    let e48 = {
                                                                        let l34 = i32::from(*base.add(8).cast::<i16>());
                                                                        l34 as i16
                                                                    };
                                                                    V48::PrimS16(e48)
                                                                }
                                                                14 => {
                                                                    let e48 = {
                                                                        let l35 = *base.add(8).cast::<i32>();
                                                                        l35
                                                                    };
                                                                    V48::PrimS32(e48)
                                                                }
                                                                15 => {
                                                                    let e48 = {
                                                                        let l36 = *base.add(8).cast::<i64>();
                                                                        l36
                                                                    };
                                                                    V48::PrimS64(e48)
                                                                }
                                                                16 => {
                                                                    let e48 = {
                                                                        let l37 = *base.add(8).cast::<f32>();
                                                                        l37
                                                                    };
                                                                    V48::PrimFloat32(e48)
                                                                }
                                                                17 => {
                                                                    let e48 = {
                                                                        let l38 = *base.add(8).cast::<f64>();
                                                                        l38
                                                                    };
                                                                    V48::PrimFloat64(e48)
                                                                }
                                                                18 => {
                                                                    let e48 = {
                                                                        let l39 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l39 as u32)
                                                                    };
                                                                    V48::PrimChar(e48)
                                                                }
                                                                19 => {
                                                                    let e48 = {
                                                                        let l40 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l40 as u8)
                                                                    };
                                                                    V48::PrimBool(e48)
                                                                }
                                                                20 => {
                                                                    let e48 = {
                                                                        let l41 = *base.add(8).cast::<*mut u8>();
                                                                        let l42 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len43 = l42;
                                                                        let bytes43 = _rt::Vec::from_raw_parts(
                                                                            l41.cast(),
                                                                            len43,
                                                                            len43,
                                                                        );
                                                                        _rt::string_lift(bytes43)
                                                                    };
                                                                    V48::PrimString(e48)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e48 = {
                                                                        let l44 = *base.add(8).cast::<*mut u8>();
                                                                        let l45 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len46 = l45;
                                                                        let bytes46 = _rt::Vec::from_raw_parts(
                                                                            l44.cast(),
                                                                            len46,
                                                                            len46,
                                                                        );
                                                                        let l47 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes46),
                                                                            },
                                                                            l47 as u64,
                                                                        )
                                                                    };
                                                                    V48::Handle(e48)
                                                                }
                                                            };
                                                            v48
                                                        };
                                                        result49.push(e49);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base49,
                                                        len49 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result49,
                                                    }
                                                };
                                                V73::ComponentModel(e73)
                                            }
                                            1 => {
                                                let e73 = {
                                                    let l50 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V61;
                                                    let v61 = match l50 {
                                                        0 => {
                                                            let e61 = {
                                                                let l51 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l52 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len53 = l52;
                                                                let bytes53 = _rt::Vec::from_raw_parts(
                                                                    l51.cast(),
                                                                    len53,
                                                                    len53,
                                                                );
                                                                _rt::string_lift(bytes53)
                                                            };
                                                            V61::Url(e61)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e61 = {
                                                                let l54 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l55 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len56 = l55;
                                                                let bytes56 = _rt::Vec::from_raw_parts(
                                                                    l54.cast(),
                                                                    len56,
                                                                    len56,
                                                                );
                                                                let l57 = i32::from(
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes56),
                                                                    text_type: match l57 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l58 = *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l59 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len60 = l59;
                                                                                let bytes60 = _rt::Vec::from_raw_parts(
                                                                                    l58.cast(),
                                                                                    len60,
                                                                                    len60,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes60),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V61::Inline(e61)
                                                        }
                                                    };
                                                    v61
                                                };
                                                V73::UnstructuredText(e73)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e73 = {
                                                    let l62 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V72;
                                                    let v72 = match l62 {
                                                        0 => {
                                                            let e72 = {
                                                                let l63 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l64 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len65 = l64;
                                                                let bytes65 = _rt::Vec::from_raw_parts(
                                                                    l63.cast(),
                                                                    len65,
                                                                    len65,
                                                                );
                                                                _rt::string_lift(bytes65)
                                                            };
                                                            V72::Url(e72)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e72 = {
                                                                let l66 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l67 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len68 = l67;
                                                                let l69 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l70 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len71 = l70;
                                                                let bytes71 = _rt::Vec::from_raw_parts(
                                                                    l69.cast(),
                                                                    len71,
                                                                    len71,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l66.cast(), len68, len68),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes71),
                                                                    },
                                                                }
                                                            };
                                                            V72::Inline(e72)
                                                        }
                                                    };
                                                    v72
                                                };
                                                V73::UnstructuredBinary(e73)
                                            }
                                        };
                                        v73
                                    };
                                    result74.push(e74);
                                }
                                _rt::cabi_dealloc(
                                    base74,
                                    len74 * (7 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result74
                            };
                            V152::Tuple(e152)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e152 = {
                                let base151 = arg4;
                                let len151 = arg5;
                                let mut result151 = _rt::Vec::with_capacity(len151);
                                for i in 0..len151 {
                                    let base = base151
                                        .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                    let e151 = {
                                        let l75 = *base.add(0).cast::<*mut u8>();
                                        let l76 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len77 = l76;
                                        let bytes77 = _rt::Vec::from_raw_parts(
                                            l75.cast(),
                                            len77,
                                            len77,
                                        );
                                        let l78 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::agent::common::ElementValue as V150;
                                        let v150 = match l78 {
                                            0 => {
                                                let e150 = {
                                                    let l79 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l80 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base126 = l79;
                                                    let len126 = l80;
                                                    let mut result126 = _rt::Vec::with_capacity(len126);
                                                    for i in 0..len126 {
                                                        let base = base126
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e126 = {
                                                            let l81 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V125;
                                                            let v125 = match l81 {
                                                                0 => {
                                                                    let e125 = {
                                                                        let l82 = *base.add(8).cast::<*mut u8>();
                                                                        let l83 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len84 = l83;
                                                                        _rt::Vec::from_raw_parts(l82.cast(), len84, len84)
                                                                    };
                                                                    V125::RecordValue(e125)
                                                                }
                                                                1 => {
                                                                    let e125 = {
                                                                        let l85 = *base.add(8).cast::<i32>();
                                                                        let l86 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l85 as u32,
                                                                            match l86 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l87 = *base.add(16).cast::<i32>();
                                                                                        l87
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V125::VariantValue(e125)
                                                                }
                                                                2 => {
                                                                    let e125 = {
                                                                        let l88 = *base.add(8).cast::<i32>();
                                                                        l88 as u32
                                                                    };
                                                                    V125::EnumValue(e125)
                                                                }
                                                                3 => {
                                                                    let e125 = {
                                                                        let l89 = *base.add(8).cast::<*mut u8>();
                                                                        let l90 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base92 = l89;
                                                                        let len92 = l90;
                                                                        let mut result92 = _rt::Vec::with_capacity(len92);
                                                                        for i in 0..len92 {
                                                                            let base = base92.add(i * 1);
                                                                            let e92 = {
                                                                                let l91 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l91 as u8)
                                                                            };
                                                                            result92.push(e92);
                                                                        }
                                                                        _rt::cabi_dealloc(base92, len92 * 1, 1);
                                                                        result92
                                                                    };
                                                                    V125::FlagsValue(e125)
                                                                }
                                                                4 => {
                                                                    let e125 = {
                                                                        let l93 = *base.add(8).cast::<*mut u8>();
                                                                        let l94 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len95 = l94;
                                                                        _rt::Vec::from_raw_parts(l93.cast(), len95, len95)
                                                                    };
                                                                    V125::TupleValue(e125)
                                                                }
                                                                5 => {
                                                                    let e125 = {
                                                                        let l96 = *base.add(8).cast::<*mut u8>();
                                                                        let l97 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len98 = l97;
                                                                        _rt::Vec::from_raw_parts(l96.cast(), len98, len98)
                                                                    };
                                                                    V125::ListValue(e125)
                                                                }
                                                                6 => {
                                                                    let e125 = {
                                                                        let l99 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l99 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l100 = *base.add(12).cast::<i32>();
                                                                                    l100
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::OptionValue(e125)
                                                                }
                                                                7 => {
                                                                    let e125 = {
                                                                        let l101 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l101 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l102 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l102 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l103 = *base.add(16).cast::<i32>();
                                                                                                l103
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l104 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l104 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l105 = *base.add(16).cast::<i32>();
                                                                                                l105
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V125::ResultValue(e125)
                                                                }
                                                                8 => {
                                                                    let e125 = {
                                                                        let l106 = i32::from(*base.add(8).cast::<u8>());
                                                                        l106 as u8
                                                                    };
                                                                    V125::PrimU8(e125)
                                                                }
                                                                9 => {
                                                                    let e125 = {
                                                                        let l107 = i32::from(*base.add(8).cast::<u16>());
                                                                        l107 as u16
                                                                    };
                                                                    V125::PrimU16(e125)
                                                                }
                                                                10 => {
                                                                    let e125 = {
                                                                        let l108 = *base.add(8).cast::<i32>();
                                                                        l108 as u32
                                                                    };
                                                                    V125::PrimU32(e125)
                                                                }
                                                                11 => {
                                                                    let e125 = {
                                                                        let l109 = *base.add(8).cast::<i64>();
                                                                        l109 as u64
                                                                    };
                                                                    V125::PrimU64(e125)
                                                                }
                                                                12 => {
                                                                    let e125 = {
                                                                        let l110 = i32::from(*base.add(8).cast::<i8>());
                                                                        l110 as i8
                                                                    };
                                                                    V125::PrimS8(e125)
                                                                }
                                                                13 => {
                                                                    let e125 = {
                                                                        let l111 = i32::from(*base.add(8).cast::<i16>());
                                                                        l111 as i16
                                                                    };
                                                                    V125::PrimS16(e125)
                                                                }
                                                                14 => {
                                                                    let e125 = {
                                                                        let l112 = *base.add(8).cast::<i32>();
                                                                        l112
                                                                    };
                                                                    V125::PrimS32(e125)
                                                                }
                                                                15 => {
                                                                    let e125 = {
                                                                        let l113 = *base.add(8).cast::<i64>();
                                                                        l113
                                                                    };
                                                                    V125::PrimS64(e125)
                                                                }
                                                                16 => {
                                                                    let e125 = {
                                                                        let l114 = *base.add(8).cast::<f32>();
                                                                        l114
                                                                    };
                                                                    V125::PrimFloat32(e125)
                                                                }
                                                                17 => {
                                                                    let e125 = {
                                                                        let l115 = *base.add(8).cast::<f64>();
                                                                        l115
                                                                    };
                                                                    V125::PrimFloat64(e125)
                                                                }
                                                                18 => {
                                                                    let e125 = {
                                                                        let l116 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l116 as u32)
                                                                    };
                                                                    V125::PrimChar(e125)
                                                                }
                                                                19 => {
                                                                    let e125 = {
                                                                        let l117 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l117 as u8)
                                                                    };
                                                                    V125::PrimBool(e125)
                                                                }
                                                                20 => {
                                                                    let e125 = {
                                                                        let l118 = *base.add(8).cast::<*mut u8>();
                                                                        let l119 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len120 = l119;
                                                                        let bytes120 = _rt::Vec::from_raw_parts(
                                                                            l118.cast(),
                                                                            len120,
                                                                            len120,
                                                                        );
                                                                        _rt::string_lift(bytes120)
                                                                    };
                                                                    V125::PrimString(e125)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e125 = {
                                                                        let l121 = *base.add(8).cast::<*mut u8>();
                                                                        let l122 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len123 = l122;
                                                                        let bytes123 = _rt::Vec::from_raw_parts(
                                                                            l121.cast(),
                                                                            len123,
                                                                            len123,
                                                                        );
                                                                        let l124 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes123),
                                                                            },
                                                                            l124 as u64,
                                                                        )
                                                                    };
                                                                    V125::Handle(e125)
                                                                }
                                                            };
                                                            v125
                                                        };
                                                        result126.push(e126);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base126,
                                                        len126 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result126,
                                                    }
                                                };
                                                V150::ComponentModel(e150)
                                            }
                                            1 => {
                                                let e150 = {
                                                    let l127 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V138;
                                                    let v138 = match l127 {
                                                        0 => {
                                                            let e138 = {
                                                                let l128 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l129 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len130 = l129;
                                                                let bytes130 = _rt::Vec::from_raw_parts(
                                                                    l128.cast(),
                                                                    len130,
                                                                    len130,
                                                                );
                                                                _rt::string_lift(bytes130)
                                                            };
                                                            V138::Url(e138)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e138 = {
                                                                let l131 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l132 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len133 = l132;
                                                                let bytes133 = _rt::Vec::from_raw_parts(
                                                                    l131.cast(),
                                                                    len133,
                                                                    len133,
                                                                );
                                                                let l134 = i32::from(
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes133),
                                                                    text_type: match l134 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l135 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l136 = *base
                                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len137 = l136;
                                                                                let bytes137 = _rt::Vec::from_raw_parts(
                                                                                    l135.cast(),
                                                                                    len137,
                                                                                    len137,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes137),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V138::Inline(e138)
                                                        }
                                                    };
                                                    v138
                                                };
                                                V150::UnstructuredText(e150)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e150 = {
                                                    let l139 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V149;
                                                    let v149 = match l139 {
                                                        0 => {
                                                            let e149 = {
                                                                let l140 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l141 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len142 = l141;
                                                                let bytes142 = _rt::Vec::from_raw_parts(
                                                                    l140.cast(),
                                                                    len142,
                                                                    len142,
                                                                );
                                                                _rt::string_lift(bytes142)
                                                            };
                                                            V149::Url(e149)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e149 = {
                                                                let l143 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l144 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len145 = l144;
                                                                let l146 = *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l147 = *base
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len148 = l147;
                                                                let bytes148 = _rt::Vec::from_raw_parts(
                                                                    l146.cast(),
                                                                    len148,
                                                                    len148,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l143.cast(), len145, len145),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes148),
                                                                    },
                                                                }
                                                            };
                                                            V149::Inline(e149)
                                                        }
                                                    };
                                                    v149
                                                };
                                                V150::UnstructuredBinary(e150)
                                            }
                                        };
                                        (_rt::string_lift(bytes77), v150)
                                    };
                                    result151.push(e151);
                                }
                                _rt::cabi_dealloc(
                                    base151,
                                    len151 * (9 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result151
                            };
                            V152::Multimodal(e152)
                        }
                    };
                    let result153 = T::invoke(
                        unsafe { AgentBorrow::lift(arg0 as u32 as usize) }.get(),
                        _rt::string_lift(bytes0),
                        v152,
                    );
                    let ptr154 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result153 {
                        Ok(e) => {
                            *ptr154.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::golem::agent::common::DataValue as V209;
                            match e {
                                V209::Tuple(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec180 = e;
                                    let len180 = vec180.len();
                                    let layout180 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec180.len() * (7 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result180 = if layout180.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout180).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout180);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec180.into_iter().enumerate() {
                                        let base = result180
                                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            use super::super::super::super::golem::agent::common::ElementValue as V179;
                                            match e {
                                                V179::ComponentModel(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: nodes155,
                                                    } = e;
                                                    let vec166 = nodes155;
                                                    let len166 = vec166.len();
                                                    let layout166 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec166.len()
                                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result166 = if layout166.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout166).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout166);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec166.into_iter().enumerate() {
                                                        let base = result166
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            use super::super::super::super::golem::rpc::types::WitNode as V165;
                                                            match e {
                                                                V165::RecordValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec156 = (e).into_boxed_slice();
                                                                    let ptr156 = vec156.as_ptr().cast::<u8>();
                                                                    let len156 = vec156.len();
                                                                    ::core::mem::forget(vec156);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len156;
                                                                    *base.add(8).cast::<*mut u8>() = ptr156.cast_mut();
                                                                }
                                                                V165::VariantValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let (t157_0, t157_1) = e;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t157_0);
                                                                    match t157_1 {
                                                                        Some(e) => {
                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V165::EnumValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::FlagsValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    let vec158 = e;
                                                                    let len158 = vec158.len();
                                                                    let layout158 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec158.len() * 1,
                                                                        1,
                                                                    );
                                                                    let result158 = if layout158.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout158).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout158);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec158.into_iter().enumerate() {
                                                                        let base = result158.add(i * 1);
                                                                        {
                                                                            *base.add(0).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len158;
                                                                    *base.add(8).cast::<*mut u8>() = result158;
                                                                }
                                                                V165::TupleValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                    let vec159 = (e).into_boxed_slice();
                                                                    let ptr159 = vec159.as_ptr().cast::<u8>();
                                                                    let len159 = vec159.len();
                                                                    ::core::mem::forget(vec159);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len159;
                                                                    *base.add(8).cast::<*mut u8>() = ptr159.cast_mut();
                                                                }
                                                                V165::ListValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec160 = (e).into_boxed_slice();
                                                                    let ptr160 = vec160.as_ptr().cast::<u8>();
                                                                    let len160 = vec160.len();
                                                                    ::core::mem::forget(vec160);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len160;
                                                                    *base.add(8).cast::<*mut u8>() = ptr160.cast_mut();
                                                                }
                                                                V165::OptionValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    match e {
                                                                        Some(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V165::ResultValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    match e {
                                                                        Ok(e) => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        Err(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    };
                                                                }
                                                                V165::PrimU8(e) => {
                                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V165::PrimU16(e) => {
                                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V165::PrimU32(e) => {
                                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::PrimU64(e) => {
                                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V165::PrimS8(e) => {
                                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V165::PrimS16(e) => {
                                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V165::PrimS32(e) => {
                                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::PrimS64(e) => {
                                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V165::PrimFloat32(e) => {
                                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                }
                                                                V165::PrimFloat64(e) => {
                                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V165::PrimChar(e) => {
                                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V165::PrimBool(e) => {
                                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V165::PrimString(e) => {
                                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                    let vec161 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr161 = vec161.as_ptr().cast::<u8>();
                                                                    let len161 = vec161.len();
                                                                    ::core::mem::forget(vec161);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len161;
                                                                    *base.add(8).cast::<*mut u8>() = ptr161.cast_mut();
                                                                }
                                                                V165::Handle(e) => {
                                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                    let (t162_0, t162_1) = e;
                                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                                        value: value163,
                                                                    } = t162_0;
                                                                    let vec164 = (value163.into_bytes()).into_boxed_slice();
                                                                    let ptr164 = vec164.as_ptr().cast::<u8>();
                                                                    let len164 = vec164.len();
                                                                    ::core::mem::forget(vec164);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len164;
                                                                    *base.add(8).cast::<*mut u8>() = ptr164.cast_mut();
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t162_1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len166;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result166;
                                                }
                                                V179::UnstructuredText(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::agent::common::TextReference as V172;
                                                    match e {
                                                        V172::Url(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec167 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr167 = vec167.as_ptr().cast::<u8>();
                                                            let len167 = vec167.len();
                                                            ::core::mem::forget(vec167);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len167;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr167.cast_mut();
                                                        }
                                                        V172::Inline(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextSource {
                                                                data: data168,
                                                                text_type: text_type168,
                                                            } = e;
                                                            let vec169 = (data168.into_bytes()).into_boxed_slice();
                                                            let ptr169 = vec169.as_ptr().cast::<u8>();
                                                            let len169 = vec169.len();
                                                            ::core::mem::forget(vec169);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len169;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr169.cast_mut();
                                                            match text_type168 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code170,
                                                                    } = e;
                                                                    let vec171 = (language_code170.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr171 = vec171.as_ptr().cast::<u8>();
                                                                    let len171 = vec171.len();
                                                                    ::core::mem::forget(vec171);
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len171;
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr171.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                                V179::UnstructuredBinary(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V178;
                                                    match e {
                                                        V178::Url(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec173 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr173 = vec173.as_ptr().cast::<u8>();
                                                            let len173 = vec173.len();
                                                            ::core::mem::forget(vec173);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len173;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr173.cast_mut();
                                                        }
                                                        V178::Inline(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinarySource {
                                                                data: data174,
                                                                binary_type: binary_type174,
                                                            } = e;
                                                            let vec175 = (data174).into_boxed_slice();
                                                            let ptr175 = vec175.as_ptr().cast::<u8>();
                                                            let len175 = vec175.len();
                                                            ::core::mem::forget(vec175);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len175;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr175.cast_mut();
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type176,
                                                            } = binary_type174;
                                                            let vec177 = (mime_type176.into_bytes()).into_boxed_slice();
                                                            let ptr177 = vec177.as_ptr().cast::<u8>();
                                                            let len177 = vec177.len();
                                                            ::core::mem::forget(vec177);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len177;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr177.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len180;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result180;
                                }
                                V209::Multimodal(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec208 = e;
                                    let len208 = vec208.len();
                                    let layout208 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec208.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result208 = if layout208.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout208).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout208);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec208.into_iter().enumerate() {
                                        let base = result208
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t181_0, t181_1) = e;
                                            let vec182 = (t181_0.into_bytes()).into_boxed_slice();
                                            let ptr182 = vec182.as_ptr().cast::<u8>();
                                            let len182 = vec182.len();
                                            ::core::mem::forget(vec182);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len182;
                                            *base.add(0).cast::<*mut u8>() = ptr182.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementValue as V207;
                                            match t181_1 {
                                                V207::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: nodes183,
                                                    } = e;
                                                    let vec194 = nodes183;
                                                    let len194 = vec194.len();
                                                    let layout194 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec194.len()
                                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result194 = if layout194.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout194).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout194);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec194.into_iter().enumerate() {
                                                        let base = result194
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            use super::super::super::super::golem::rpc::types::WitNode as V193;
                                                            match e {
                                                                V193::RecordValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec184 = (e).into_boxed_slice();
                                                                    let ptr184 = vec184.as_ptr().cast::<u8>();
                                                                    let len184 = vec184.len();
                                                                    ::core::mem::forget(vec184);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len184;
                                                                    *base.add(8).cast::<*mut u8>() = ptr184.cast_mut();
                                                                }
                                                                V193::VariantValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let (t185_0, t185_1) = e;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t185_0);
                                                                    match t185_1 {
                                                                        Some(e) => {
                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V193::EnumValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::FlagsValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    let vec186 = e;
                                                                    let len186 = vec186.len();
                                                                    let layout186 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec186.len() * 1,
                                                                        1,
                                                                    );
                                                                    let result186 = if layout186.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout186).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout186);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec186.into_iter().enumerate() {
                                                                        let base = result186.add(i * 1);
                                                                        {
                                                                            *base.add(0).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len186;
                                                                    *base.add(8).cast::<*mut u8>() = result186;
                                                                }
                                                                V193::TupleValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                    let vec187 = (e).into_boxed_slice();
                                                                    let ptr187 = vec187.as_ptr().cast::<u8>();
                                                                    let len187 = vec187.len();
                                                                    ::core::mem::forget(vec187);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len187;
                                                                    *base.add(8).cast::<*mut u8>() = ptr187.cast_mut();
                                                                }
                                                                V193::ListValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec188 = (e).into_boxed_slice();
                                                                    let ptr188 = vec188.as_ptr().cast::<u8>();
                                                                    let len188 = vec188.len();
                                                                    ::core::mem::forget(vec188);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len188;
                                                                    *base.add(8).cast::<*mut u8>() = ptr188.cast_mut();
                                                                }
                                                                V193::OptionValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    match e {
                                                                        Some(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V193::ResultValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    match e {
                                                                        Ok(e) => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        Err(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    };
                                                                }
                                                                V193::PrimU8(e) => {
                                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V193::PrimU16(e) => {
                                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V193::PrimU32(e) => {
                                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::PrimU64(e) => {
                                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V193::PrimS8(e) => {
                                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V193::PrimS16(e) => {
                                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V193::PrimS32(e) => {
                                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::PrimS64(e) => {
                                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V193::PrimFloat32(e) => {
                                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                }
                                                                V193::PrimFloat64(e) => {
                                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V193::PrimChar(e) => {
                                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V193::PrimBool(e) => {
                                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V193::PrimString(e) => {
                                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                    let vec189 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr189 = vec189.as_ptr().cast::<u8>();
                                                                    let len189 = vec189.len();
                                                                    ::core::mem::forget(vec189);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len189;
                                                                    *base.add(8).cast::<*mut u8>() = ptr189.cast_mut();
                                                                }
                                                                V193::Handle(e) => {
                                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                    let (t190_0, t190_1) = e;
                                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                                        value: value191,
                                                                    } = t190_0;
                                                                    let vec192 = (value191.into_bytes()).into_boxed_slice();
                                                                    let ptr192 = vec192.as_ptr().cast::<u8>();
                                                                    let len192 = vec192.len();
                                                                    ::core::mem::forget(vec192);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len192;
                                                                    *base.add(8).cast::<*mut u8>() = ptr192.cast_mut();
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t190_1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len194;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result194;
                                                }
                                                V207::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::agent::common::TextReference as V200;
                                                    match e {
                                                        V200::Url(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec195 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr195 = vec195.as_ptr().cast::<u8>();
                                                            let len195 = vec195.len();
                                                            ::core::mem::forget(vec195);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len195;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr195.cast_mut();
                                                        }
                                                        V200::Inline(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextSource {
                                                                data: data196,
                                                                text_type: text_type196,
                                                            } = e;
                                                            let vec197 = (data196.into_bytes()).into_boxed_slice();
                                                            let ptr197 = vec197.as_ptr().cast::<u8>();
                                                            let len197 = vec197.len();
                                                            ::core::mem::forget(vec197);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len197;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr197.cast_mut();
                                                            match text_type196 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code198,
                                                                    } = e;
                                                                    let vec199 = (language_code198.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr199 = vec199.as_ptr().cast::<u8>();
                                                                    let len199 = vec199.len();
                                                                    ::core::mem::forget(vec199);
                                                                    *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len199;
                                                                    *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr199.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                                V207::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V206;
                                                    match e {
                                                        V206::Url(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec201 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr201 = vec201.as_ptr().cast::<u8>();
                                                            let len201 = vec201.len();
                                                            ::core::mem::forget(vec201);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len201;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr201.cast_mut();
                                                        }
                                                        V206::Inline(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinarySource {
                                                                data: data202,
                                                                binary_type: binary_type202,
                                                            } = e;
                                                            let vec203 = (data202).into_boxed_slice();
                                                            let ptr203 = vec203.as_ptr().cast::<u8>();
                                                            let len203 = vec203.len();
                                                            ::core::mem::forget(vec203);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len203;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr203.cast_mut();
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type204,
                                                            } = binary_type202;
                                                            let vec205 = (mime_type204.into_bytes()).into_boxed_slice();
                                                            let ptr205 = vec205.as_ptr().cast::<u8>();
                                                            let len205 = vec205.len();
                                                            ::core::mem::forget(vec205);
                                                            *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len205;
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr205.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len208;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result208;
                                }
                            }
                        }
                        Err(e) => {
                            *ptr154.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::agent::common::AgentError as V246;
                            match e {
                                V246::InvalidInput(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec210 = (e.into_bytes()).into_boxed_slice();
                                    let ptr210 = vec210.as_ptr().cast::<u8>();
                                    let len210 = vec210.len();
                                    ::core::mem::forget(vec210);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len210;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr210.cast_mut();
                                }
                                V246::InvalidMethod(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec211 = (e.into_bytes()).into_boxed_slice();
                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                    let len211 = vec211.len();
                                    ::core::mem::forget(vec211);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len211;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr211.cast_mut();
                                }
                                V246::InvalidType(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec212 = (e.into_bytes()).into_boxed_slice();
                                    let ptr212 = vec212.as_ptr().cast::<u8>();
                                    let len212 = vec212.len();
                                    ::core::mem::forget(vec212);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len212;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr212.cast_mut();
                                }
                                V246::InvalidAgentId(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec213 = (e.into_bytes()).into_boxed_slice();
                                    let ptr213 = vec213.as_ptr().cast::<u8>();
                                    let len213 = vec213.len();
                                    ::core::mem::forget(vec213);
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len213;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr213.cast_mut();
                                }
                                V246::CustomError(e) => {
                                    *ptr154
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let super::super::super::super::golem::rpc::types::ValueAndType {
                                        value: value214,
                                        typ: typ214,
                                    } = e;
                                    let super::super::super::super::golem::rpc::types::WitValue {
                                        nodes: nodes215,
                                    } = value214;
                                    let vec226 = nodes215;
                                    let len226 = vec226.len();
                                    let layout226 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec226.len()
                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result226 = if layout226.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout226).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout226);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec226.into_iter().enumerate() {
                                        let base = result226
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            use super::super::super::super::golem::rpc::types::WitNode as V225;
                                            match e {
                                                V225::RecordValue(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let vec216 = (e).into_boxed_slice();
                                                    let ptr216 = vec216.as_ptr().cast::<u8>();
                                                    let len216 = vec216.len();
                                                    ::core::mem::forget(vec216);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len216;
                                                    *base.add(8).cast::<*mut u8>() = ptr216.cast_mut();
                                                }
                                                V225::VariantValue(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let (t217_0, t217_1) = e;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t217_0);
                                                    match t217_1 {
                                                        Some(e) => {
                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V225::EnumValue(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V225::FlagsValue(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    let vec218 = e;
                                                    let len218 = vec218.len();
                                                    let layout218 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec218.len() * 1,
                                                        1,
                                                    );
                                                    let result218 = if layout218.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout218).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout218);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec218.into_iter().enumerate() {
                                                        let base = result218.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len218;
                                                    *base.add(8).cast::<*mut u8>() = result218;
                                                }
                                                V225::TupleValue(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    let vec219 = (e).into_boxed_slice();
                                                    let ptr219 = vec219.as_ptr().cast::<u8>();
                                                    let len219 = vec219.len();
                                                    ::core::mem::forget(vec219);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len219;
                                                    *base.add(8).cast::<*mut u8>() = ptr219.cast_mut();
                                                }
                                                V225::ListValue(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    let vec220 = (e).into_boxed_slice();
                                                    let ptr220 = vec220.as_ptr().cast::<u8>();
                                                    let len220 = vec220.len();
                                                    ::core::mem::forget(vec220);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len220;
                                                    *base.add(8).cast::<*mut u8>() = ptr220.cast_mut();
                                                }
                                                V225::OptionValue(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    match e {
                                                        Some(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V225::ResultValue(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    match e {
                                                        Ok(e) => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                            match e {
                                                                Some(e) => {
                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        Err(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            match e {
                                                                Some(e) => {
                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    };
                                                }
                                                V225::PrimU8(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V225::PrimU16(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V225::PrimU32(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V225::PrimU64(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V225::PrimS8(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V225::PrimS16(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V225::PrimS32(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V225::PrimS64(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V225::PrimFloat32(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V225::PrimFloat64(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V225::PrimChar(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V225::PrimBool(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V225::PrimString(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec221 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr221 = vec221.as_ptr().cast::<u8>();
                                                    let len221 = vec221.len();
                                                    ::core::mem::forget(vec221);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len221;
                                                    *base.add(8).cast::<*mut u8>() = ptr221.cast_mut();
                                                }
                                                V225::Handle(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let (t222_0, t222_1) = e;
                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                        value: value223,
                                                    } = t222_0;
                                                    let vec224 = (value223.into_bytes()).into_boxed_slice();
                                                    let ptr224 = vec224.as_ptr().cast::<u8>();
                                                    let len224 = vec224.len();
                                                    ::core::mem::forget(vec224);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len224;
                                                    *base.add(8).cast::<*mut u8>() = ptr224.cast_mut();
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(t222_1);
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len226;
                                    *ptr154
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result226;
                                    let super::super::super::super::golem::rpc::types::WitType {
                                        nodes: nodes227,
                                    } = typ214;
                                    let vec245 = nodes227;
                                    let len245 = vec245.len();
                                    let layout245 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec245.len()
                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result245 = if layout245.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout245).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout245);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec245.into_iter().enumerate() {
                                        let base = result245
                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                name: name228,
                                                owner: owner228,
                                                type_: type_228,
                                            } = e;
                                            match name228 {
                                                Some(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec229 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr229 = vec229.as_ptr().cast::<u8>();
                                                    let len229 = vec229.len();
                                                    ::core::mem::forget(vec229);
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len229;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr229.cast_mut();
                                                }
                                                None => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match owner228 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec230 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr230 = vec230.as_ptr().cast::<u8>();
                                                    let len230 = vec230.len();
                                                    ::core::mem::forget(vec230);
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len230;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr230.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V244;
                                            match type_228 {
                                                V244::RecordType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec233 = e;
                                                    let len233 = vec233.len();
                                                    let layout233 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec233.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result233 = if layout233.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout233).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout233);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec233.into_iter().enumerate() {
                                                        let base = result233
                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t231_0, t231_1) = e;
                                                            let vec232 = (t231_0.into_bytes()).into_boxed_slice();
                                                            let ptr232 = vec232.as_ptr().cast::<u8>();
                                                            let len232 = vec232.len();
                                                            ::core::mem::forget(vec232);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len232;
                                                            *base.add(0).cast::<*mut u8>() = ptr232.cast_mut();
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(t231_1);
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len233;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result233;
                                                }
                                                V244::VariantType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec236 = e;
                                                    let len236 = vec236.len();
                                                    let layout236 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec236.len()
                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result236 = if layout236.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout236).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout236);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec236.into_iter().enumerate() {
                                                        let base = result236
                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t234_0, t234_1) = e;
                                                            let vec235 = (t234_0.into_bytes()).into_boxed_slice();
                                                            let ptr235 = vec235.as_ptr().cast::<u8>();
                                                            let len235 = vec235.len();
                                                            ::core::mem::forget(vec235);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len235;
                                                            *base.add(0).cast::<*mut u8>() = ptr235.cast_mut();
                                                            match t234_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len236;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result236;
                                                }
                                                V244::EnumType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let vec238 = e;
                                                    let len238 = vec238.len();
                                                    let layout238 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec238.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result238 = if layout238.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout238).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout238);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec238.into_iter().enumerate() {
                                                        let base = result238
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let vec237 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr237 = vec237.as_ptr().cast::<u8>();
                                                            let len237 = vec237.len();
                                                            ::core::mem::forget(vec237);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len237;
                                                            *base.add(0).cast::<*mut u8>() = ptr237.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len238;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result238;
                                                }
                                                V244::FlagsType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let vec240 = e;
                                                    let len240 = vec240.len();
                                                    let layout240 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec240.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result240 = if layout240.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout240).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout240);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec240.into_iter().enumerate() {
                                                        let base = result240
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let vec239 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr239 = vec239.as_ptr().cast::<u8>();
                                                            let len239 = vec239.len();
                                                            ::core::mem::forget(vec239);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len239;
                                                            *base.add(0).cast::<*mut u8>() = ptr239.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len240;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result240;
                                                }
                                                V244::TupleType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec241 = (e).into_boxed_slice();
                                                    let ptr241 = vec241.as_ptr().cast::<u8>();
                                                    let len241 = vec241.len();
                                                    ::core::mem::forget(vec241);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len241;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr241.cast_mut();
                                                }
                                                V244::ListType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V244::OptionType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V244::ResultType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let (t242_0, t242_1) = e;
                                                    match t242_0 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match t242_1 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V244::PrimU8Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                }
                                                V244::PrimU16Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                }
                                                V244::PrimU32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (10i32) as u8;
                                                }
                                                V244::PrimU64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (11i32) as u8;
                                                }
                                                V244::PrimS8Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (12i32) as u8;
                                                }
                                                V244::PrimS16Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (13i32) as u8;
                                                }
                                                V244::PrimS32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (14i32) as u8;
                                                }
                                                V244::PrimS64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (15i32) as u8;
                                                }
                                                V244::PrimF32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (16i32) as u8;
                                                }
                                                V244::PrimF64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (17i32) as u8;
                                                }
                                                V244::PrimCharType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (18i32) as u8;
                                                }
                                                V244::PrimBoolType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (19i32) as u8;
                                                }
                                                V244::PrimStringType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (20i32) as u8;
                                                }
                                                V244::HandleType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (21i32) as u8;
                                                    let (t243_0, t243_1) = e;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(t243_0);
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (t243_1.clone() as i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *ptr154
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len245;
                                    *ptr154
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result245;
                                }
                            }
                        }
                    };
                    ptr154
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_invoke<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base41 = l2;
                                    let len41 = l3;
                                    for i in 0..len41 {
                                        let base = base41
                                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            match l4 {
                                                0 => {
                                                    let l5 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l6 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l5;
                                                    let len24 = l6;
                                                    for i in 0..len24 {
                                                        let base = base24
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l7 = i32::from(*base.add(0).cast::<u8>());
                                                            match l7 {
                                                                0 => {
                                                                    let l8 = *base.add(8).cast::<*mut u8>();
                                                                    let l9 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base10 = l8;
                                                                    let len10 = l9;
                                                                    _rt::cabi_dealloc(base10, len10 * 4, 4);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {
                                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                                    let l12 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base13 = l11;
                                                                    let len13 = l12;
                                                                    _rt::cabi_dealloc(base13, len13 * 1, 1);
                                                                }
                                                                4 => {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base16 = l14;
                                                                    let len16 = l15;
                                                                    _rt::cabi_dealloc(base16, len16 * 4, 4);
                                                                }
                                                                5 => {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base19 = l17;
                                                                    let len19 = l18;
                                                                    _rt::cabi_dealloc(base19, len19 * 4, 4);
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l20, l21, 1);
                                                                }
                                                                _ => {
                                                                    let l22 = *base.add(8).cast::<*mut u8>();
                                                                    let l23 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base24,
                                                        len24 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l25 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    match l25 {
                                                        0 => {
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                        }
                                                        _ => {
                                                            let l28 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l29 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                            let l30 = i32::from(
                                                                *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l30 {
                                                                0 => {}
                                                                _ => {
                                                                    let l31 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l33 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    match l33 {
                                                        0 => {
                                                            let l34 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l35 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l34, l35, 1);
                                                        }
                                                        _ => {
                                                            let l36 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l37 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base38 = l36;
                                                            let len38 = l37;
                                                            _rt::cabi_dealloc(base38, len38 * 1, 1);
                                                            let l39 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l40 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l39, l40, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base41,
                                        len41 * (7 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l42 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l43 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base83 = l42;
                                    let len83 = l43;
                                    for i in 0..len83 {
                                        let base = base83
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l44 = *base.add(0).cast::<*mut u8>();
                                            let l45 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l44, l45, 1);
                                            let l46 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l46 {
                                                0 => {
                                                    let l47 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l48 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base66 = l47;
                                                    let len66 = l48;
                                                    for i in 0..len66 {
                                                        let base = base66
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l49 = i32::from(*base.add(0).cast::<u8>());
                                                            match l49 {
                                                                0 => {
                                                                    let l50 = *base.add(8).cast::<*mut u8>();
                                                                    let l51 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base52 = l50;
                                                                    let len52 = l51;
                                                                    _rt::cabi_dealloc(base52, len52 * 4, 4);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {
                                                                    let l53 = *base.add(8).cast::<*mut u8>();
                                                                    let l54 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base55 = l53;
                                                                    let len55 = l54;
                                                                    _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                }
                                                                4 => {
                                                                    let l56 = *base.add(8).cast::<*mut u8>();
                                                                    let l57 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base58 = l56;
                                                                    let len58 = l57;
                                                                    _rt::cabi_dealloc(base58, len58 * 4, 4);
                                                                }
                                                                5 => {
                                                                    let l59 = *base.add(8).cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base61 = l59;
                                                                    let len61 = l60;
                                                                    _rt::cabi_dealloc(base61, len61 * 4, 4);
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {
                                                                    let l62 = *base.add(8).cast::<*mut u8>();
                                                                    let l63 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                }
                                                                _ => {
                                                                    let l64 = *base.add(8).cast::<*mut u8>();
                                                                    let l65 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l64, l65, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base66,
                                                        len66 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l67 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l67 {
                                                        0 => {
                                                            let l68 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l69 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l68, l69, 1);
                                                        }
                                                        _ => {
                                                            let l70 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                            let l72 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l72 {
                                                                0 => {}
                                                                _ => {
                                                                    let l73 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l74 = *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l73, l74, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l75 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l75 {
                                                        0 => {
                                                            let l76 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l77 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l76, l77, 1);
                                                        }
                                                        _ => {
                                                            let l78 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l79 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base80 = l78;
                                                            let len80 = l79;
                                                            _rt::cabi_dealloc(base80, len80 * 1, 1);
                                                            let l81 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l82 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l81, l82, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base83,
                                        len83 * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l84 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l84 {
                                0 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                1 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                2 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                3 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                _ => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base112 = l93;
                                    let len112 = l94;
                                    for i in 0..len112 {
                                        let base = base112
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l95 = i32::from(*base.add(0).cast::<u8>());
                                            match l95 {
                                                0 => {
                                                    let l96 = *base.add(8).cast::<*mut u8>();
                                                    let l97 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base98 = l96;
                                                    let len98 = l97;
                                                    _rt::cabi_dealloc(base98, len98 * 4, 4);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {
                                                    let l99 = *base.add(8).cast::<*mut u8>();
                                                    let l100 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base101 = l99;
                                                    let len101 = l100;
                                                    _rt::cabi_dealloc(base101, len101 * 1, 1);
                                                }
                                                4 => {
                                                    let l102 = *base.add(8).cast::<*mut u8>();
                                                    let l103 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base104 = l102;
                                                    let len104 = l103;
                                                    _rt::cabi_dealloc(base104, len104 * 4, 4);
                                                }
                                                5 => {
                                                    let l105 = *base.add(8).cast::<*mut u8>();
                                                    let l106 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base107 = l105;
                                                    let len107 = l106;
                                                    _rt::cabi_dealloc(base107, len107 * 4, 4);
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {}
                                                9 => {}
                                                10 => {}
                                                11 => {}
                                                12 => {}
                                                13 => {}
                                                14 => {}
                                                15 => {}
                                                16 => {}
                                                17 => {}
                                                18 => {}
                                                19 => {}
                                                20 => {
                                                    let l108 = *base.add(8).cast::<*mut u8>();
                                                    let l109 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l108, l109, 1);
                                                }
                                                _ => {
                                                    let l110 = *base.add(8).cast::<*mut u8>();
                                                    let l111 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l110, l111, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base112,
                                        len112 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l113 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l114 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base145 = l113;
                                    let len145 = l114;
                                    for i in 0..len145 {
                                        let base = base145
                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l115 = i32::from(*base.add(0).cast::<u8>());
                                            match l115 {
                                                0 => {}
                                                _ => {
                                                    let l116 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l117 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l116, l117, 1);
                                                }
                                            }
                                            let l118 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l118 {
                                                0 => {}
                                                _ => {
                                                    let l119 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l120 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l119, l120, 1);
                                                }
                                            }
                                            let l121 = i32::from(
                                                *base
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l121 {
                                                0 => {
                                                    let l122 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l123 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base126 = l122;
                                                    let len126 = l123;
                                                    for i in 0..len126 {
                                                        let base = base126
                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l124 = *base.add(0).cast::<*mut u8>();
                                                            let l125 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l124, l125, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base126,
                                                        len126 * (3 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                1 => {
                                                    let l127 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l128 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base131 = l127;
                                                    let len131 = l128;
                                                    for i in 0..len131 {
                                                        let base = base131
                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l129 = *base.add(0).cast::<*mut u8>();
                                                            let l130 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l129, l130, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base131,
                                                        len131 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                2 => {
                                                    let l132 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l133 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base136 = l132;
                                                    let len136 = l133;
                                                    for i in 0..len136 {
                                                        let base = base136
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l134 = *base.add(0).cast::<*mut u8>();
                                                            let l135 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l134, l135, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base136,
                                                        len136 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                3 => {
                                                    let l137 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l138 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base141 = l137;
                                                    let len141 = l138;
                                                    for i in 0..len141 {
                                                        let base = base141
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l139 = *base.add(0).cast::<*mut u8>();
                                                            let l140 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l139, l140, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base141,
                                                        len141 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                4 => {
                                                    let l142 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l143 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base144 = l142;
                                                    let len144 = l143;
                                                    _rt::cabi_dealloc(base144, len144 * 4, 4);
                                                }
                                                5 => {}
                                                6 => {}
                                                7 => {}
                                                8 => {}
                                                9 => {}
                                                10 => {}
                                                11 => {}
                                                12 => {}
                                                13 => {}
                                                14 => {}
                                                15 => {}
                                                16 => {}
                                                17 => {}
                                                18 => {}
                                                19 => {}
                                                20 => {}
                                                _ => {}
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base145,
                                        len145 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_agent_get_definition_cabi<T: GuestAgent>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::get_definition(
                        unsafe { AgentBorrow::lift(arg0 as u32 as usize) }.get(),
                    );
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let super::super::super::super::golem::agent::common::AgentType {
                        type_name: type_name2,
                        description: description2,
                        constructor: constructor2,
                        methods: methods2,
                        dependencies: dependencies2,
                    } = result0;
                    let vec3 = (type_name2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (description2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(3 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len4;
                    *ptr1
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr4.cast_mut();
                    let super::super::super::super::golem::agent::common::AgentConstructor {
                        name: name5,
                        description: description5,
                        prompt_hint: prompt_hint5,
                        input_schema: input_schema5,
                    } = constructor2;
                    match name5 {
                        Some(e) => {
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec6 = (e.into_bytes()).into_boxed_slice();
                            let ptr6 = vec6.as_ptr().cast::<u8>();
                            let len6 = vec6.len();
                            ::core::mem::forget(vec6);
                            *ptr1
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len6;
                            *ptr1
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr6.cast_mut();
                        }
                        None => {
                            *ptr1
                                .add(4 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    let vec7 = (description5.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr1.add(8 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len7;
                    *ptr1
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr7.cast_mut();
                    match prompt_hint5 {
                        Some(e) => {
                            *ptr1
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *ptr1
                                .add(11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len8;
                            *ptr1
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr8.cast_mut();
                        }
                        None => {
                            *ptr1
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                        }
                    };
                    use super::super::super::super::golem::agent::common::DataSchema as V71;
                    match input_schema5 {
                        V71::Tuple(e) => {
                            *ptr1
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (0i32) as u8;
                            let vec39 = e;
                            let len39 = vec39.len();
                            let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec39.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result39 = if layout39.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout39);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec39.into_iter().enumerate() {
                                let base = result39
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t9_0, t9_1) = e;
                                    let vec10 = (t9_0.into_bytes()).into_boxed_slice();
                                    let ptr10 = vec10.as_ptr().cast::<u8>();
                                    let len10 = vec10.len();
                                    ::core::mem::forget(vec10);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len10;
                                    *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                    use super::super::super::super::golem::agent::common::ElementSchema as V38;
                                    match t9_1 {
                                        V38::ComponentModel(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::golem::rpc::types::WitType {
                                                nodes: nodes11,
                                            } = e;
                                            let vec29 = nodes11;
                                            let len29 = vec29.len();
                                            let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec29.len()
                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result29 = if layout29.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout29);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec29.into_iter().enumerate() {
                                                let base = result29
                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                        name: name12,
                                                        owner: owner12,
                                                        type_: type_12,
                                                    } = e;
                                                    match name12 {
                                                        Some(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            let vec13 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                                            let len13 = vec13.len();
                                                            ::core::mem::forget(vec13);
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len13;
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr13.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match owner12 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec14 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                                            let len14 = vec14.len();
                                                            ::core::mem::forget(vec14);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len14;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr14.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V28;
                                                    match type_12 {
                                                        V28::RecordType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec17 = e;
                                                            let len17 = vec17.len();
                                                            let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec17.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result17 = if layout17.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout17);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec17.into_iter().enumerate() {
                                                                let base = result17
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t15_0, t15_1) = e;
                                                                    let vec16 = (t15_0.into_bytes()).into_boxed_slice();
                                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                                    let len16 = vec16.len();
                                                                    ::core::mem::forget(vec16);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len16;
                                                                    *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(t15_1);
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len17;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result17;
                                                        }
                                                        V28::VariantType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec20 = e;
                                                            let len20 = vec20.len();
                                                            let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec20.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result20 = if layout20.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout20);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec20.into_iter().enumerate() {
                                                                let base = result20
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t18_0, t18_1) = e;
                                                                    let vec19 = (t18_0.into_bytes()).into_boxed_slice();
                                                                    let ptr19 = vec19.as_ptr().cast::<u8>();
                                                                    let len19 = vec19.len();
                                                                    ::core::mem::forget(vec19);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len19;
                                                                    *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                                    match t18_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len20;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result20;
                                                        }
                                                        V28::EnumType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let vec22 = e;
                                                            let len22 = vec22.len();
                                                            let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec22.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result22 = if layout22.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout22);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec22.into_iter().enumerate() {
                                                                let base = result22
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec21 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                                                    let len21 = vec21.len();
                                                                    ::core::mem::forget(vec21);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len21;
                                                                    *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len22;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result22;
                                                        }
                                                        V28::FlagsType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            let vec24 = e;
                                                            let len24 = vec24.len();
                                                            let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec24.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result24 = if layout24.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout24);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec24.into_iter().enumerate() {
                                                                let base = result24
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec23 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr23 = vec23.as_ptr().cast::<u8>();
                                                                    let len23 = vec23.len();
                                                                    ::core::mem::forget(vec23);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len23;
                                                                    *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len24;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result24;
                                                        }
                                                        V28::TupleType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec25 = (e).into_boxed_slice();
                                                            let ptr25 = vec25.as_ptr().cast::<u8>();
                                                            let len25 = vec25.len();
                                                            ::core::mem::forget(vec25);
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len25;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr25.cast_mut();
                                                        }
                                                        V28::ListType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V28::OptionType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V28::ResultType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let (t26_0, t26_1) = e;
                                                            match t26_0 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match t26_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V28::PrimU8Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                        }
                                                        V28::PrimU16Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                        }
                                                        V28::PrimU32Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (10i32) as u8;
                                                        }
                                                        V28::PrimU64Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (11i32) as u8;
                                                        }
                                                        V28::PrimS8Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (12i32) as u8;
                                                        }
                                                        V28::PrimS16Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (13i32) as u8;
                                                        }
                                                        V28::PrimS32Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (14i32) as u8;
                                                        }
                                                        V28::PrimS64Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (15i32) as u8;
                                                        }
                                                        V28::PrimF32Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (16i32) as u8;
                                                        }
                                                        V28::PrimF64Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (17i32) as u8;
                                                        }
                                                        V28::PrimCharType => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (18i32) as u8;
                                                        }
                                                        V28::PrimBoolType => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (19i32) as u8;
                                                        }
                                                        V28::PrimStringType => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (20i32) as u8;
                                                        }
                                                        V28::HandleType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (21i32) as u8;
                                                            let (t27_0, t27_1) = e;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(t27_0);
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (t27_1.clone() as i32) as u8;
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len29;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result29;
                                        }
                                        V38::UnstructuredText(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                restrictions: restrictions30,
                                            } = e;
                                            match restrictions30 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec33 = e;
                                                    let len33 = vec33.len();
                                                    let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec33.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result33 = if layout33.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout33);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec33.into_iter().enumerate() {
                                                        let base = result33
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                language_code: language_code31,
                                                            } = e;
                                                            let vec32 = (language_code31.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr32 = vec32.as_ptr().cast::<u8>();
                                                            let len32 = vec32.len();
                                                            ::core::mem::forget(vec32);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len32;
                                                            *base.add(0).cast::<*mut u8>() = ptr32.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len33;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result33;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V38::UnstructuredBinary(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                restrictions: restrictions34,
                                            } = e;
                                            match restrictions34 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec37 = e;
                                                    let len37 = vec37.len();
                                                    let layout37 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec37.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result37 = if layout37.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout37).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout37);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec37.into_iter().enumerate() {
                                                        let base = result37
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type35,
                                                            } = e;
                                                            let vec36 = (mime_type35.into_bytes()).into_boxed_slice();
                                                            let ptr36 = vec36.as_ptr().cast::<u8>();
                                                            let len36 = vec36.len();
                                                            ::core::mem::forget(vec36);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len36;
                                                            *base.add(0).cast::<*mut u8>() = ptr36.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len37;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result37;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr1
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len39;
                            *ptr1
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result39;
                        }
                        V71::Multimodal(e) => {
                            *ptr1
                                .add(12 * ::core::mem::size_of::<*const u8>())
                                .cast::<u8>() = (1i32) as u8;
                            let vec70 = e;
                            let len70 = vec70.len();
                            let layout70 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec70.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result70 = if layout70.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout70).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout70);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec70.into_iter().enumerate() {
                                let base = result70
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let (t40_0, t40_1) = e;
                                    let vec41 = (t40_0.into_bytes()).into_boxed_slice();
                                    let ptr41 = vec41.as_ptr().cast::<u8>();
                                    let len41 = vec41.len();
                                    ::core::mem::forget(vec41);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len41;
                                    *base.add(0).cast::<*mut u8>() = ptr41.cast_mut();
                                    use super::super::super::super::golem::agent::common::ElementSchema as V69;
                                    match t40_1 {
                                        V69::ComponentModel(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let super::super::super::super::golem::rpc::types::WitType {
                                                nodes: nodes42,
                                            } = e;
                                            let vec60 = nodes42;
                                            let len60 = vec60.len();
                                            let layout60 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec60.len()
                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                            let result60 = if layout60.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout60).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout60);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec60.into_iter().enumerate() {
                                                let base = result60
                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                        name: name43,
                                                        owner: owner43,
                                                        type_: type_43,
                                                    } = e;
                                                    match name43 {
                                                        Some(e) => {
                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                            let vec44 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr44 = vec44.as_ptr().cast::<u8>();
                                                            let len44 = vec44.len();
                                                            ::core::mem::forget(vec44);
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len44;
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr44.cast_mut();
                                                        }
                                                        None => {
                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match owner43 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec45 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr45 = vec45.as_ptr().cast::<u8>();
                                                            let len45 = vec45.len();
                                                            ::core::mem::forget(vec45);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len45;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr45.cast_mut();
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V59;
                                                    match type_43 {
                                                        V59::RecordType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec48 = e;
                                                            let len48 = vec48.len();
                                                            let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec48.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result48 = if layout48.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout48);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec48.into_iter().enumerate() {
                                                                let base = result48
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t46_0, t46_1) = e;
                                                                    let vec47 = (t46_0.into_bytes()).into_boxed_slice();
                                                                    let ptr47 = vec47.as_ptr().cast::<u8>();
                                                                    let len47 = vec47.len();
                                                                    ::core::mem::forget(vec47);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len47;
                                                                    *base.add(0).cast::<*mut u8>() = ptr47.cast_mut();
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(t46_1);
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len48;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result48;
                                                        }
                                                        V59::VariantType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec51 = e;
                                                            let len51 = vec51.len();
                                                            let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec51.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result51 = if layout51.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout51);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec51.into_iter().enumerate() {
                                                                let base = result51
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let (t49_0, t49_1) = e;
                                                                    let vec50 = (t49_0.into_bytes()).into_boxed_slice();
                                                                    let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                    let len50 = vec50.len();
                                                                    ::core::mem::forget(vec50);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len50;
                                                                    *base.add(0).cast::<*mut u8>() = ptr50.cast_mut();
                                                                    match t49_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len51;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result51;
                                                        }
                                                        V59::EnumType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let vec53 = e;
                                                            let len53 = vec53.len();
                                                            let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec53.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result53 = if layout53.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout53);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec53.into_iter().enumerate() {
                                                                let base = result53
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                    let len52 = vec52.len();
                                                                    ::core::mem::forget(vec52);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len52;
                                                                    *base.add(0).cast::<*mut u8>() = ptr52.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len53;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result53;
                                                        }
                                                        V59::FlagsType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (3i32) as u8;
                                                            let vec55 = e;
                                                            let len55 = vec55.len();
                                                            let layout55 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec55.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result55 = if layout55.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout55).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout55);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec55.into_iter().enumerate() {
                                                                let base = result55
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let vec54 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr54 = vec54.as_ptr().cast::<u8>();
                                                                    let len54 = vec54.len();
                                                                    ::core::mem::forget(vec54);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len54;
                                                                    *base.add(0).cast::<*mut u8>() = ptr54.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len55;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result55;
                                                        }
                                                        V59::TupleType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (4i32) as u8;
                                                            let vec56 = (e).into_boxed_slice();
                                                            let ptr56 = vec56.as_ptr().cast::<u8>();
                                                            let len56 = vec56.len();
                                                            ::core::mem::forget(vec56);
                                                            *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len56;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr56.cast_mut();
                                                        }
                                                        V59::ListType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (5i32) as u8;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V59::OptionType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (6i32) as u8;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        V59::ResultType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (7i32) as u8;
                                                            let (t57_0, t57_1) = e;
                                                            match t57_0 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match t57_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V59::PrimU8Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (8i32) as u8;
                                                        }
                                                        V59::PrimU16Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (9i32) as u8;
                                                        }
                                                        V59::PrimU32Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (10i32) as u8;
                                                        }
                                                        V59::PrimU64Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (11i32) as u8;
                                                        }
                                                        V59::PrimS8Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (12i32) as u8;
                                                        }
                                                        V59::PrimS16Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (13i32) as u8;
                                                        }
                                                        V59::PrimS32Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (14i32) as u8;
                                                        }
                                                        V59::PrimS64Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (15i32) as u8;
                                                        }
                                                        V59::PrimF32Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (16i32) as u8;
                                                        }
                                                        V59::PrimF64Type => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (17i32) as u8;
                                                        }
                                                        V59::PrimCharType => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (18i32) as u8;
                                                        }
                                                        V59::PrimBoolType => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (19i32) as u8;
                                                        }
                                                        V59::PrimStringType => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (20i32) as u8;
                                                        }
                                                        V59::HandleType(e) => {
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (21i32) as u8;
                                                            let (t58_0, t58_1) = e;
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i64>() = _rt::as_i64(t58_0);
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (t58_1.clone() as i32) as u8;
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len60;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result60;
                                        }
                                        V69::UnstructuredText(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                restrictions: restrictions61,
                                            } = e;
                                            match restrictions61 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec64 = e;
                                                    let len64 = vec64.len();
                                                    let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec64.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result64 = if layout64.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout64);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec64.into_iter().enumerate() {
                                                        let base = result64
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                language_code: language_code62,
                                                            } = e;
                                                            let vec63 = (language_code62.into_bytes())
                                                                .into_boxed_slice();
                                                            let ptr63 = vec63.as_ptr().cast::<u8>();
                                                            let len63 = vec63.len();
                                                            ::core::mem::forget(vec63);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len63;
                                                            *base.add(0).cast::<*mut u8>() = ptr63.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len64;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result64;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                        V69::UnstructuredBinary(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (2i32) as u8;
                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                restrictions: restrictions65,
                                            } = e;
                                            match restrictions65 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec68 = e;
                                                    let len68 = vec68.len();
                                                    let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec68.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result68 = if layout68.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout68);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec68.into_iter().enumerate() {
                                                        let base = result68
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type66,
                                                            } = e;
                                                            let vec67 = (mime_type66.into_bytes()).into_boxed_slice();
                                                            let ptr67 = vec67.as_ptr().cast::<u8>();
                                                            let len67 = vec67.len();
                                                            ::core::mem::forget(vec67);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len67;
                                                            *base.add(0).cast::<*mut u8>() = ptr67.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len68;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result68;
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                }
                            }
                            *ptr1
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len70;
                            *ptr1
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result70;
                        }
                    }
                    let vec202 = methods2;
                    let len202 = vec202.len();
                    let layout202 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec202.len() * (13 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result202 = if layout202.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout202).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout202);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec202.into_iter().enumerate() {
                        let base = result202
                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::golem::agent::common::AgentMethod {
                                name: name72,
                                description: description72,
                                prompt_hint: prompt_hint72,
                                input_schema: input_schema72,
                                output_schema: output_schema72,
                            } = e;
                            let vec73 = (name72.into_bytes()).into_boxed_slice();
                            let ptr73 = vec73.as_ptr().cast::<u8>();
                            let len73 = vec73.len();
                            ::core::mem::forget(vec73);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len73;
                            *base.add(0).cast::<*mut u8>() = ptr73.cast_mut();
                            let vec74 = (description72.into_bytes()).into_boxed_slice();
                            let ptr74 = vec74.as_ptr().cast::<u8>();
                            let len74 = vec74.len();
                            ::core::mem::forget(vec74);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len74;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr74.cast_mut();
                            match prompt_hint72 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec75 = (e.into_bytes()).into_boxed_slice();
                                    let ptr75 = vec75.as_ptr().cast::<u8>();
                                    let len75 = vec75.len();
                                    ::core::mem::forget(vec75);
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len75;
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr75.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            use super::super::super::super::golem::agent::common::DataSchema as V138;
                            match input_schema72 {
                                V138::Tuple(e) => {
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec106 = e;
                                    let len106 = vec106.len();
                                    let layout106 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec106.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result106 = if layout106.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout106).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout106);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec106.into_iter().enumerate() {
                                        let base = result106
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t76_0, t76_1) = e;
                                            let vec77 = (t76_0.into_bytes()).into_boxed_slice();
                                            let ptr77 = vec77.as_ptr().cast::<u8>();
                                            let len77 = vec77.len();
                                            ::core::mem::forget(vec77);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len77;
                                            *base.add(0).cast::<*mut u8>() = ptr77.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V105;
                                            match t76_1 {
                                                V105::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes78,
                                                    } = e;
                                                    let vec96 = nodes78;
                                                    let len96 = vec96.len();
                                                    let layout96 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec96.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result96 = if layout96.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout96).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout96);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec96.into_iter().enumerate() {
                                                        let base = result96
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name79,
                                                                owner: owner79,
                                                                type_: type_79,
                                                            } = e;
                                                            match name79 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec80 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                    let len80 = vec80.len();
                                                                    ::core::mem::forget(vec80);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len80;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr80.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner79 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec81 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr81 = vec81.as_ptr().cast::<u8>();
                                                                    let len81 = vec81.len();
                                                                    ::core::mem::forget(vec81);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len81;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr81.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V95;
                                                            match type_79 {
                                                                V95::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec84 = e;
                                                                    let len84 = vec84.len();
                                                                    let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec84.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result84 = if layout84.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout84);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec84.into_iter().enumerate() {
                                                                        let base = result84
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t82_0, t82_1) = e;
                                                                            let vec83 = (t82_0.into_bytes()).into_boxed_slice();
                                                                            let ptr83 = vec83.as_ptr().cast::<u8>();
                                                                            let len83 = vec83.len();
                                                                            ::core::mem::forget(vec83);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len83;
                                                                            *base.add(0).cast::<*mut u8>() = ptr83.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t82_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len84;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result84;
                                                                }
                                                                V95::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec87 = e;
                                                                    let len87 = vec87.len();
                                                                    let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec87.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result87 = if layout87.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout87);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec87.into_iter().enumerate() {
                                                                        let base = result87
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t85_0, t85_1) = e;
                                                                            let vec86 = (t85_0.into_bytes()).into_boxed_slice();
                                                                            let ptr86 = vec86.as_ptr().cast::<u8>();
                                                                            let len86 = vec86.len();
                                                                            ::core::mem::forget(vec86);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len86;
                                                                            *base.add(0).cast::<*mut u8>() = ptr86.cast_mut();
                                                                            match t85_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len87;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result87;
                                                                }
                                                                V95::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec89 = e;
                                                                    let len89 = vec89.len();
                                                                    let layout89 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec89.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result89 = if layout89.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout89).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout89);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec89.into_iter().enumerate() {
                                                                        let base = result89
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec88 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr88 = vec88.as_ptr().cast::<u8>();
                                                                            let len88 = vec88.len();
                                                                            ::core::mem::forget(vec88);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len88;
                                                                            *base.add(0).cast::<*mut u8>() = ptr88.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len89;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result89;
                                                                }
                                                                V95::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec91 = e;
                                                                    let len91 = vec91.len();
                                                                    let layout91 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec91.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result91 = if layout91.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout91).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout91);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec91.into_iter().enumerate() {
                                                                        let base = result91
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec90 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr90 = vec90.as_ptr().cast::<u8>();
                                                                            let len90 = vec90.len();
                                                                            ::core::mem::forget(vec90);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len90;
                                                                            *base.add(0).cast::<*mut u8>() = ptr90.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len91;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result91;
                                                                }
                                                                V95::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec92 = (e).into_boxed_slice();
                                                                    let ptr92 = vec92.as_ptr().cast::<u8>();
                                                                    let len92 = vec92.len();
                                                                    ::core::mem::forget(vec92);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len92;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr92.cast_mut();
                                                                }
                                                                V95::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V95::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V95::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t93_0, t93_1) = e;
                                                                    match t93_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t93_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V95::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V95::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V95::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V95::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V95::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V95::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V95::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V95::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V95::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V95::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V95::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V95::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V95::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V95::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t94_0, t94_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t94_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t94_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len96;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result96;
                                                }
                                                V105::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions97,
                                                    } = e;
                                                    match restrictions97 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec100 = e;
                                                            let len100 = vec100.len();
                                                            let layout100 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec100.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result100 = if layout100.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout100).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout100);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec100.into_iter().enumerate() {
                                                                let base = result100
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code98,
                                                                    } = e;
                                                                    let vec99 = (language_code98.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr99 = vec99.as_ptr().cast::<u8>();
                                                                    let len99 = vec99.len();
                                                                    ::core::mem::forget(vec99);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len99;
                                                                    *base.add(0).cast::<*mut u8>() = ptr99.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len100;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result100;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V105::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions101,
                                                    } = e;
                                                    match restrictions101 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec104 = e;
                                                            let len104 = vec104.len();
                                                            let layout104 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec104.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result104 = if layout104.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout104).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout104);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec104.into_iter().enumerate() {
                                                                let base = result104
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type102,
                                                                    } = e;
                                                                    let vec103 = (mime_type102.into_bytes()).into_boxed_slice();
                                                                    let ptr103 = vec103.as_ptr().cast::<u8>();
                                                                    let len103 = vec103.len();
                                                                    ::core::mem::forget(vec103);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len103;
                                                                    *base.add(0).cast::<*mut u8>() = ptr103.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len104;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result104;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len106;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result106;
                                }
                                V138::Multimodal(e) => {
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec137 = e;
                                    let len137 = vec137.len();
                                    let layout137 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec137.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result137 = if layout137.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout137).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout137);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec137.into_iter().enumerate() {
                                        let base = result137
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t107_0, t107_1) = e;
                                            let vec108 = (t107_0.into_bytes()).into_boxed_slice();
                                            let ptr108 = vec108.as_ptr().cast::<u8>();
                                            let len108 = vec108.len();
                                            ::core::mem::forget(vec108);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len108;
                                            *base.add(0).cast::<*mut u8>() = ptr108.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V136;
                                            match t107_1 {
                                                V136::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes109,
                                                    } = e;
                                                    let vec127 = nodes109;
                                                    let len127 = vec127.len();
                                                    let layout127 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec127.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result127 = if layout127.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout127).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout127);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec127.into_iter().enumerate() {
                                                        let base = result127
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name110,
                                                                owner: owner110,
                                                                type_: type_110,
                                                            } = e;
                                                            match name110 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec111 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr111 = vec111.as_ptr().cast::<u8>();
                                                                    let len111 = vec111.len();
                                                                    ::core::mem::forget(vec111);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len111;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr111.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner110 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec112 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr112 = vec112.as_ptr().cast::<u8>();
                                                                    let len112 = vec112.len();
                                                                    ::core::mem::forget(vec112);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len112;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr112.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V126;
                                                            match type_110 {
                                                                V126::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec115 = e;
                                                                    let len115 = vec115.len();
                                                                    let layout115 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec115.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result115 = if layout115.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout115).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout115);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec115.into_iter().enumerate() {
                                                                        let base = result115
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t113_0, t113_1) = e;
                                                                            let vec114 = (t113_0.into_bytes()).into_boxed_slice();
                                                                            let ptr114 = vec114.as_ptr().cast::<u8>();
                                                                            let len114 = vec114.len();
                                                                            ::core::mem::forget(vec114);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len114;
                                                                            *base.add(0).cast::<*mut u8>() = ptr114.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t113_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len115;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result115;
                                                                }
                                                                V126::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec118 = e;
                                                                    let len118 = vec118.len();
                                                                    let layout118 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec118.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result118 = if layout118.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout118).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout118);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec118.into_iter().enumerate() {
                                                                        let base = result118
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t116_0, t116_1) = e;
                                                                            let vec117 = (t116_0.into_bytes()).into_boxed_slice();
                                                                            let ptr117 = vec117.as_ptr().cast::<u8>();
                                                                            let len117 = vec117.len();
                                                                            ::core::mem::forget(vec117);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len117;
                                                                            *base.add(0).cast::<*mut u8>() = ptr117.cast_mut();
                                                                            match t116_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len118;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result118;
                                                                }
                                                                V126::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec120 = e;
                                                                    let len120 = vec120.len();
                                                                    let layout120 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec120.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result120 = if layout120.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout120).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout120);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec120.into_iter().enumerate() {
                                                                        let base = result120
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec119 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr119 = vec119.as_ptr().cast::<u8>();
                                                                            let len119 = vec119.len();
                                                                            ::core::mem::forget(vec119);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len119;
                                                                            *base.add(0).cast::<*mut u8>() = ptr119.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len120;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result120;
                                                                }
                                                                V126::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec122 = e;
                                                                    let len122 = vec122.len();
                                                                    let layout122 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec122.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result122 = if layout122.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout122).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout122);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec122.into_iter().enumerate() {
                                                                        let base = result122
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec121 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr121 = vec121.as_ptr().cast::<u8>();
                                                                            let len121 = vec121.len();
                                                                            ::core::mem::forget(vec121);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len121;
                                                                            *base.add(0).cast::<*mut u8>() = ptr121.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len122;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result122;
                                                                }
                                                                V126::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec123 = (e).into_boxed_slice();
                                                                    let ptr123 = vec123.as_ptr().cast::<u8>();
                                                                    let len123 = vec123.len();
                                                                    ::core::mem::forget(vec123);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len123;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr123.cast_mut();
                                                                }
                                                                V126::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V126::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V126::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t124_0, t124_1) = e;
                                                                    match t124_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t124_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V126::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V126::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V126::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V126::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V126::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V126::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V126::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V126::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V126::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V126::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V126::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V126::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V126::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V126::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t125_0, t125_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t125_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t125_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len127;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result127;
                                                }
                                                V136::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions128,
                                                    } = e;
                                                    match restrictions128 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec131 = e;
                                                            let len131 = vec131.len();
                                                            let layout131 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec131.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result131 = if layout131.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout131).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout131);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec131.into_iter().enumerate() {
                                                                let base = result131
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code129,
                                                                    } = e;
                                                                    let vec130 = (language_code129.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr130 = vec130.as_ptr().cast::<u8>();
                                                                    let len130 = vec130.len();
                                                                    ::core::mem::forget(vec130);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len130;
                                                                    *base.add(0).cast::<*mut u8>() = ptr130.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len131;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result131;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V136::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions132,
                                                    } = e;
                                                    match restrictions132 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec135 = e;
                                                            let len135 = vec135.len();
                                                            let layout135 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec135.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result135 = if layout135.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout135).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout135);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec135.into_iter().enumerate() {
                                                                let base = result135
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type133,
                                                                    } = e;
                                                                    let vec134 = (mime_type133.into_bytes()).into_boxed_slice();
                                                                    let ptr134 = vec134.as_ptr().cast::<u8>();
                                                                    let len134 = vec134.len();
                                                                    ::core::mem::forget(vec134);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len134;
                                                                    *base.add(0).cast::<*mut u8>() = ptr134.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len135;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result135;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len137;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result137;
                                }
                            }
                            use super::super::super::super::golem::agent::common::DataSchema as V201;
                            match output_schema72 {
                                V201::Tuple(e) => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec169 = e;
                                    let len169 = vec169.len();
                                    let layout169 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec169.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result169 = if layout169.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout169).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout169);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec169.into_iter().enumerate() {
                                        let base = result169
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t139_0, t139_1) = e;
                                            let vec140 = (t139_0.into_bytes()).into_boxed_slice();
                                            let ptr140 = vec140.as_ptr().cast::<u8>();
                                            let len140 = vec140.len();
                                            ::core::mem::forget(vec140);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len140;
                                            *base.add(0).cast::<*mut u8>() = ptr140.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V168;
                                            match t139_1 {
                                                V168::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes141,
                                                    } = e;
                                                    let vec159 = nodes141;
                                                    let len159 = vec159.len();
                                                    let layout159 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec159.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result159 = if layout159.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout159).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout159);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec159.into_iter().enumerate() {
                                                        let base = result159
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name142,
                                                                owner: owner142,
                                                                type_: type_142,
                                                            } = e;
                                                            match name142 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec143 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr143 = vec143.as_ptr().cast::<u8>();
                                                                    let len143 = vec143.len();
                                                                    ::core::mem::forget(vec143);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len143;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr143.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner142 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec144 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr144 = vec144.as_ptr().cast::<u8>();
                                                                    let len144 = vec144.len();
                                                                    ::core::mem::forget(vec144);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len144;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr144.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V158;
                                                            match type_142 {
                                                                V158::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec147 = e;
                                                                    let len147 = vec147.len();
                                                                    let layout147 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec147.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result147 = if layout147.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout147).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout147);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec147.into_iter().enumerate() {
                                                                        let base = result147
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t145_0, t145_1) = e;
                                                                            let vec146 = (t145_0.into_bytes()).into_boxed_slice();
                                                                            let ptr146 = vec146.as_ptr().cast::<u8>();
                                                                            let len146 = vec146.len();
                                                                            ::core::mem::forget(vec146);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len146;
                                                                            *base.add(0).cast::<*mut u8>() = ptr146.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t145_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len147;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result147;
                                                                }
                                                                V158::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec150 = e;
                                                                    let len150 = vec150.len();
                                                                    let layout150 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec150.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result150 = if layout150.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout150).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout150);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec150.into_iter().enumerate() {
                                                                        let base = result150
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t148_0, t148_1) = e;
                                                                            let vec149 = (t148_0.into_bytes()).into_boxed_slice();
                                                                            let ptr149 = vec149.as_ptr().cast::<u8>();
                                                                            let len149 = vec149.len();
                                                                            ::core::mem::forget(vec149);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len149;
                                                                            *base.add(0).cast::<*mut u8>() = ptr149.cast_mut();
                                                                            match t148_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len150;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result150;
                                                                }
                                                                V158::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec152 = e;
                                                                    let len152 = vec152.len();
                                                                    let layout152 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec152.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result152 = if layout152.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout152).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout152);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec152.into_iter().enumerate() {
                                                                        let base = result152
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec151 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr151 = vec151.as_ptr().cast::<u8>();
                                                                            let len151 = vec151.len();
                                                                            ::core::mem::forget(vec151);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len151;
                                                                            *base.add(0).cast::<*mut u8>() = ptr151.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len152;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result152;
                                                                }
                                                                V158::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec154 = e;
                                                                    let len154 = vec154.len();
                                                                    let layout154 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec154.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result154 = if layout154.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout154).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout154);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec154.into_iter().enumerate() {
                                                                        let base = result154
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec153 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr153 = vec153.as_ptr().cast::<u8>();
                                                                            let len153 = vec153.len();
                                                                            ::core::mem::forget(vec153);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len153;
                                                                            *base.add(0).cast::<*mut u8>() = ptr153.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len154;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result154;
                                                                }
                                                                V158::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec155 = (e).into_boxed_slice();
                                                                    let ptr155 = vec155.as_ptr().cast::<u8>();
                                                                    let len155 = vec155.len();
                                                                    ::core::mem::forget(vec155);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len155;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr155.cast_mut();
                                                                }
                                                                V158::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V158::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V158::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t156_0, t156_1) = e;
                                                                    match t156_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t156_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V158::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V158::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V158::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V158::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V158::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V158::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V158::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V158::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V158::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V158::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V158::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V158::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V158::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V158::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t157_0, t157_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t157_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t157_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len159;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result159;
                                                }
                                                V168::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions160,
                                                    } = e;
                                                    match restrictions160 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec163 = e;
                                                            let len163 = vec163.len();
                                                            let layout163 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec163.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result163 = if layout163.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout163).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout163);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec163.into_iter().enumerate() {
                                                                let base = result163
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code161,
                                                                    } = e;
                                                                    let vec162 = (language_code161.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr162 = vec162.as_ptr().cast::<u8>();
                                                                    let len162 = vec162.len();
                                                                    ::core::mem::forget(vec162);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len162;
                                                                    *base.add(0).cast::<*mut u8>() = ptr162.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len163;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result163;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V168::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions164,
                                                    } = e;
                                                    match restrictions164 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec167 = e;
                                                            let len167 = vec167.len();
                                                            let layout167 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec167.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result167 = if layout167.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout167).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout167);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec167.into_iter().enumerate() {
                                                                let base = result167
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type165,
                                                                    } = e;
                                                                    let vec166 = (mime_type165.into_bytes()).into_boxed_slice();
                                                                    let ptr166 = vec166.as_ptr().cast::<u8>();
                                                                    let len166 = vec166.len();
                                                                    ::core::mem::forget(vec166);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len166;
                                                                    *base.add(0).cast::<*mut u8>() = ptr166.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len167;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result167;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len169;
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result169;
                                }
                                V201::Multimodal(e) => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec200 = e;
                                    let len200 = vec200.len();
                                    let layout200 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec200.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result200 = if layout200.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout200).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout200);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec200.into_iter().enumerate() {
                                        let base = result200
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t170_0, t170_1) = e;
                                            let vec171 = (t170_0.into_bytes()).into_boxed_slice();
                                            let ptr171 = vec171.as_ptr().cast::<u8>();
                                            let len171 = vec171.len();
                                            ::core::mem::forget(vec171);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len171;
                                            *base.add(0).cast::<*mut u8>() = ptr171.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V199;
                                            match t170_1 {
                                                V199::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes172,
                                                    } = e;
                                                    let vec190 = nodes172;
                                                    let len190 = vec190.len();
                                                    let layout190 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec190.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result190 = if layout190.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout190).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout190);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec190.into_iter().enumerate() {
                                                        let base = result190
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name173,
                                                                owner: owner173,
                                                                type_: type_173,
                                                            } = e;
                                                            match name173 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec174 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr174 = vec174.as_ptr().cast::<u8>();
                                                                    let len174 = vec174.len();
                                                                    ::core::mem::forget(vec174);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len174;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr174.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner173 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec175 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr175 = vec175.as_ptr().cast::<u8>();
                                                                    let len175 = vec175.len();
                                                                    ::core::mem::forget(vec175);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len175;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr175.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V189;
                                                            match type_173 {
                                                                V189::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec178 = e;
                                                                    let len178 = vec178.len();
                                                                    let layout178 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec178.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result178 = if layout178.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout178).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout178);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec178.into_iter().enumerate() {
                                                                        let base = result178
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t176_0, t176_1) = e;
                                                                            let vec177 = (t176_0.into_bytes()).into_boxed_slice();
                                                                            let ptr177 = vec177.as_ptr().cast::<u8>();
                                                                            let len177 = vec177.len();
                                                                            ::core::mem::forget(vec177);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len177;
                                                                            *base.add(0).cast::<*mut u8>() = ptr177.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t176_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len178;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result178;
                                                                }
                                                                V189::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec181 = e;
                                                                    let len181 = vec181.len();
                                                                    let layout181 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec181.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result181 = if layout181.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout181).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout181);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec181.into_iter().enumerate() {
                                                                        let base = result181
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t179_0, t179_1) = e;
                                                                            let vec180 = (t179_0.into_bytes()).into_boxed_slice();
                                                                            let ptr180 = vec180.as_ptr().cast::<u8>();
                                                                            let len180 = vec180.len();
                                                                            ::core::mem::forget(vec180);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len180;
                                                                            *base.add(0).cast::<*mut u8>() = ptr180.cast_mut();
                                                                            match t179_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len181;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result181;
                                                                }
                                                                V189::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec183 = e;
                                                                    let len183 = vec183.len();
                                                                    let layout183 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec183.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result183 = if layout183.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout183).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout183);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec183.into_iter().enumerate() {
                                                                        let base = result183
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec182 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr182 = vec182.as_ptr().cast::<u8>();
                                                                            let len182 = vec182.len();
                                                                            ::core::mem::forget(vec182);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len182;
                                                                            *base.add(0).cast::<*mut u8>() = ptr182.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len183;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result183;
                                                                }
                                                                V189::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec185 = e;
                                                                    let len185 = vec185.len();
                                                                    let layout185 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec185.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result185 = if layout185.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout185).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout185);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec185.into_iter().enumerate() {
                                                                        let base = result185
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec184 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr184 = vec184.as_ptr().cast::<u8>();
                                                                            let len184 = vec184.len();
                                                                            ::core::mem::forget(vec184);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len184;
                                                                            *base.add(0).cast::<*mut u8>() = ptr184.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len185;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result185;
                                                                }
                                                                V189::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec186 = (e).into_boxed_slice();
                                                                    let ptr186 = vec186.as_ptr().cast::<u8>();
                                                                    let len186 = vec186.len();
                                                                    ::core::mem::forget(vec186);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len186;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr186.cast_mut();
                                                                }
                                                                V189::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V189::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V189::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t187_0, t187_1) = e;
                                                                    match t187_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t187_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V189::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V189::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V189::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V189::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V189::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V189::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V189::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V189::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V189::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V189::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V189::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V189::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V189::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V189::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t188_0, t188_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t188_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t188_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len190;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result190;
                                                }
                                                V199::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions191,
                                                    } = e;
                                                    match restrictions191 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec194 = e;
                                                            let len194 = vec194.len();
                                                            let layout194 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec194.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result194 = if layout194.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout194).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout194);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec194.into_iter().enumerate() {
                                                                let base = result194
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code192,
                                                                    } = e;
                                                                    let vec193 = (language_code192.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr193 = vec193.as_ptr().cast::<u8>();
                                                                    let len193 = vec193.len();
                                                                    ::core::mem::forget(vec193);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len193;
                                                                    *base.add(0).cast::<*mut u8>() = ptr193.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len194;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result194;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V199::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions195,
                                                    } = e;
                                                    match restrictions195 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec198 = e;
                                                            let len198 = vec198.len();
                                                            let layout198 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec198.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result198 = if layout198.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout198).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout198);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec198.into_iter().enumerate() {
                                                                let base = result198
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type196,
                                                                    } = e;
                                                                    let vec197 = (mime_type196.into_bytes()).into_boxed_slice();
                                                                    let ptr197 = vec197.as_ptr().cast::<u8>();
                                                                    let len197 = vec197.len();
                                                                    ::core::mem::forget(vec197);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len197;
                                                                    *base.add(0).cast::<*mut u8>() = ptr197.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len198;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result198;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len200;
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result200;
                                }
                            }
                        }
                    }
                    *ptr1
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len202;
                    *ptr1
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result202;
                    let vec404 = dependencies2;
                    let len404 = vec404.len();
                    let layout404 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec404.len() * (18 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result404 = if layout404.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout404).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout404);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec404.into_iter().enumerate() {
                        let base = result404
                            .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::golem::agent::common::AgentDependency {
                                type_name: type_name203,
                                description: description203,
                                constructor: constructor203,
                                methods: methods203,
                            } = e;
                            let vec204 = (type_name203.into_bytes()).into_boxed_slice();
                            let ptr204 = vec204.as_ptr().cast::<u8>();
                            let len204 = vec204.len();
                            ::core::mem::forget(vec204);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len204;
                            *base.add(0).cast::<*mut u8>() = ptr204.cast_mut();
                            match description203 {
                                Some(e) => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec205 = (e.into_bytes()).into_boxed_slice();
                                    let ptr205 = vec205.as_ptr().cast::<u8>();
                                    let len205 = vec205.len();
                                    ::core::mem::forget(vec205);
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len205;
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr205.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let super::super::super::super::golem::agent::common::AgentConstructor {
                                name: name206,
                                description: description206,
                                prompt_hint: prompt_hint206,
                                input_schema: input_schema206,
                            } = constructor203;
                            match name206 {
                                Some(e) => {
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec207 = (e.into_bytes()).into_boxed_slice();
                                    let ptr207 = vec207.as_ptr().cast::<u8>();
                                    let len207 = vec207.len();
                                    ::core::mem::forget(vec207);
                                    *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len207;
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr207.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec208 = (description206.into_bytes())
                                .into_boxed_slice();
                            let ptr208 = vec208.as_ptr().cast::<u8>();
                            let len208 = vec208.len();
                            ::core::mem::forget(vec208);
                            *base
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len208;
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr208.cast_mut();
                            match prompt_hint206 {
                                Some(e) => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec209 = (e.into_bytes()).into_boxed_slice();
                                    let ptr209 = vec209.as_ptr().cast::<u8>();
                                    let len209 = vec209.len();
                                    ::core::mem::forget(vec209);
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len209;
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr209.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            use super::super::super::super::golem::agent::common::DataSchema as V272;
                            match input_schema206 {
                                V272::Tuple(e) => {
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec240 = e;
                                    let len240 = vec240.len();
                                    let layout240 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec240.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result240 = if layout240.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout240).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout240);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec240.into_iter().enumerate() {
                                        let base = result240
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t210_0, t210_1) = e;
                                            let vec211 = (t210_0.into_bytes()).into_boxed_slice();
                                            let ptr211 = vec211.as_ptr().cast::<u8>();
                                            let len211 = vec211.len();
                                            ::core::mem::forget(vec211);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len211;
                                            *base.add(0).cast::<*mut u8>() = ptr211.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V239;
                                            match t210_1 {
                                                V239::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes212,
                                                    } = e;
                                                    let vec230 = nodes212;
                                                    let len230 = vec230.len();
                                                    let layout230 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec230.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result230 = if layout230.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout230).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout230);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec230.into_iter().enumerate() {
                                                        let base = result230
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name213,
                                                                owner: owner213,
                                                                type_: type_213,
                                                            } = e;
                                                            match name213 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec214 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr214 = vec214.as_ptr().cast::<u8>();
                                                                    let len214 = vec214.len();
                                                                    ::core::mem::forget(vec214);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len214;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr214.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner213 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec215 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                    let len215 = vec215.len();
                                                                    ::core::mem::forget(vec215);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len215;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr215.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V229;
                                                            match type_213 {
                                                                V229::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec218 = e;
                                                                    let len218 = vec218.len();
                                                                    let layout218 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec218.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result218 = if layout218.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout218).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout218);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec218.into_iter().enumerate() {
                                                                        let base = result218
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t216_0, t216_1) = e;
                                                                            let vec217 = (t216_0.into_bytes()).into_boxed_slice();
                                                                            let ptr217 = vec217.as_ptr().cast::<u8>();
                                                                            let len217 = vec217.len();
                                                                            ::core::mem::forget(vec217);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len217;
                                                                            *base.add(0).cast::<*mut u8>() = ptr217.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t216_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len218;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result218;
                                                                }
                                                                V229::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec221 = e;
                                                                    let len221 = vec221.len();
                                                                    let layout221 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec221.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result221 = if layout221.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout221).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout221);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec221.into_iter().enumerate() {
                                                                        let base = result221
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t219_0, t219_1) = e;
                                                                            let vec220 = (t219_0.into_bytes()).into_boxed_slice();
                                                                            let ptr220 = vec220.as_ptr().cast::<u8>();
                                                                            let len220 = vec220.len();
                                                                            ::core::mem::forget(vec220);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len220;
                                                                            *base.add(0).cast::<*mut u8>() = ptr220.cast_mut();
                                                                            match t219_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len221;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result221;
                                                                }
                                                                V229::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec223 = e;
                                                                    let len223 = vec223.len();
                                                                    let layout223 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec223.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result223 = if layout223.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout223).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout223);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec223.into_iter().enumerate() {
                                                                        let base = result223
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec222 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr222 = vec222.as_ptr().cast::<u8>();
                                                                            let len222 = vec222.len();
                                                                            ::core::mem::forget(vec222);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len222;
                                                                            *base.add(0).cast::<*mut u8>() = ptr222.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len223;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result223;
                                                                }
                                                                V229::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec225 = e;
                                                                    let len225 = vec225.len();
                                                                    let layout225 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec225.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result225 = if layout225.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout225).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout225);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec225.into_iter().enumerate() {
                                                                        let base = result225
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec224 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr224 = vec224.as_ptr().cast::<u8>();
                                                                            let len224 = vec224.len();
                                                                            ::core::mem::forget(vec224);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len224;
                                                                            *base.add(0).cast::<*mut u8>() = ptr224.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len225;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result225;
                                                                }
                                                                V229::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec226 = (e).into_boxed_slice();
                                                                    let ptr226 = vec226.as_ptr().cast::<u8>();
                                                                    let len226 = vec226.len();
                                                                    ::core::mem::forget(vec226);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len226;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr226.cast_mut();
                                                                }
                                                                V229::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V229::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V229::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t227_0, t227_1) = e;
                                                                    match t227_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t227_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V229::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V229::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V229::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V229::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V229::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V229::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V229::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V229::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V229::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V229::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V229::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V229::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V229::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V229::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t228_0, t228_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t228_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t228_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len230;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result230;
                                                }
                                                V239::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions231,
                                                    } = e;
                                                    match restrictions231 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec234 = e;
                                                            let len234 = vec234.len();
                                                            let layout234 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec234.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result234 = if layout234.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout234).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout234);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec234.into_iter().enumerate() {
                                                                let base = result234
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code232,
                                                                    } = e;
                                                                    let vec233 = (language_code232.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr233 = vec233.as_ptr().cast::<u8>();
                                                                    let len233 = vec233.len();
                                                                    ::core::mem::forget(vec233);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len233;
                                                                    *base.add(0).cast::<*mut u8>() = ptr233.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len234;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result234;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V239::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions235,
                                                    } = e;
                                                    match restrictions235 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec238 = e;
                                                            let len238 = vec238.len();
                                                            let layout238 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec238.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result238 = if layout238.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout238).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout238);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec238.into_iter().enumerate() {
                                                                let base = result238
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type236,
                                                                    } = e;
                                                                    let vec237 = (mime_type236.into_bytes()).into_boxed_slice();
                                                                    let ptr237 = vec237.as_ptr().cast::<u8>();
                                                                    let len237 = vec237.len();
                                                                    ::core::mem::forget(vec237);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len237;
                                                                    *base.add(0).cast::<*mut u8>() = ptr237.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len238;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result238;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len240;
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result240;
                                }
                                V272::Multimodal(e) => {
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec271 = e;
                                    let len271 = vec271.len();
                                    let layout271 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec271.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result271 = if layout271.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout271).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout271);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec271.into_iter().enumerate() {
                                        let base = result271
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t241_0, t241_1) = e;
                                            let vec242 = (t241_0.into_bytes()).into_boxed_slice();
                                            let ptr242 = vec242.as_ptr().cast::<u8>();
                                            let len242 = vec242.len();
                                            ::core::mem::forget(vec242);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len242;
                                            *base.add(0).cast::<*mut u8>() = ptr242.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V270;
                                            match t241_1 {
                                                V270::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes243,
                                                    } = e;
                                                    let vec261 = nodes243;
                                                    let len261 = vec261.len();
                                                    let layout261 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec261.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result261 = if layout261.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout261).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout261);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec261.into_iter().enumerate() {
                                                        let base = result261
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name244,
                                                                owner: owner244,
                                                                type_: type_244,
                                                            } = e;
                                                            match name244 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec245 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr245 = vec245.as_ptr().cast::<u8>();
                                                                    let len245 = vec245.len();
                                                                    ::core::mem::forget(vec245);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len245;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr245.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner244 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec246 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr246 = vec246.as_ptr().cast::<u8>();
                                                                    let len246 = vec246.len();
                                                                    ::core::mem::forget(vec246);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len246;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr246.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V260;
                                                            match type_244 {
                                                                V260::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec249 = e;
                                                                    let len249 = vec249.len();
                                                                    let layout249 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec249.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result249 = if layout249.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout249).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout249);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec249.into_iter().enumerate() {
                                                                        let base = result249
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t247_0, t247_1) = e;
                                                                            let vec248 = (t247_0.into_bytes()).into_boxed_slice();
                                                                            let ptr248 = vec248.as_ptr().cast::<u8>();
                                                                            let len248 = vec248.len();
                                                                            ::core::mem::forget(vec248);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len248;
                                                                            *base.add(0).cast::<*mut u8>() = ptr248.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t247_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len249;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result249;
                                                                }
                                                                V260::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec252 = e;
                                                                    let len252 = vec252.len();
                                                                    let layout252 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec252.len()
                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result252 = if layout252.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout252).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout252);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec252.into_iter().enumerate() {
                                                                        let base = result252
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t250_0, t250_1) = e;
                                                                            let vec251 = (t250_0.into_bytes()).into_boxed_slice();
                                                                            let ptr251 = vec251.as_ptr().cast::<u8>();
                                                                            let len251 = vec251.len();
                                                                            ::core::mem::forget(vec251);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len251;
                                                                            *base.add(0).cast::<*mut u8>() = ptr251.cast_mut();
                                                                            match t250_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len252;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result252;
                                                                }
                                                                V260::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec254 = e;
                                                                    let len254 = vec254.len();
                                                                    let layout254 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec254.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result254 = if layout254.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout254).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout254);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec254.into_iter().enumerate() {
                                                                        let base = result254
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec253 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr253 = vec253.as_ptr().cast::<u8>();
                                                                            let len253 = vec253.len();
                                                                            ::core::mem::forget(vec253);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len253;
                                                                            *base.add(0).cast::<*mut u8>() = ptr253.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len254;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result254;
                                                                }
                                                                V260::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec256 = e;
                                                                    let len256 = vec256.len();
                                                                    let layout256 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec256.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result256 = if layout256.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout256).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout256);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec256.into_iter().enumerate() {
                                                                        let base = result256
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec255 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr255 = vec255.as_ptr().cast::<u8>();
                                                                            let len255 = vec255.len();
                                                                            ::core::mem::forget(vec255);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len255;
                                                                            *base.add(0).cast::<*mut u8>() = ptr255.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len256;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result256;
                                                                }
                                                                V260::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec257 = (e).into_boxed_slice();
                                                                    let ptr257 = vec257.as_ptr().cast::<u8>();
                                                                    let len257 = vec257.len();
                                                                    ::core::mem::forget(vec257);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len257;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr257.cast_mut();
                                                                }
                                                                V260::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V260::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V260::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t258_0, t258_1) = e;
                                                                    match t258_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t258_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V260::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V260::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V260::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V260::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V260::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V260::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V260::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V260::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V260::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V260::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V260::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V260::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V260::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V260::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t259_0, t259_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t259_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t259_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len261;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result261;
                                                }
                                                V270::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions262,
                                                    } = e;
                                                    match restrictions262 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec265 = e;
                                                            let len265 = vec265.len();
                                                            let layout265 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec265.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result265 = if layout265.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout265).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout265);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec265.into_iter().enumerate() {
                                                                let base = result265
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code263,
                                                                    } = e;
                                                                    let vec264 = (language_code263.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr264 = vec264.as_ptr().cast::<u8>();
                                                                    let len264 = vec264.len();
                                                                    ::core::mem::forget(vec264);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len264;
                                                                    *base.add(0).cast::<*mut u8>() = ptr264.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len265;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result265;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V270::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions266,
                                                    } = e;
                                                    match restrictions266 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec269 = e;
                                                            let len269 = vec269.len();
                                                            let layout269 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec269.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result269 = if layout269.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout269).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout269);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec269.into_iter().enumerate() {
                                                                let base = result269
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type267,
                                                                    } = e;
                                                                    let vec268 = (mime_type267.into_bytes()).into_boxed_slice();
                                                                    let ptr268 = vec268.as_ptr().cast::<u8>();
                                                                    let len268 = vec268.len();
                                                                    ::core::mem::forget(vec268);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len268;
                                                                    *base.add(0).cast::<*mut u8>() = ptr268.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len269;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result269;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len271;
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result271;
                                }
                            }
                            let vec403 = methods203;
                            let len403 = vec403.len();
                            let layout403 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec403.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result403 = if layout403.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout403).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout403);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec403.into_iter().enumerate() {
                                let base = result403
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::agent::common::AgentMethod {
                                        name: name273,
                                        description: description273,
                                        prompt_hint: prompt_hint273,
                                        input_schema: input_schema273,
                                        output_schema: output_schema273,
                                    } = e;
                                    let vec274 = (name273.into_bytes()).into_boxed_slice();
                                    let ptr274 = vec274.as_ptr().cast::<u8>();
                                    let len274 = vec274.len();
                                    ::core::mem::forget(vec274);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len274;
                                    *base.add(0).cast::<*mut u8>() = ptr274.cast_mut();
                                    let vec275 = (description273.into_bytes())
                                        .into_boxed_slice();
                                    let ptr275 = vec275.as_ptr().cast::<u8>();
                                    let len275 = vec275.len();
                                    ::core::mem::forget(vec275);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len275;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr275.cast_mut();
                                    match prompt_hint273 {
                                        Some(e) => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec276 = (e.into_bytes()).into_boxed_slice();
                                            let ptr276 = vec276.as_ptr().cast::<u8>();
                                            let len276 = vec276.len();
                                            ::core::mem::forget(vec276);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len276;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr276.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::golem::agent::common::DataSchema as V339;
                                    match input_schema273 {
                                        V339::Tuple(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec307 = e;
                                            let len307 = vec307.len();
                                            let layout307 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec307.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result307 = if layout307.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout307).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout307);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec307.into_iter().enumerate() {
                                                let base = result307
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t277_0, t277_1) = e;
                                                    let vec278 = (t277_0.into_bytes()).into_boxed_slice();
                                                    let ptr278 = vec278.as_ptr().cast::<u8>();
                                                    let len278 = vec278.len();
                                                    ::core::mem::forget(vec278);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len278;
                                                    *base.add(0).cast::<*mut u8>() = ptr278.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V306;
                                                    match t277_1 {
                                                        V306::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes279,
                                                            } = e;
                                                            let vec297 = nodes279;
                                                            let len297 = vec297.len();
                                                            let layout297 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec297.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result297 = if layout297.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout297).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout297);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec297.into_iter().enumerate() {
                                                                let base = result297
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name280,
                                                                        owner: owner280,
                                                                        type_: type_280,
                                                                    } = e;
                                                                    match name280 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec281 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr281 = vec281.as_ptr().cast::<u8>();
                                                                            let len281 = vec281.len();
                                                                            ::core::mem::forget(vec281);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len281;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr281.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner280 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec282 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr282 = vec282.as_ptr().cast::<u8>();
                                                                            let len282 = vec282.len();
                                                                            ::core::mem::forget(vec282);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len282;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr282.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V296;
                                                                    match type_280 {
                                                                        V296::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec285 = e;
                                                                            let len285 = vec285.len();
                                                                            let layout285 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec285.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result285 = if layout285.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout285).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout285);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec285.into_iter().enumerate() {
                                                                                let base = result285
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t283_0, t283_1) = e;
                                                                                    let vec284 = (t283_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr284 = vec284.as_ptr().cast::<u8>();
                                                                                    let len284 = vec284.len();
                                                                                    ::core::mem::forget(vec284);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len284;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr284.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t283_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len285;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result285;
                                                                        }
                                                                        V296::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec288 = e;
                                                                            let len288 = vec288.len();
                                                                            let layout288 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec288.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result288 = if layout288.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout288).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout288);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec288.into_iter().enumerate() {
                                                                                let base = result288
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t286_0, t286_1) = e;
                                                                                    let vec287 = (t286_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr287 = vec287.as_ptr().cast::<u8>();
                                                                                    let len287 = vec287.len();
                                                                                    ::core::mem::forget(vec287);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len287;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr287.cast_mut();
                                                                                    match t286_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len288;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result288;
                                                                        }
                                                                        V296::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec290 = e;
                                                                            let len290 = vec290.len();
                                                                            let layout290 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec290.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result290 = if layout290.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout290).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout290);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec290.into_iter().enumerate() {
                                                                                let base = result290
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec289 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr289 = vec289.as_ptr().cast::<u8>();
                                                                                    let len289 = vec289.len();
                                                                                    ::core::mem::forget(vec289);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len289;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr289.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len290;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result290;
                                                                        }
                                                                        V296::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec292 = e;
                                                                            let len292 = vec292.len();
                                                                            let layout292 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec292.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result292 = if layout292.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout292).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout292);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec292.into_iter().enumerate() {
                                                                                let base = result292
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec291 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr291 = vec291.as_ptr().cast::<u8>();
                                                                                    let len291 = vec291.len();
                                                                                    ::core::mem::forget(vec291);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len291;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr291.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len292;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result292;
                                                                        }
                                                                        V296::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec293 = (e).into_boxed_slice();
                                                                            let ptr293 = vec293.as_ptr().cast::<u8>();
                                                                            let len293 = vec293.len();
                                                                            ::core::mem::forget(vec293);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len293;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr293.cast_mut();
                                                                        }
                                                                        V296::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V296::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V296::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t294_0, t294_1) = e;
                                                                            match t294_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t294_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V296::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V296::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V296::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V296::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V296::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V296::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V296::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V296::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V296::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V296::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V296::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V296::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V296::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V296::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t295_0, t295_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t295_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t295_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len297;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result297;
                                                        }
                                                        V306::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions298,
                                                            } = e;
                                                            match restrictions298 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec301 = e;
                                                                    let len301 = vec301.len();
                                                                    let layout301 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec301.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result301 = if layout301.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout301).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout301);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec301.into_iter().enumerate() {
                                                                        let base = result301
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code299,
                                                                            } = e;
                                                                            let vec300 = (language_code299.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr300 = vec300.as_ptr().cast::<u8>();
                                                                            let len300 = vec300.len();
                                                                            ::core::mem::forget(vec300);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len300;
                                                                            *base.add(0).cast::<*mut u8>() = ptr300.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len301;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result301;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V306::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions302,
                                                            } = e;
                                                            match restrictions302 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec305 = e;
                                                                    let len305 = vec305.len();
                                                                    let layout305 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec305.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result305 = if layout305.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout305).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout305);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec305.into_iter().enumerate() {
                                                                        let base = result305
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type303,
                                                                            } = e;
                                                                            let vec304 = (mime_type303.into_bytes()).into_boxed_slice();
                                                                            let ptr304 = vec304.as_ptr().cast::<u8>();
                                                                            let len304 = vec304.len();
                                                                            ::core::mem::forget(vec304);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len304;
                                                                            *base.add(0).cast::<*mut u8>() = ptr304.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len305;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result305;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len307;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result307;
                                        }
                                        V339::Multimodal(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec338 = e;
                                            let len338 = vec338.len();
                                            let layout338 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec338.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result338 = if layout338.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout338).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout338);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec338.into_iter().enumerate() {
                                                let base = result338
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t308_0, t308_1) = e;
                                                    let vec309 = (t308_0.into_bytes()).into_boxed_slice();
                                                    let ptr309 = vec309.as_ptr().cast::<u8>();
                                                    let len309 = vec309.len();
                                                    ::core::mem::forget(vec309);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len309;
                                                    *base.add(0).cast::<*mut u8>() = ptr309.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V337;
                                                    match t308_1 {
                                                        V337::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes310,
                                                            } = e;
                                                            let vec328 = nodes310;
                                                            let len328 = vec328.len();
                                                            let layout328 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec328.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result328 = if layout328.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout328).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout328);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec328.into_iter().enumerate() {
                                                                let base = result328
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name311,
                                                                        owner: owner311,
                                                                        type_: type_311,
                                                                    } = e;
                                                                    match name311 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec312 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr312 = vec312.as_ptr().cast::<u8>();
                                                                            let len312 = vec312.len();
                                                                            ::core::mem::forget(vec312);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len312;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr312.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner311 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec313 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr313 = vec313.as_ptr().cast::<u8>();
                                                                            let len313 = vec313.len();
                                                                            ::core::mem::forget(vec313);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len313;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr313.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V327;
                                                                    match type_311 {
                                                                        V327::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec316 = e;
                                                                            let len316 = vec316.len();
                                                                            let layout316 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec316.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result316 = if layout316.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout316).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout316);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec316.into_iter().enumerate() {
                                                                                let base = result316
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t314_0, t314_1) = e;
                                                                                    let vec315 = (t314_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr315 = vec315.as_ptr().cast::<u8>();
                                                                                    let len315 = vec315.len();
                                                                                    ::core::mem::forget(vec315);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len315;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr315.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t314_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len316;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result316;
                                                                        }
                                                                        V327::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec319 = e;
                                                                            let len319 = vec319.len();
                                                                            let layout319 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec319.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result319 = if layout319.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout319).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout319);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec319.into_iter().enumerate() {
                                                                                let base = result319
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t317_0, t317_1) = e;
                                                                                    let vec318 = (t317_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr318 = vec318.as_ptr().cast::<u8>();
                                                                                    let len318 = vec318.len();
                                                                                    ::core::mem::forget(vec318);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len318;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr318.cast_mut();
                                                                                    match t317_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len319;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result319;
                                                                        }
                                                                        V327::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec321 = e;
                                                                            let len321 = vec321.len();
                                                                            let layout321 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec321.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result321 = if layout321.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout321).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout321);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec321.into_iter().enumerate() {
                                                                                let base = result321
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec320 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr320 = vec320.as_ptr().cast::<u8>();
                                                                                    let len320 = vec320.len();
                                                                                    ::core::mem::forget(vec320);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len320;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr320.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len321;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result321;
                                                                        }
                                                                        V327::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec323 = e;
                                                                            let len323 = vec323.len();
                                                                            let layout323 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec323.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result323 = if layout323.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout323).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout323);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec323.into_iter().enumerate() {
                                                                                let base = result323
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec322 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr322 = vec322.as_ptr().cast::<u8>();
                                                                                    let len322 = vec322.len();
                                                                                    ::core::mem::forget(vec322);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len322;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr322.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len323;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result323;
                                                                        }
                                                                        V327::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec324 = (e).into_boxed_slice();
                                                                            let ptr324 = vec324.as_ptr().cast::<u8>();
                                                                            let len324 = vec324.len();
                                                                            ::core::mem::forget(vec324);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len324;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr324.cast_mut();
                                                                        }
                                                                        V327::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V327::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V327::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t325_0, t325_1) = e;
                                                                            match t325_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t325_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V327::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V327::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V327::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V327::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V327::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V327::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V327::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V327::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V327::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V327::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V327::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V327::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V327::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V327::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t326_0, t326_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t326_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t326_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len328;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result328;
                                                        }
                                                        V337::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions329,
                                                            } = e;
                                                            match restrictions329 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec332 = e;
                                                                    let len332 = vec332.len();
                                                                    let layout332 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec332.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result332 = if layout332.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout332).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout332);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec332.into_iter().enumerate() {
                                                                        let base = result332
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code330,
                                                                            } = e;
                                                                            let vec331 = (language_code330.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr331 = vec331.as_ptr().cast::<u8>();
                                                                            let len331 = vec331.len();
                                                                            ::core::mem::forget(vec331);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len331;
                                                                            *base.add(0).cast::<*mut u8>() = ptr331.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len332;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result332;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V337::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions333,
                                                            } = e;
                                                            match restrictions333 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec336 = e;
                                                                    let len336 = vec336.len();
                                                                    let layout336 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec336.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result336 = if layout336.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout336).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout336);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec336.into_iter().enumerate() {
                                                                        let base = result336
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type334,
                                                                            } = e;
                                                                            let vec335 = (mime_type334.into_bytes()).into_boxed_slice();
                                                                            let ptr335 = vec335.as_ptr().cast::<u8>();
                                                                            let len335 = vec335.len();
                                                                            ::core::mem::forget(vec335);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len335;
                                                                            *base.add(0).cast::<*mut u8>() = ptr335.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len336;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result336;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len338;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result338;
                                        }
                                    }
                                    use super::super::super::super::golem::agent::common::DataSchema as V402;
                                    match output_schema273 {
                                        V402::Tuple(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec370 = e;
                                            let len370 = vec370.len();
                                            let layout370 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec370.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result370 = if layout370.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout370).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout370);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec370.into_iter().enumerate() {
                                                let base = result370
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t340_0, t340_1) = e;
                                                    let vec341 = (t340_0.into_bytes()).into_boxed_slice();
                                                    let ptr341 = vec341.as_ptr().cast::<u8>();
                                                    let len341 = vec341.len();
                                                    ::core::mem::forget(vec341);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len341;
                                                    *base.add(0).cast::<*mut u8>() = ptr341.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V369;
                                                    match t340_1 {
                                                        V369::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes342,
                                                            } = e;
                                                            let vec360 = nodes342;
                                                            let len360 = vec360.len();
                                                            let layout360 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec360.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result360 = if layout360.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout360).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout360);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec360.into_iter().enumerate() {
                                                                let base = result360
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name343,
                                                                        owner: owner343,
                                                                        type_: type_343,
                                                                    } = e;
                                                                    match name343 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec344 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr344 = vec344.as_ptr().cast::<u8>();
                                                                            let len344 = vec344.len();
                                                                            ::core::mem::forget(vec344);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len344;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr344.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner343 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec345 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr345 = vec345.as_ptr().cast::<u8>();
                                                                            let len345 = vec345.len();
                                                                            ::core::mem::forget(vec345);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len345;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr345.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V359;
                                                                    match type_343 {
                                                                        V359::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec348 = e;
                                                                            let len348 = vec348.len();
                                                                            let layout348 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec348.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result348 = if layout348.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout348).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout348);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec348.into_iter().enumerate() {
                                                                                let base = result348
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t346_0, t346_1) = e;
                                                                                    let vec347 = (t346_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr347 = vec347.as_ptr().cast::<u8>();
                                                                                    let len347 = vec347.len();
                                                                                    ::core::mem::forget(vec347);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len347;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr347.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t346_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len348;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result348;
                                                                        }
                                                                        V359::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec351 = e;
                                                                            let len351 = vec351.len();
                                                                            let layout351 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec351.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result351 = if layout351.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout351).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout351);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec351.into_iter().enumerate() {
                                                                                let base = result351
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t349_0, t349_1) = e;
                                                                                    let vec350 = (t349_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr350 = vec350.as_ptr().cast::<u8>();
                                                                                    let len350 = vec350.len();
                                                                                    ::core::mem::forget(vec350);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len350;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr350.cast_mut();
                                                                                    match t349_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len351;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result351;
                                                                        }
                                                                        V359::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec353 = e;
                                                                            let len353 = vec353.len();
                                                                            let layout353 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec353.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result353 = if layout353.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout353).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout353);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec353.into_iter().enumerate() {
                                                                                let base = result353
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec352 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr352 = vec352.as_ptr().cast::<u8>();
                                                                                    let len352 = vec352.len();
                                                                                    ::core::mem::forget(vec352);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len352;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr352.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len353;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result353;
                                                                        }
                                                                        V359::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec355 = e;
                                                                            let len355 = vec355.len();
                                                                            let layout355 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec355.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result355 = if layout355.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout355).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout355);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec355.into_iter().enumerate() {
                                                                                let base = result355
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec354 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr354 = vec354.as_ptr().cast::<u8>();
                                                                                    let len354 = vec354.len();
                                                                                    ::core::mem::forget(vec354);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len354;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr354.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len355;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result355;
                                                                        }
                                                                        V359::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec356 = (e).into_boxed_slice();
                                                                            let ptr356 = vec356.as_ptr().cast::<u8>();
                                                                            let len356 = vec356.len();
                                                                            ::core::mem::forget(vec356);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len356;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr356.cast_mut();
                                                                        }
                                                                        V359::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V359::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V359::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t357_0, t357_1) = e;
                                                                            match t357_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t357_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V359::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V359::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V359::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V359::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V359::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V359::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V359::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V359::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V359::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V359::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V359::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V359::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V359::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V359::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t358_0, t358_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t358_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t358_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len360;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result360;
                                                        }
                                                        V369::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions361,
                                                            } = e;
                                                            match restrictions361 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec364 = e;
                                                                    let len364 = vec364.len();
                                                                    let layout364 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec364.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result364 = if layout364.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout364).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout364);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec364.into_iter().enumerate() {
                                                                        let base = result364
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code362,
                                                                            } = e;
                                                                            let vec363 = (language_code362.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr363 = vec363.as_ptr().cast::<u8>();
                                                                            let len363 = vec363.len();
                                                                            ::core::mem::forget(vec363);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len363;
                                                                            *base.add(0).cast::<*mut u8>() = ptr363.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len364;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result364;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V369::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions365,
                                                            } = e;
                                                            match restrictions365 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec368 = e;
                                                                    let len368 = vec368.len();
                                                                    let layout368 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec368.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result368 = if layout368.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout368).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout368);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec368.into_iter().enumerate() {
                                                                        let base = result368
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type366,
                                                                            } = e;
                                                                            let vec367 = (mime_type366.into_bytes()).into_boxed_slice();
                                                                            let ptr367 = vec367.as_ptr().cast::<u8>();
                                                                            let len367 = vec367.len();
                                                                            ::core::mem::forget(vec367);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len367;
                                                                            *base.add(0).cast::<*mut u8>() = ptr367.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len368;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result368;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len370;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result370;
                                        }
                                        V402::Multimodal(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec401 = e;
                                            let len401 = vec401.len();
                                            let layout401 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec401.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result401 = if layout401.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout401).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout401);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec401.into_iter().enumerate() {
                                                let base = result401
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t371_0, t371_1) = e;
                                                    let vec372 = (t371_0.into_bytes()).into_boxed_slice();
                                                    let ptr372 = vec372.as_ptr().cast::<u8>();
                                                    let len372 = vec372.len();
                                                    ::core::mem::forget(vec372);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len372;
                                                    *base.add(0).cast::<*mut u8>() = ptr372.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V400;
                                                    match t371_1 {
                                                        V400::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes373,
                                                            } = e;
                                                            let vec391 = nodes373;
                                                            let len391 = vec391.len();
                                                            let layout391 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec391.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result391 = if layout391.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout391).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout391);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec391.into_iter().enumerate() {
                                                                let base = result391
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name374,
                                                                        owner: owner374,
                                                                        type_: type_374,
                                                                    } = e;
                                                                    match name374 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec375 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr375 = vec375.as_ptr().cast::<u8>();
                                                                            let len375 = vec375.len();
                                                                            ::core::mem::forget(vec375);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len375;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr375.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner374 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec376 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr376 = vec376.as_ptr().cast::<u8>();
                                                                            let len376 = vec376.len();
                                                                            ::core::mem::forget(vec376);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len376;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr376.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V390;
                                                                    match type_374 {
                                                                        V390::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec379 = e;
                                                                            let len379 = vec379.len();
                                                                            let layout379 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec379.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result379 = if layout379.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout379).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout379);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec379.into_iter().enumerate() {
                                                                                let base = result379
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t377_0, t377_1) = e;
                                                                                    let vec378 = (t377_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr378 = vec378.as_ptr().cast::<u8>();
                                                                                    let len378 = vec378.len();
                                                                                    ::core::mem::forget(vec378);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len378;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr378.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t377_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len379;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result379;
                                                                        }
                                                                        V390::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec382 = e;
                                                                            let len382 = vec382.len();
                                                                            let layout382 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec382.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result382 = if layout382.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout382).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout382);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec382.into_iter().enumerate() {
                                                                                let base = result382
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t380_0, t380_1) = e;
                                                                                    let vec381 = (t380_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr381 = vec381.as_ptr().cast::<u8>();
                                                                                    let len381 = vec381.len();
                                                                                    ::core::mem::forget(vec381);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len381;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr381.cast_mut();
                                                                                    match t380_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len382;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result382;
                                                                        }
                                                                        V390::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec384 = e;
                                                                            let len384 = vec384.len();
                                                                            let layout384 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec384.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result384 = if layout384.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout384).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout384);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec384.into_iter().enumerate() {
                                                                                let base = result384
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec383 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr383 = vec383.as_ptr().cast::<u8>();
                                                                                    let len383 = vec383.len();
                                                                                    ::core::mem::forget(vec383);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len383;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr383.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len384;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result384;
                                                                        }
                                                                        V390::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec386 = e;
                                                                            let len386 = vec386.len();
                                                                            let layout386 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec386.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result386 = if layout386.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout386).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout386);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec386.into_iter().enumerate() {
                                                                                let base = result386
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec385 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr385 = vec385.as_ptr().cast::<u8>();
                                                                                    let len385 = vec385.len();
                                                                                    ::core::mem::forget(vec385);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len385;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr385.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len386;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result386;
                                                                        }
                                                                        V390::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec387 = (e).into_boxed_slice();
                                                                            let ptr387 = vec387.as_ptr().cast::<u8>();
                                                                            let len387 = vec387.len();
                                                                            ::core::mem::forget(vec387);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len387;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr387.cast_mut();
                                                                        }
                                                                        V390::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V390::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V390::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t388_0, t388_1) = e;
                                                                            match t388_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t388_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V390::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V390::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V390::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V390::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V390::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V390::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V390::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V390::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V390::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V390::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V390::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V390::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V390::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V390::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t389_0, t389_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t389_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t389_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len391;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result391;
                                                        }
                                                        V400::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions392,
                                                            } = e;
                                                            match restrictions392 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec395 = e;
                                                                    let len395 = vec395.len();
                                                                    let layout395 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec395.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result395 = if layout395.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout395).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout395);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec395.into_iter().enumerate() {
                                                                        let base = result395
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code393,
                                                                            } = e;
                                                                            let vec394 = (language_code393.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr394 = vec394.as_ptr().cast::<u8>();
                                                                            let len394 = vec394.len();
                                                                            ::core::mem::forget(vec394);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len394;
                                                                            *base.add(0).cast::<*mut u8>() = ptr394.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len395;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result395;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V400::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions396,
                                                            } = e;
                                                            match restrictions396 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec399 = e;
                                                                    let len399 = vec399.len();
                                                                    let layout399 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec399.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result399 = if layout399.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout399).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout399);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec399.into_iter().enumerate() {
                                                                        let base = result399
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type397,
                                                                            } = e;
                                                                            let vec398 = (mime_type397.into_bytes()).into_boxed_slice();
                                                                            let ptr398 = vec398.as_ptr().cast::<u8>();
                                                                            let len398 = vec398.len();
                                                                            ::core::mem::forget(vec398);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len398;
                                                                            *base.add(0).cast::<*mut u8>() = ptr398.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len399;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result399;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len401;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result401;
                                        }
                                    }
                                }
                            }
                            *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len403;
                            *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result403;
                        }
                    }
                    *ptr1
                        .add(18 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>() = len404;
                    *ptr1
                        .add(17 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = result404;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_agent_get_definition<T: GuestAgent>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l3 = *arg0
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l4 = i32::from(
                        *arg0.add(4 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l4 {
                        0 => {}
                        _ => {
                            let l5 = *arg0
                                .add(5 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l6 = *arg0
                                .add(6 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l5, l6, 1);
                        }
                    }
                    let l7 = *arg0
                        .add(7 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *arg0
                        .add(8 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l7, l8, 1);
                    let l9 = i32::from(
                        *arg0.add(9 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l9 {
                        0 => {}
                        _ => {
                            let l10 = *arg0
                                .add(10 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l11 = *arg0
                                .add(11 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l10, l11, 1);
                        }
                    }
                    let l12 = i32::from(
                        *arg0.add(12 * ::core::mem::size_of::<*const u8>()).cast::<u8>(),
                    );
                    match l12 {
                        0 => {
                            let l13 = *arg0
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l14 = *arg0
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base63 = l13;
                            let len63 = l14;
                            for i in 0..len63 {
                                let base = base63
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l15 = *base.add(0).cast::<*mut u8>();
                                    let l16 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l15, l16, 1);
                                    let l17 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l17 {
                                        0 => {
                                            let l18 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l19 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base50 = l18;
                                            let len50 = l19;
                                            for i in 0..len50 {
                                                let base = base50
                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l20 = i32::from(*base.add(0).cast::<u8>());
                                                    match l20 {
                                                        0 => {}
                                                        _ => {
                                                            let l21 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l22 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l21, l22, 1);
                                                        }
                                                    }
                                                    let l23 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l23 {
                                                        0 => {}
                                                        _ => {
                                                            let l24 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l25 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l24, l25, 1);
                                                        }
                                                    }
                                                    let l26 = i32::from(
                                                        *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l26 {
                                                        0 => {
                                                            let l27 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l28 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base31 = l27;
                                                            let len31 = l28;
                                                            for i in 0..len31 {
                                                                let base = base31
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l29 = *base.add(0).cast::<*mut u8>();
                                                                    let l30 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l29, l30, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base31,
                                                                len31 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        1 => {
                                                            let l32 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l33 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base36 = l32;
                                                            let len36 = l33;
                                                            for i in 0..len36 {
                                                                let base = base36
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l34 = *base.add(0).cast::<*mut u8>();
                                                                    let l35 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l34, l35, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base36,
                                                                len36 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        2 => {
                                                            let l37 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l38 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base41 = l37;
                                                            let len41 = l38;
                                                            for i in 0..len41 {
                                                                let base = base41
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l39 = *base.add(0).cast::<*mut u8>();
                                                                    let l40 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l39, l40, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base41,
                                                                len41 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        3 => {
                                                            let l42 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l43 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base46 = l42;
                                                            let len46 = l43;
                                                            for i in 0..len46 {
                                                                let base = base46
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l44 = *base.add(0).cast::<*mut u8>();
                                                                    let l45 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l44, l45, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base46,
                                                                len46 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        4 => {
                                                            let l47 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l48 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base49 = l47;
                                                            let len49 = l48;
                                                            _rt::cabi_dealloc(base49, len49 * 4, 4);
                                                        }
                                                        5 => {}
                                                        6 => {}
                                                        7 => {}
                                                        8 => {}
                                                        9 => {}
                                                        10 => {}
                                                        11 => {}
                                                        12 => {}
                                                        13 => {}
                                                        14 => {}
                                                        15 => {}
                                                        16 => {}
                                                        17 => {}
                                                        18 => {}
                                                        19 => {}
                                                        20 => {}
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base50,
                                                len50 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        1 => {
                                            let l51 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l51 {
                                                0 => {}
                                                _ => {
                                                    let l52 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l53 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base56 = l52;
                                                    let len56 = l53;
                                                    for i in 0..len56 {
                                                        let base = base56
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l54 = *base.add(0).cast::<*mut u8>();
                                                            let l55 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l54, l55, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base56,
                                                        len56 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l57 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l57 {
                                                0 => {}
                                                _ => {
                                                    let l58 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l59 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base62 = l58;
                                                    let len62 = l59;
                                                    for i in 0..len62 {
                                                        let base = base62
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l60 = *base.add(0).cast::<*mut u8>();
                                                            let l61 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l60, l61, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base62,
                                                        len62 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base63,
                                len63 * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                        _ => {
                            let l64 = *arg0
                                .add(13 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l65 = *arg0
                                .add(14 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base114 = l64;
                            let len114 = l65;
                            for i in 0..len114 {
                                let base = base114
                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l66 = *base.add(0).cast::<*mut u8>();
                                    let l67 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l66, l67, 1);
                                    let l68 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l68 {
                                        0 => {
                                            let l69 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l70 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base101 = l69;
                                            let len101 = l70;
                                            for i in 0..len101 {
                                                let base = base101
                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l71 = i32::from(*base.add(0).cast::<u8>());
                                                    match l71 {
                                                        0 => {}
                                                        _ => {
                                                            let l72 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l73 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l72, l73, 1);
                                                        }
                                                    }
                                                    let l74 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l74 {
                                                        0 => {}
                                                        _ => {
                                                            let l75 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l76 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l75, l76, 1);
                                                        }
                                                    }
                                                    let l77 = i32::from(
                                                        *base
                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l77 {
                                                        0 => {
                                                            let l78 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l79 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base82 = l78;
                                                            let len82 = l79;
                                                            for i in 0..len82 {
                                                                let base = base82
                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l80 = *base.add(0).cast::<*mut u8>();
                                                                    let l81 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l80, l81, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base82,
                                                                len82 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        1 => {
                                                            let l83 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l84 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base87 = l83;
                                                            let len87 = l84;
                                                            for i in 0..len87 {
                                                                let base = base87
                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l85 = *base.add(0).cast::<*mut u8>();
                                                                    let l86 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l85, l86, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base87,
                                                                len87 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        2 => {
                                                            let l88 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l89 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base92 = l88;
                                                            let len92 = l89;
                                                            for i in 0..len92 {
                                                                let base = base92
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l90 = *base.add(0).cast::<*mut u8>();
                                                                    let l91 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l90, l91, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base92,
                                                                len92 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        3 => {
                                                            let l93 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l94 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base97 = l93;
                                                            let len97 = l94;
                                                            for i in 0..len97 {
                                                                let base = base97
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l95 = *base.add(0).cast::<*mut u8>();
                                                                    let l96 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l95, l96, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base97,
                                                                len97 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                        4 => {
                                                            let l98 = *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l99 = *base
                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base100 = l98;
                                                            let len100 = l99;
                                                            _rt::cabi_dealloc(base100, len100 * 4, 4);
                                                        }
                                                        5 => {}
                                                        6 => {}
                                                        7 => {}
                                                        8 => {}
                                                        9 => {}
                                                        10 => {}
                                                        11 => {}
                                                        12 => {}
                                                        13 => {}
                                                        14 => {}
                                                        15 => {}
                                                        16 => {}
                                                        17 => {}
                                                        18 => {}
                                                        19 => {}
                                                        20 => {}
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base101,
                                                len101 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                8,
                                            );
                                        }
                                        1 => {
                                            let l102 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l102 {
                                                0 => {}
                                                _ => {
                                                    let l103 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l104 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base107 = l103;
                                                    let len107 = l104;
                                                    for i in 0..len107 {
                                                        let base = base107
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l105 = *base.add(0).cast::<*mut u8>();
                                                            let l106 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l105, l106, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base107,
                                                        len107 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                        _ => {
                                            let l108 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l108 {
                                                0 => {}
                                                _ => {
                                                    let l109 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l110 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base113 = l109;
                                                    let len113 = l110;
                                                    for i in 0..len113 {
                                                        let base = base113
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l111 = *base.add(0).cast::<*mut u8>();
                                                            let l112 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l111, l112, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base113,
                                                        len113 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base114,
                                len114 * (6 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    let l115 = *arg0
                        .add(15 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l116 = *arg0
                        .add(16 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base330 = l115;
                    let len330 = l116;
                    for i in 0..len330 {
                        let base = base330
                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l117 = *base.add(0).cast::<*mut u8>();
                            let l118 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l117, l118, 1);
                            let l119 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l120 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l119, l120, 1);
                            let l121 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l121 {
                                0 => {}
                                _ => {
                                    let l122 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l123 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l122, l123, 1);
                                }
                            }
                            let l124 = i32::from(
                                *base
                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l124 {
                                0 => {
                                    let l125 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l126 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base175 = l125;
                                    let len175 = l126;
                                    for i in 0..len175 {
                                        let base = base175
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l127 = *base.add(0).cast::<*mut u8>();
                                            let l128 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l127, l128, 1);
                                            let l129 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l129 {
                                                0 => {
                                                    let l130 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l131 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base162 = l130;
                                                    let len162 = l131;
                                                    for i in 0..len162 {
                                                        let base = base162
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l132 = i32::from(*base.add(0).cast::<u8>());
                                                            match l132 {
                                                                0 => {}
                                                                _ => {
                                                                    let l133 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l134 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l133, l134, 1);
                                                                }
                                                            }
                                                            let l135 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l135 {
                                                                0 => {}
                                                                _ => {
                                                                    let l136 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l137 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l136, l137, 1);
                                                                }
                                                            }
                                                            let l138 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l138 {
                                                                0 => {
                                                                    let l139 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l140 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base143 = l139;
                                                                    let len143 = l140;
                                                                    for i in 0..len143 {
                                                                        let base = base143
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l141 = *base.add(0).cast::<*mut u8>();
                                                                            let l142 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l141, l142, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base143,
                                                                        len143 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l144 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l145 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base148 = l144;
                                                                    let len148 = l145;
                                                                    for i in 0..len148 {
                                                                        let base = base148
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l146 = *base.add(0).cast::<*mut u8>();
                                                                            let l147 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l146, l147, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base148,
                                                                        len148 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l149 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l150 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base153 = l149;
                                                                    let len153 = l150;
                                                                    for i in 0..len153 {
                                                                        let base = base153
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l151 = *base.add(0).cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l151, l152, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base153,
                                                                        len153 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l154 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l155 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base158 = l154;
                                                                    let len158 = l155;
                                                                    for i in 0..len158 {
                                                                        let base = base158
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l156 = *base.add(0).cast::<*mut u8>();
                                                                            let l157 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l156, l157, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base158,
                                                                        len158 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l159 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l160 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base161 = l159;
                                                                    let len161 = l160;
                                                                    _rt::cabi_dealloc(base161, len161 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base162,
                                                        len162 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l163 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l163 {
                                                        0 => {}
                                                        _ => {
                                                            let l164 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l165 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base168 = l164;
                                                            let len168 = l165;
                                                            for i in 0..len168 {
                                                                let base = base168
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l166 = *base.add(0).cast::<*mut u8>();
                                                                    let l167 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l166, l167, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base168,
                                                                len168 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l169 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l169 {
                                                        0 => {}
                                                        _ => {
                                                            let l170 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l171 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base174 = l170;
                                                            let len174 = l171;
                                                            for i in 0..len174 {
                                                                let base = base174
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l172 = *base.add(0).cast::<*mut u8>();
                                                                    let l173 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l172, l173, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base174,
                                                                len174 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base175,
                                        len175 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l176 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l177 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base226 = l176;
                                    let len226 = l177;
                                    for i in 0..len226 {
                                        let base = base226
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l178 = *base.add(0).cast::<*mut u8>();
                                            let l179 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l178, l179, 1);
                                            let l180 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l180 {
                                                0 => {
                                                    let l181 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l182 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base213 = l181;
                                                    let len213 = l182;
                                                    for i in 0..len213 {
                                                        let base = base213
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l183 = i32::from(*base.add(0).cast::<u8>());
                                                            match l183 {
                                                                0 => {}
                                                                _ => {
                                                                    let l184 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l185 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l184, l185, 1);
                                                                }
                                                            }
                                                            let l186 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l186 {
                                                                0 => {}
                                                                _ => {
                                                                    let l187 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l188 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l187, l188, 1);
                                                                }
                                                            }
                                                            let l189 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l189 {
                                                                0 => {
                                                                    let l190 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l191 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base194 = l190;
                                                                    let len194 = l191;
                                                                    for i in 0..len194 {
                                                                        let base = base194
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l192 = *base.add(0).cast::<*mut u8>();
                                                                            let l193 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l192, l193, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base194,
                                                                        len194 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l195 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l196 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base199 = l195;
                                                                    let len199 = l196;
                                                                    for i in 0..len199 {
                                                                        let base = base199
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l197 = *base.add(0).cast::<*mut u8>();
                                                                            let l198 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l197, l198, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base199,
                                                                        len199 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l200 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l201 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base204 = l200;
                                                                    let len204 = l201;
                                                                    for i in 0..len204 {
                                                                        let base = base204
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l202 = *base.add(0).cast::<*mut u8>();
                                                                            let l203 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l202, l203, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base204,
                                                                        len204 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l205 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l206 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base209 = l205;
                                                                    let len209 = l206;
                                                                    for i in 0..len209 {
                                                                        let base = base209
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l207 = *base.add(0).cast::<*mut u8>();
                                                                            let l208 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l207, l208, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base209,
                                                                        len209 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l210 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l211 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base212 = l210;
                                                                    let len212 = l211;
                                                                    _rt::cabi_dealloc(base212, len212 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base213,
                                                        len213 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l214 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l214 {
                                                        0 => {}
                                                        _ => {
                                                            let l215 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l216 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base219 = l215;
                                                            let len219 = l216;
                                                            for i in 0..len219 {
                                                                let base = base219
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l217 = *base.add(0).cast::<*mut u8>();
                                                                    let l218 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l217, l218, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base219,
                                                                len219 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l220 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l220 {
                                                        0 => {}
                                                        _ => {
                                                            let l221 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l222 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base225 = l221;
                                                            let len225 = l222;
                                                            for i in 0..len225 {
                                                                let base = base225
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l223 = *base.add(0).cast::<*mut u8>();
                                                                    let l224 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l223, l224, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base225,
                                                                len225 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base226,
                                        len226 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l227 = i32::from(
                                *base
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l227 {
                                0 => {
                                    let l228 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l229 = *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base278 = l228;
                                    let len278 = l229;
                                    for i in 0..len278 {
                                        let base = base278
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l230 = *base.add(0).cast::<*mut u8>();
                                            let l231 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l230, l231, 1);
                                            let l232 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l232 {
                                                0 => {
                                                    let l233 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l234 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base265 = l233;
                                                    let len265 = l234;
                                                    for i in 0..len265 {
                                                        let base = base265
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l235 = i32::from(*base.add(0).cast::<u8>());
                                                            match l235 {
                                                                0 => {}
                                                                _ => {
                                                                    let l236 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l237 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l236, l237, 1);
                                                                }
                                                            }
                                                            let l238 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l238 {
                                                                0 => {}
                                                                _ => {
                                                                    let l239 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l240 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l239, l240, 1);
                                                                }
                                                            }
                                                            let l241 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l241 {
                                                                0 => {
                                                                    let l242 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l243 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base246 = l242;
                                                                    let len246 = l243;
                                                                    for i in 0..len246 {
                                                                        let base = base246
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l244 = *base.add(0).cast::<*mut u8>();
                                                                            let l245 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l244, l245, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base246,
                                                                        len246 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l247 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l248 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base251 = l247;
                                                                    let len251 = l248;
                                                                    for i in 0..len251 {
                                                                        let base = base251
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l249 = *base.add(0).cast::<*mut u8>();
                                                                            let l250 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l249, l250, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base251,
                                                                        len251 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l252 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l253 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base256 = l252;
                                                                    let len256 = l253;
                                                                    for i in 0..len256 {
                                                                        let base = base256
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l254 = *base.add(0).cast::<*mut u8>();
                                                                            let l255 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l254, l255, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base256,
                                                                        len256 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l257 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l258 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base261 = l257;
                                                                    let len261 = l258;
                                                                    for i in 0..len261 {
                                                                        let base = base261
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l259 = *base.add(0).cast::<*mut u8>();
                                                                            let l260 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l259, l260, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base261,
                                                                        len261 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l262 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l263 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base264 = l262;
                                                                    let len264 = l263;
                                                                    _rt::cabi_dealloc(base264, len264 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base265,
                                                        len265 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l266 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l266 {
                                                        0 => {}
                                                        _ => {
                                                            let l267 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l268 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base271 = l267;
                                                            let len271 = l268;
                                                            for i in 0..len271 {
                                                                let base = base271
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l269 = *base.add(0).cast::<*mut u8>();
                                                                    let l270 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l269, l270, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base271,
                                                                len271 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l272 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l272 {
                                                        0 => {}
                                                        _ => {
                                                            let l273 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l274 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base277 = l273;
                                                            let len277 = l274;
                                                            for i in 0..len277 {
                                                                let base = base277
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l275 = *base.add(0).cast::<*mut u8>();
                                                                    let l276 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l275, l276, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base277,
                                                                len277 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base278,
                                        len278 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l279 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l280 = *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base329 = l279;
                                    let len329 = l280;
                                    for i in 0..len329 {
                                        let base = base329
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l281 = *base.add(0).cast::<*mut u8>();
                                            let l282 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l281, l282, 1);
                                            let l283 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l283 {
                                                0 => {
                                                    let l284 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l285 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base316 = l284;
                                                    let len316 = l285;
                                                    for i in 0..len316 {
                                                        let base = base316
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l286 = i32::from(*base.add(0).cast::<u8>());
                                                            match l286 {
                                                                0 => {}
                                                                _ => {
                                                                    let l287 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l288 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l287, l288, 1);
                                                                }
                                                            }
                                                            let l289 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l289 {
                                                                0 => {}
                                                                _ => {
                                                                    let l290 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l291 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l290, l291, 1);
                                                                }
                                                            }
                                                            let l292 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l292 {
                                                                0 => {
                                                                    let l293 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l294 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base297 = l293;
                                                                    let len297 = l294;
                                                                    for i in 0..len297 {
                                                                        let base = base297
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l295 = *base.add(0).cast::<*mut u8>();
                                                                            let l296 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l295, l296, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base297,
                                                                        len297 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l298 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l299 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base302 = l298;
                                                                    let len302 = l299;
                                                                    for i in 0..len302 {
                                                                        let base = base302
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l300 = *base.add(0).cast::<*mut u8>();
                                                                            let l301 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l300, l301, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base302,
                                                                        len302 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l303 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l304 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base307 = l303;
                                                                    let len307 = l304;
                                                                    for i in 0..len307 {
                                                                        let base = base307
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l305 = *base.add(0).cast::<*mut u8>();
                                                                            let l306 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l305, l306, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base307,
                                                                        len307 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l308 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l309 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base312 = l308;
                                                                    let len312 = l309;
                                                                    for i in 0..len312 {
                                                                        let base = base312
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l310 = *base.add(0).cast::<*mut u8>();
                                                                            let l311 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l310, l311, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base312,
                                                                        len312 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l313 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l314 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base315 = l313;
                                                                    let len315 = l314;
                                                                    _rt::cabi_dealloc(base315, len315 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base316,
                                                        len316 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l317 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l317 {
                                                        0 => {}
                                                        _ => {
                                                            let l318 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l319 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base322 = l318;
                                                            let len322 = l319;
                                                            for i in 0..len322 {
                                                                let base = base322
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l320 = *base.add(0).cast::<*mut u8>();
                                                                    let l321 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l320, l321, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base322,
                                                                len322 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l323 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l323 {
                                                        0 => {}
                                                        _ => {
                                                            let l324 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l325 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base328 = l324;
                                                            let len328 = l325;
                                                            for i in 0..len328 {
                                                                let base = base328
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l326 = *base.add(0).cast::<*mut u8>();
                                                                    let l327 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l326, l327, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base328,
                                                                len328 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base329,
                                        len329 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(
                        base330,
                        len330 * (13 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let l331 = *arg0
                        .add(17 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l332 = *arg0
                        .add(18 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base665 = l331;
                    let len665 = l332;
                    for i in 0..len665 {
                        let base = base665
                            .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l333 = *base.add(0).cast::<*mut u8>();
                            let l334 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l333, l334, 1);
                            let l335 = i32::from(
                                *base
                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l335 {
                                0 => {}
                                _ => {
                                    let l336 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l337 = *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l336, l337, 1);
                                }
                            }
                            let l338 = i32::from(
                                *base
                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l338 {
                                0 => {}
                                _ => {
                                    let l339 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l340 = *base
                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l339, l340, 1);
                                }
                            }
                            let l341 = *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l342 = *base
                                .add(9 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l341, l342, 1);
                            let l343 = i32::from(
                                *base
                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l343 {
                                0 => {}
                                _ => {
                                    let l344 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l345 = *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l344, l345, 1);
                                }
                            }
                            let l346 = i32::from(
                                *base
                                    .add(13 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l346 {
                                0 => {
                                    let l347 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l348 = *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base397 = l347;
                                    let len397 = l348;
                                    for i in 0..len397 {
                                        let base = base397
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l349 = *base.add(0).cast::<*mut u8>();
                                            let l350 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l349, l350, 1);
                                            let l351 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l351 {
                                                0 => {
                                                    let l352 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l353 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base384 = l352;
                                                    let len384 = l353;
                                                    for i in 0..len384 {
                                                        let base = base384
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l354 = i32::from(*base.add(0).cast::<u8>());
                                                            match l354 {
                                                                0 => {}
                                                                _ => {
                                                                    let l355 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l356 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l355, l356, 1);
                                                                }
                                                            }
                                                            let l357 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l357 {
                                                                0 => {}
                                                                _ => {
                                                                    let l358 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l359 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l358, l359, 1);
                                                                }
                                                            }
                                                            let l360 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l360 {
                                                                0 => {
                                                                    let l361 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l362 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base365 = l361;
                                                                    let len365 = l362;
                                                                    for i in 0..len365 {
                                                                        let base = base365
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l363 = *base.add(0).cast::<*mut u8>();
                                                                            let l364 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l363, l364, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base365,
                                                                        len365 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l366 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l367 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base370 = l366;
                                                                    let len370 = l367;
                                                                    for i in 0..len370 {
                                                                        let base = base370
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l368 = *base.add(0).cast::<*mut u8>();
                                                                            let l369 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l368, l369, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base370,
                                                                        len370 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l371 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l372 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base375 = l371;
                                                                    let len375 = l372;
                                                                    for i in 0..len375 {
                                                                        let base = base375
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l373 = *base.add(0).cast::<*mut u8>();
                                                                            let l374 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l373, l374, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base375,
                                                                        len375 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l376 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l377 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base380 = l376;
                                                                    let len380 = l377;
                                                                    for i in 0..len380 {
                                                                        let base = base380
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l378 = *base.add(0).cast::<*mut u8>();
                                                                            let l379 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l378, l379, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base380,
                                                                        len380 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l381 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l382 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base383 = l381;
                                                                    let len383 = l382;
                                                                    _rt::cabi_dealloc(base383, len383 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base384,
                                                        len384 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l385 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l385 {
                                                        0 => {}
                                                        _ => {
                                                            let l386 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l387 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base390 = l386;
                                                            let len390 = l387;
                                                            for i in 0..len390 {
                                                                let base = base390
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l388 = *base.add(0).cast::<*mut u8>();
                                                                    let l389 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l388, l389, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base390,
                                                                len390 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l391 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l391 {
                                                        0 => {}
                                                        _ => {
                                                            let l392 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l393 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base396 = l392;
                                                            let len396 = l393;
                                                            for i in 0..len396 {
                                                                let base = base396
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l394 = *base.add(0).cast::<*mut u8>();
                                                                    let l395 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l394, l395, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base396,
                                                                len396 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base397,
                                        len397 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l398 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l399 = *base
                                        .add(15 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base448 = l398;
                                    let len448 = l399;
                                    for i in 0..len448 {
                                        let base = base448
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l400 = *base.add(0).cast::<*mut u8>();
                                            let l401 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l400, l401, 1);
                                            let l402 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l402 {
                                                0 => {
                                                    let l403 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l404 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base435 = l403;
                                                    let len435 = l404;
                                                    for i in 0..len435 {
                                                        let base = base435
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l405 = i32::from(*base.add(0).cast::<u8>());
                                                            match l405 {
                                                                0 => {}
                                                                _ => {
                                                                    let l406 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l407 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l406, l407, 1);
                                                                }
                                                            }
                                                            let l408 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l408 {
                                                                0 => {}
                                                                _ => {
                                                                    let l409 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l410 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l409, l410, 1);
                                                                }
                                                            }
                                                            let l411 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l411 {
                                                                0 => {
                                                                    let l412 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l413 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base416 = l412;
                                                                    let len416 = l413;
                                                                    for i in 0..len416 {
                                                                        let base = base416
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l414 = *base.add(0).cast::<*mut u8>();
                                                                            let l415 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l414, l415, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base416,
                                                                        len416 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l417 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l418 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base421 = l417;
                                                                    let len421 = l418;
                                                                    for i in 0..len421 {
                                                                        let base = base421
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l419 = *base.add(0).cast::<*mut u8>();
                                                                            let l420 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l419, l420, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base421,
                                                                        len421 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l422 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l423 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base426 = l422;
                                                                    let len426 = l423;
                                                                    for i in 0..len426 {
                                                                        let base = base426
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l424 = *base.add(0).cast::<*mut u8>();
                                                                            let l425 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l424, l425, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base426,
                                                                        len426 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l427 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l428 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base431 = l427;
                                                                    let len431 = l428;
                                                                    for i in 0..len431 {
                                                                        let base = base431
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l429 = *base.add(0).cast::<*mut u8>();
                                                                            let l430 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l429, l430, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base431,
                                                                        len431 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l432 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l433 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base434 = l432;
                                                                    let len434 = l433;
                                                                    _rt::cabi_dealloc(base434, len434 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base435,
                                                        len435 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l436 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l436 {
                                                        0 => {}
                                                        _ => {
                                                            let l437 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l438 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base441 = l437;
                                                            let len441 = l438;
                                                            for i in 0..len441 {
                                                                let base = base441
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l439 = *base.add(0).cast::<*mut u8>();
                                                                    let l440 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l439, l440, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base441,
                                                                len441 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l442 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l442 {
                                                        0 => {}
                                                        _ => {
                                                            let l443 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l444 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base447 = l443;
                                                            let len447 = l444;
                                                            for i in 0..len447 {
                                                                let base = base447
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l445 = *base.add(0).cast::<*mut u8>();
                                                                    let l446 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l445, l446, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base447,
                                                                len447 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base448,
                                        len448 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l449 = *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l450 = *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base664 = l449;
                            let len664 = l450;
                            for i in 0..len664 {
                                let base = base664
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l451 = *base.add(0).cast::<*mut u8>();
                                    let l452 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l451, l452, 1);
                                    let l453 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l454 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l453, l454, 1);
                                    let l455 = i32::from(
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l455 {
                                        0 => {}
                                        _ => {
                                            let l456 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l457 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l456, l457, 1);
                                        }
                                    }
                                    let l458 = i32::from(
                                        *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l458 {
                                        0 => {
                                            let l459 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l460 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base509 = l459;
                                            let len509 = l460;
                                            for i in 0..len509 {
                                                let base = base509
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l461 = *base.add(0).cast::<*mut u8>();
                                                    let l462 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l461, l462, 1);
                                                    let l463 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l463 {
                                                        0 => {
                                                            let l464 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l465 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base496 = l464;
                                                            let len496 = l465;
                                                            for i in 0..len496 {
                                                                let base = base496
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l466 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l466 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l467 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l468 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l467, l468, 1);
                                                                        }
                                                                    }
                                                                    let l469 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l469 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l470 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l471 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l470, l471, 1);
                                                                        }
                                                                    }
                                                                    let l472 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l472 {
                                                                        0 => {
                                                                            let l473 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l474 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base477 = l473;
                                                                            let len477 = l474;
                                                                            for i in 0..len477 {
                                                                                let base = base477
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l475 = *base.add(0).cast::<*mut u8>();
                                                                                    let l476 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l475, l476, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base477,
                                                                                len477 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l478 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l479 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base482 = l478;
                                                                            let len482 = l479;
                                                                            for i in 0..len482 {
                                                                                let base = base482
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l480 = *base.add(0).cast::<*mut u8>();
                                                                                    let l481 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l480, l481, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base482,
                                                                                len482 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l483 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l484 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base487 = l483;
                                                                            let len487 = l484;
                                                                            for i in 0..len487 {
                                                                                let base = base487
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l485 = *base.add(0).cast::<*mut u8>();
                                                                                    let l486 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l485, l486, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base487,
                                                                                len487 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l488 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l489 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base492 = l488;
                                                                            let len492 = l489;
                                                                            for i in 0..len492 {
                                                                                let base = base492
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l490 = *base.add(0).cast::<*mut u8>();
                                                                                    let l491 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l490, l491, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base492,
                                                                                len492 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l493 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l494 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base495 = l493;
                                                                            let len495 = l494;
                                                                            _rt::cabi_dealloc(base495, len495 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base496,
                                                                len496 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l497 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l497 {
                                                                0 => {}
                                                                _ => {
                                                                    let l498 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l499 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base502 = l498;
                                                                    let len502 = l499;
                                                                    for i in 0..len502 {
                                                                        let base = base502
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l500 = *base.add(0).cast::<*mut u8>();
                                                                            let l501 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l500, l501, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base502,
                                                                        len502 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l503 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l503 {
                                                                0 => {}
                                                                _ => {
                                                                    let l504 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l505 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base508 = l504;
                                                                    let len508 = l505;
                                                                    for i in 0..len508 {
                                                                        let base = base508
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l506 = *base.add(0).cast::<*mut u8>();
                                                                            let l507 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l506, l507, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base508,
                                                                        len508 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base509,
                                                len509 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l510 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l511 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base560 = l510;
                                            let len560 = l511;
                                            for i in 0..len560 {
                                                let base = base560
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l512 = *base.add(0).cast::<*mut u8>();
                                                    let l513 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l512, l513, 1);
                                                    let l514 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l514 {
                                                        0 => {
                                                            let l515 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l516 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base547 = l515;
                                                            let len547 = l516;
                                                            for i in 0..len547 {
                                                                let base = base547
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l517 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l517 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l518 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l519 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l518, l519, 1);
                                                                        }
                                                                    }
                                                                    let l520 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l520 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l521 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l522 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l521, l522, 1);
                                                                        }
                                                                    }
                                                                    let l523 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l523 {
                                                                        0 => {
                                                                            let l524 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l525 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base528 = l524;
                                                                            let len528 = l525;
                                                                            for i in 0..len528 {
                                                                                let base = base528
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l526 = *base.add(0).cast::<*mut u8>();
                                                                                    let l527 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l526, l527, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base528,
                                                                                len528 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l529 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l530 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base533 = l529;
                                                                            let len533 = l530;
                                                                            for i in 0..len533 {
                                                                                let base = base533
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l531 = *base.add(0).cast::<*mut u8>();
                                                                                    let l532 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l531, l532, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base533,
                                                                                len533 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l534 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l535 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base538 = l534;
                                                                            let len538 = l535;
                                                                            for i in 0..len538 {
                                                                                let base = base538
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l536 = *base.add(0).cast::<*mut u8>();
                                                                                    let l537 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l536, l537, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base538,
                                                                                len538 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l539 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l540 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base543 = l539;
                                                                            let len543 = l540;
                                                                            for i in 0..len543 {
                                                                                let base = base543
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l541 = *base.add(0).cast::<*mut u8>();
                                                                                    let l542 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l541, l542, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base543,
                                                                                len543 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l544 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l545 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base546 = l544;
                                                                            let len546 = l545;
                                                                            _rt::cabi_dealloc(base546, len546 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base547,
                                                                len547 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l548 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l548 {
                                                                0 => {}
                                                                _ => {
                                                                    let l549 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l550 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base553 = l549;
                                                                    let len553 = l550;
                                                                    for i in 0..len553 {
                                                                        let base = base553
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l551 = *base.add(0).cast::<*mut u8>();
                                                                            let l552 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l551, l552, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base553,
                                                                        len553 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l554 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l554 {
                                                                0 => {}
                                                                _ => {
                                                                    let l555 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l556 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base559 = l555;
                                                                    let len559 = l556;
                                                                    for i in 0..len559 {
                                                                        let base = base559
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l557 = *base.add(0).cast::<*mut u8>();
                                                                            let l558 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l557, l558, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base559,
                                                                        len559 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base560,
                                                len560 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l561 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l561 {
                                        0 => {
                                            let l562 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l563 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base612 = l562;
                                            let len612 = l563;
                                            for i in 0..len612 {
                                                let base = base612
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l564 = *base.add(0).cast::<*mut u8>();
                                                    let l565 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l564, l565, 1);
                                                    let l566 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l566 {
                                                        0 => {
                                                            let l567 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l568 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base599 = l567;
                                                            let len599 = l568;
                                                            for i in 0..len599 {
                                                                let base = base599
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l569 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l569 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l570 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l571 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l570, l571, 1);
                                                                        }
                                                                    }
                                                                    let l572 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l572 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l573 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l574 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l573, l574, 1);
                                                                        }
                                                                    }
                                                                    let l575 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l575 {
                                                                        0 => {
                                                                            let l576 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l577 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base580 = l576;
                                                                            let len580 = l577;
                                                                            for i in 0..len580 {
                                                                                let base = base580
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l578 = *base.add(0).cast::<*mut u8>();
                                                                                    let l579 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l578, l579, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base580,
                                                                                len580 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l581 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l582 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base585 = l581;
                                                                            let len585 = l582;
                                                                            for i in 0..len585 {
                                                                                let base = base585
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l583 = *base.add(0).cast::<*mut u8>();
                                                                                    let l584 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l583, l584, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base585,
                                                                                len585 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l586 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l587 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base590 = l586;
                                                                            let len590 = l587;
                                                                            for i in 0..len590 {
                                                                                let base = base590
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l588 = *base.add(0).cast::<*mut u8>();
                                                                                    let l589 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l588, l589, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base590,
                                                                                len590 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l591 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l592 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base595 = l591;
                                                                            let len595 = l592;
                                                                            for i in 0..len595 {
                                                                                let base = base595
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l593 = *base.add(0).cast::<*mut u8>();
                                                                                    let l594 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l593, l594, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base595,
                                                                                len595 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l596 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l597 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base598 = l596;
                                                                            let len598 = l597;
                                                                            _rt::cabi_dealloc(base598, len598 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base599,
                                                                len599 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l600 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l600 {
                                                                0 => {}
                                                                _ => {
                                                                    let l601 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l602 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base605 = l601;
                                                                    let len605 = l602;
                                                                    for i in 0..len605 {
                                                                        let base = base605
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l603 = *base.add(0).cast::<*mut u8>();
                                                                            let l604 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l603, l604, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base605,
                                                                        len605 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l606 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l606 {
                                                                0 => {}
                                                                _ => {
                                                                    let l607 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l608 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base611 = l607;
                                                                    let len611 = l608;
                                                                    for i in 0..len611 {
                                                                        let base = base611
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l609 = *base.add(0).cast::<*mut u8>();
                                                                            let l610 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l609, l610, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base611,
                                                                        len611 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base612,
                                                len612 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l613 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l614 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base663 = l613;
                                            let len663 = l614;
                                            for i in 0..len663 {
                                                let base = base663
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l615 = *base.add(0).cast::<*mut u8>();
                                                    let l616 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l615, l616, 1);
                                                    let l617 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l617 {
                                                        0 => {
                                                            let l618 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l619 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base650 = l618;
                                                            let len650 = l619;
                                                            for i in 0..len650 {
                                                                let base = base650
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l620 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l620 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l621 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l622 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l621, l622, 1);
                                                                        }
                                                                    }
                                                                    let l623 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l623 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l624 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l625 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l624, l625, 1);
                                                                        }
                                                                    }
                                                                    let l626 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l626 {
                                                                        0 => {
                                                                            let l627 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l628 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base631 = l627;
                                                                            let len631 = l628;
                                                                            for i in 0..len631 {
                                                                                let base = base631
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l629 = *base.add(0).cast::<*mut u8>();
                                                                                    let l630 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l629, l630, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base631,
                                                                                len631 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l632 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l633 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base636 = l632;
                                                                            let len636 = l633;
                                                                            for i in 0..len636 {
                                                                                let base = base636
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l634 = *base.add(0).cast::<*mut u8>();
                                                                                    let l635 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l634, l635, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base636,
                                                                                len636 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l637 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l638 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base641 = l637;
                                                                            let len641 = l638;
                                                                            for i in 0..len641 {
                                                                                let base = base641
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l639 = *base.add(0).cast::<*mut u8>();
                                                                                    let l640 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l639, l640, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base641,
                                                                                len641 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l642 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l643 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base646 = l642;
                                                                            let len646 = l643;
                                                                            for i in 0..len646 {
                                                                                let base = base646
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l644 = *base.add(0).cast::<*mut u8>();
                                                                                    let l645 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l644, l645, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base646,
                                                                                len646 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l647 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l648 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base649 = l647;
                                                                            let len649 = l648;
                                                                            _rt::cabi_dealloc(base649, len649 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base650,
                                                                len650 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l651 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l651 {
                                                                0 => {}
                                                                _ => {
                                                                    let l652 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l653 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base656 = l652;
                                                                    let len656 = l653;
                                                                    for i in 0..len656 {
                                                                        let base = base656
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l654 = *base.add(0).cast::<*mut u8>();
                                                                            let l655 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l654, l655, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base656,
                                                                        len656 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l657 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l657 {
                                                                0 => {}
                                                                _ => {
                                                                    let l658 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l659 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base662 = l658;
                                                                    let len662 = l659;
                                                                    for i in 0..len662 {
                                                                        let base = base662
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l660 = *base.add(0).cast::<*mut u8>();
                                                                            let l661 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l660, l661, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base662,
                                                                        len662 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base663,
                                                len663 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base664,
                                len664 * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    _rt::cabi_dealloc(
                        base665,
                        len665 * (18 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_get_agent_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::get_agent(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                    );
                    (result2).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_invoke_agent_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: *mut u8,
                    arg5: usize,
                    arg6: i32,
                    arg7: *mut u8,
                    arg8: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let len2 = arg5;
                    let bytes2 = _rt::Vec::from_raw_parts(arg4.cast(), len2, len2);
                    use super::super::super::super::golem::agent::common::DataValue as V154;
                    let v154 = match arg6 {
                        0 => {
                            let e154 = {
                                let base76 = arg7;
                                let len76 = arg8;
                                let mut result76 = _rt::Vec::with_capacity(len76);
                                for i in 0..len76 {
                                    let base = base76
                                        .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                    let e76 = {
                                        let l3 = i32::from(*base.add(0).cast::<u8>());
                                        use super::super::super::super::golem::agent::common::ElementValue as V75;
                                        let v75 = match l3 {
                                            0 => {
                                                let e75 = {
                                                    let l4 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l5 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base51 = l4;
                                                    let len51 = l5;
                                                    let mut result51 = _rt::Vec::with_capacity(len51);
                                                    for i in 0..len51 {
                                                        let base = base51
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e51 = {
                                                            let l6 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V50;
                                                            let v50 = match l6 {
                                                                0 => {
                                                                    let e50 = {
                                                                        let l7 = *base.add(8).cast::<*mut u8>();
                                                                        let l8 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len9 = l8;
                                                                        _rt::Vec::from_raw_parts(l7.cast(), len9, len9)
                                                                    };
                                                                    V50::RecordValue(e50)
                                                                }
                                                                1 => {
                                                                    let e50 = {
                                                                        let l10 = *base.add(8).cast::<i32>();
                                                                        let l11 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l10 as u32,
                                                                            match l11 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l12 = *base.add(16).cast::<i32>();
                                                                                        l12
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V50::VariantValue(e50)
                                                                }
                                                                2 => {
                                                                    let e50 = {
                                                                        let l13 = *base.add(8).cast::<i32>();
                                                                        l13 as u32
                                                                    };
                                                                    V50::EnumValue(e50)
                                                                }
                                                                3 => {
                                                                    let e50 = {
                                                                        let l14 = *base.add(8).cast::<*mut u8>();
                                                                        let l15 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base17 = l14;
                                                                        let len17 = l15;
                                                                        let mut result17 = _rt::Vec::with_capacity(len17);
                                                                        for i in 0..len17 {
                                                                            let base = base17.add(i * 1);
                                                                            let e17 = {
                                                                                let l16 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l16 as u8)
                                                                            };
                                                                            result17.push(e17);
                                                                        }
                                                                        _rt::cabi_dealloc(base17, len17 * 1, 1);
                                                                        result17
                                                                    };
                                                                    V50::FlagsValue(e50)
                                                                }
                                                                4 => {
                                                                    let e50 = {
                                                                        let l18 = *base.add(8).cast::<*mut u8>();
                                                                        let l19 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len20 = l19;
                                                                        _rt::Vec::from_raw_parts(l18.cast(), len20, len20)
                                                                    };
                                                                    V50::TupleValue(e50)
                                                                }
                                                                5 => {
                                                                    let e50 = {
                                                                        let l21 = *base.add(8).cast::<*mut u8>();
                                                                        let l22 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len23 = l22;
                                                                        _rt::Vec::from_raw_parts(l21.cast(), len23, len23)
                                                                    };
                                                                    V50::ListValue(e50)
                                                                }
                                                                6 => {
                                                                    let e50 = {
                                                                        let l24 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l24 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l25 = *base.add(12).cast::<i32>();
                                                                                    l25
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V50::OptionValue(e50)
                                                                }
                                                                7 => {
                                                                    let e50 = {
                                                                        let l26 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l26 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l27 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l27 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l28 = *base.add(16).cast::<i32>();
                                                                                                l28
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l29 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l29 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l30 = *base.add(16).cast::<i32>();
                                                                                                l30
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V50::ResultValue(e50)
                                                                }
                                                                8 => {
                                                                    let e50 = {
                                                                        let l31 = i32::from(*base.add(8).cast::<u8>());
                                                                        l31 as u8
                                                                    };
                                                                    V50::PrimU8(e50)
                                                                }
                                                                9 => {
                                                                    let e50 = {
                                                                        let l32 = i32::from(*base.add(8).cast::<u16>());
                                                                        l32 as u16
                                                                    };
                                                                    V50::PrimU16(e50)
                                                                }
                                                                10 => {
                                                                    let e50 = {
                                                                        let l33 = *base.add(8).cast::<i32>();
                                                                        l33 as u32
                                                                    };
                                                                    V50::PrimU32(e50)
                                                                }
                                                                11 => {
                                                                    let e50 = {
                                                                        let l34 = *base.add(8).cast::<i64>();
                                                                        l34 as u64
                                                                    };
                                                                    V50::PrimU64(e50)
                                                                }
                                                                12 => {
                                                                    let e50 = {
                                                                        let l35 = i32::from(*base.add(8).cast::<i8>());
                                                                        l35 as i8
                                                                    };
                                                                    V50::PrimS8(e50)
                                                                }
                                                                13 => {
                                                                    let e50 = {
                                                                        let l36 = i32::from(*base.add(8).cast::<i16>());
                                                                        l36 as i16
                                                                    };
                                                                    V50::PrimS16(e50)
                                                                }
                                                                14 => {
                                                                    let e50 = {
                                                                        let l37 = *base.add(8).cast::<i32>();
                                                                        l37
                                                                    };
                                                                    V50::PrimS32(e50)
                                                                }
                                                                15 => {
                                                                    let e50 = {
                                                                        let l38 = *base.add(8).cast::<i64>();
                                                                        l38
                                                                    };
                                                                    V50::PrimS64(e50)
                                                                }
                                                                16 => {
                                                                    let e50 = {
                                                                        let l39 = *base.add(8).cast::<f32>();
                                                                        l39
                                                                    };
                                                                    V50::PrimFloat32(e50)
                                                                }
                                                                17 => {
                                                                    let e50 = {
                                                                        let l40 = *base.add(8).cast::<f64>();
                                                                        l40
                                                                    };
                                                                    V50::PrimFloat64(e50)
                                                                }
                                                                18 => {
                                                                    let e50 = {
                                                                        let l41 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l41 as u32)
                                                                    };
                                                                    V50::PrimChar(e50)
                                                                }
                                                                19 => {
                                                                    let e50 = {
                                                                        let l42 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l42 as u8)
                                                                    };
                                                                    V50::PrimBool(e50)
                                                                }
                                                                20 => {
                                                                    let e50 = {
                                                                        let l43 = *base.add(8).cast::<*mut u8>();
                                                                        let l44 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len45 = l44;
                                                                        let bytes45 = _rt::Vec::from_raw_parts(
                                                                            l43.cast(),
                                                                            len45,
                                                                            len45,
                                                                        );
                                                                        _rt::string_lift(bytes45)
                                                                    };
                                                                    V50::PrimString(e50)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e50 = {
                                                                        let l46 = *base.add(8).cast::<*mut u8>();
                                                                        let l47 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len48 = l47;
                                                                        let bytes48 = _rt::Vec::from_raw_parts(
                                                                            l46.cast(),
                                                                            len48,
                                                                            len48,
                                                                        );
                                                                        let l49 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes48),
                                                                            },
                                                                            l49 as u64,
                                                                        )
                                                                    };
                                                                    V50::Handle(e50)
                                                                }
                                                            };
                                                            v50
                                                        };
                                                        result51.push(e51);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base51,
                                                        len51 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result51,
                                                    }
                                                };
                                                V75::ComponentModel(e75)
                                            }
                                            1 => {
                                                let e75 = {
                                                    let l52 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V63;
                                                    let v63 = match l52 {
                                                        0 => {
                                                            let e63 = {
                                                                let l53 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l54 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len55 = l54;
                                                                let bytes55 = _rt::Vec::from_raw_parts(
                                                                    l53.cast(),
                                                                    len55,
                                                                    len55,
                                                                );
                                                                _rt::string_lift(bytes55)
                                                            };
                                                            V63::Url(e63)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e63 = {
                                                                let l56 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l57 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len58 = l57;
                                                                let bytes58 = _rt::Vec::from_raw_parts(
                                                                    l56.cast(),
                                                                    len58,
                                                                    len58,
                                                                );
                                                                let l59 = i32::from(
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes58),
                                                                    text_type: match l59 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l60 = *base
                                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l61 = *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len62 = l61;
                                                                                let bytes62 = _rt::Vec::from_raw_parts(
                                                                                    l60.cast(),
                                                                                    len62,
                                                                                    len62,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes62),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V63::Inline(e63)
                                                        }
                                                    };
                                                    v63
                                                };
                                                V75::UnstructuredText(e75)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e75 = {
                                                    let l64 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V74;
                                                    let v74 = match l64 {
                                                        0 => {
                                                            let e74 = {
                                                                let l65 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l66 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len67 = l66;
                                                                let bytes67 = _rt::Vec::from_raw_parts(
                                                                    l65.cast(),
                                                                    len67,
                                                                    len67,
                                                                );
                                                                _rt::string_lift(bytes67)
                                                            };
                                                            V74::Url(e74)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e74 = {
                                                                let l68 = *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l69 = *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len70 = l69;
                                                                let l71 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l72 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len73 = l72;
                                                                let bytes73 = _rt::Vec::from_raw_parts(
                                                                    l71.cast(),
                                                                    len73,
                                                                    len73,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l68.cast(), len70, len70),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes73),
                                                                    },
                                                                }
                                                            };
                                                            V74::Inline(e74)
                                                        }
                                                    };
                                                    v74
                                                };
                                                V75::UnstructuredBinary(e75)
                                            }
                                        };
                                        v75
                                    };
                                    result76.push(e76);
                                }
                                _rt::cabi_dealloc(
                                    base76,
                                    len76 * (7 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result76
                            };
                            V154::Tuple(e154)
                        }
                        n => {
                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                            let e154 = {
                                let base153 = arg7;
                                let len153 = arg8;
                                let mut result153 = _rt::Vec::with_capacity(len153);
                                for i in 0..len153 {
                                    let base = base153
                                        .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                    let e153 = {
                                        let l77 = *base.add(0).cast::<*mut u8>();
                                        let l78 = *base
                                            .add(::core::mem::size_of::<*const u8>())
                                            .cast::<usize>();
                                        let len79 = l78;
                                        let bytes79 = _rt::Vec::from_raw_parts(
                                            l77.cast(),
                                            len79,
                                            len79,
                                        );
                                        let l80 = i32::from(
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>(),
                                        );
                                        use super::super::super::super::golem::agent::common::ElementValue as V152;
                                        let v152 = match l80 {
                                            0 => {
                                                let e152 = {
                                                    let l81 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l82 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base128 = l81;
                                                    let len128 = l82;
                                                    let mut result128 = _rt::Vec::with_capacity(len128);
                                                    for i in 0..len128 {
                                                        let base = base128
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        let e128 = {
                                                            let l83 = i32::from(*base.add(0).cast::<u8>());
                                                            use super::super::super::super::golem::rpc::types::WitNode as V127;
                                                            let v127 = match l83 {
                                                                0 => {
                                                                    let e127 = {
                                                                        let l84 = *base.add(8).cast::<*mut u8>();
                                                                        let l85 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len86 = l85;
                                                                        _rt::Vec::from_raw_parts(l84.cast(), len86, len86)
                                                                    };
                                                                    V127::RecordValue(e127)
                                                                }
                                                                1 => {
                                                                    let e127 = {
                                                                        let l87 = *base.add(8).cast::<i32>();
                                                                        let l88 = i32::from(*base.add(12).cast::<u8>());
                                                                        (
                                                                            l87 as u32,
                                                                            match l88 {
                                                                                0 => None,
                                                                                1 => {
                                                                                    let e = {
                                                                                        let l89 = *base.add(16).cast::<i32>();
                                                                                        l89
                                                                                    };
                                                                                    Some(e)
                                                                                }
                                                                                _ => _rt::invalid_enum_discriminant(),
                                                                            },
                                                                        )
                                                                    };
                                                                    V127::VariantValue(e127)
                                                                }
                                                                2 => {
                                                                    let e127 = {
                                                                        let l90 = *base.add(8).cast::<i32>();
                                                                        l90 as u32
                                                                    };
                                                                    V127::EnumValue(e127)
                                                                }
                                                                3 => {
                                                                    let e127 = {
                                                                        let l91 = *base.add(8).cast::<*mut u8>();
                                                                        let l92 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let base94 = l91;
                                                                        let len94 = l92;
                                                                        let mut result94 = _rt::Vec::with_capacity(len94);
                                                                        for i in 0..len94 {
                                                                            let base = base94.add(i * 1);
                                                                            let e94 = {
                                                                                let l93 = i32::from(*base.add(0).cast::<u8>());
                                                                                _rt::bool_lift(l93 as u8)
                                                                            };
                                                                            result94.push(e94);
                                                                        }
                                                                        _rt::cabi_dealloc(base94, len94 * 1, 1);
                                                                        result94
                                                                    };
                                                                    V127::FlagsValue(e127)
                                                                }
                                                                4 => {
                                                                    let e127 = {
                                                                        let l95 = *base.add(8).cast::<*mut u8>();
                                                                        let l96 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len97 = l96;
                                                                        _rt::Vec::from_raw_parts(l95.cast(), len97, len97)
                                                                    };
                                                                    V127::TupleValue(e127)
                                                                }
                                                                5 => {
                                                                    let e127 = {
                                                                        let l98 = *base.add(8).cast::<*mut u8>();
                                                                        let l99 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len100 = l99;
                                                                        _rt::Vec::from_raw_parts(l98.cast(), len100, len100)
                                                                    };
                                                                    V127::ListValue(e127)
                                                                }
                                                                6 => {
                                                                    let e127 = {
                                                                        let l101 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l101 {
                                                                            0 => None,
                                                                            1 => {
                                                                                let e = {
                                                                                    let l102 = *base.add(12).cast::<i32>();
                                                                                    l102
                                                                                };
                                                                                Some(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V127::OptionValue(e127)
                                                                }
                                                                7 => {
                                                                    let e127 = {
                                                                        let l103 = i32::from(*base.add(8).cast::<u8>());
                                                                        match l103 {
                                                                            0 => {
                                                                                let e = {
                                                                                    let l104 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l104 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l105 = *base.add(16).cast::<i32>();
                                                                                                l105
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Ok(e)
                                                                            }
                                                                            1 => {
                                                                                let e = {
                                                                                    let l106 = i32::from(*base.add(12).cast::<u8>());
                                                                                    match l106 {
                                                                                        0 => None,
                                                                                        1 => {
                                                                                            let e = {
                                                                                                let l107 = *base.add(16).cast::<i32>();
                                                                                                l107
                                                                                            };
                                                                                            Some(e)
                                                                                        }
                                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                                    }
                                                                                };
                                                                                Err(e)
                                                                            }
                                                                            _ => _rt::invalid_enum_discriminant(),
                                                                        }
                                                                    };
                                                                    V127::ResultValue(e127)
                                                                }
                                                                8 => {
                                                                    let e127 = {
                                                                        let l108 = i32::from(*base.add(8).cast::<u8>());
                                                                        l108 as u8
                                                                    };
                                                                    V127::PrimU8(e127)
                                                                }
                                                                9 => {
                                                                    let e127 = {
                                                                        let l109 = i32::from(*base.add(8).cast::<u16>());
                                                                        l109 as u16
                                                                    };
                                                                    V127::PrimU16(e127)
                                                                }
                                                                10 => {
                                                                    let e127 = {
                                                                        let l110 = *base.add(8).cast::<i32>();
                                                                        l110 as u32
                                                                    };
                                                                    V127::PrimU32(e127)
                                                                }
                                                                11 => {
                                                                    let e127 = {
                                                                        let l111 = *base.add(8).cast::<i64>();
                                                                        l111 as u64
                                                                    };
                                                                    V127::PrimU64(e127)
                                                                }
                                                                12 => {
                                                                    let e127 = {
                                                                        let l112 = i32::from(*base.add(8).cast::<i8>());
                                                                        l112 as i8
                                                                    };
                                                                    V127::PrimS8(e127)
                                                                }
                                                                13 => {
                                                                    let e127 = {
                                                                        let l113 = i32::from(*base.add(8).cast::<i16>());
                                                                        l113 as i16
                                                                    };
                                                                    V127::PrimS16(e127)
                                                                }
                                                                14 => {
                                                                    let e127 = {
                                                                        let l114 = *base.add(8).cast::<i32>();
                                                                        l114
                                                                    };
                                                                    V127::PrimS32(e127)
                                                                }
                                                                15 => {
                                                                    let e127 = {
                                                                        let l115 = *base.add(8).cast::<i64>();
                                                                        l115
                                                                    };
                                                                    V127::PrimS64(e127)
                                                                }
                                                                16 => {
                                                                    let e127 = {
                                                                        let l116 = *base.add(8).cast::<f32>();
                                                                        l116
                                                                    };
                                                                    V127::PrimFloat32(e127)
                                                                }
                                                                17 => {
                                                                    let e127 = {
                                                                        let l117 = *base.add(8).cast::<f64>();
                                                                        l117
                                                                    };
                                                                    V127::PrimFloat64(e127)
                                                                }
                                                                18 => {
                                                                    let e127 = {
                                                                        let l118 = *base.add(8).cast::<i32>();
                                                                        _rt::char_lift(l118 as u32)
                                                                    };
                                                                    V127::PrimChar(e127)
                                                                }
                                                                19 => {
                                                                    let e127 = {
                                                                        let l119 = i32::from(*base.add(8).cast::<u8>());
                                                                        _rt::bool_lift(l119 as u8)
                                                                    };
                                                                    V127::PrimBool(e127)
                                                                }
                                                                20 => {
                                                                    let e127 = {
                                                                        let l120 = *base.add(8).cast::<*mut u8>();
                                                                        let l121 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len122 = l121;
                                                                        let bytes122 = _rt::Vec::from_raw_parts(
                                                                            l120.cast(),
                                                                            len122,
                                                                            len122,
                                                                        );
                                                                        _rt::string_lift(bytes122)
                                                                    };
                                                                    V127::PrimString(e127)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(n, 21, "invalid enum discriminant");
                                                                    let e127 = {
                                                                        let l123 = *base.add(8).cast::<*mut u8>();
                                                                        let l124 = *base
                                                                            .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<usize>();
                                                                        let len125 = l124;
                                                                        let bytes125 = _rt::Vec::from_raw_parts(
                                                                            l123.cast(),
                                                                            len125,
                                                                            len125,
                                                                        );
                                                                        let l126 = *base
                                                                            .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<i64>();
                                                                        (
                                                                            super::super::super::super::golem::rpc::types::Uri {
                                                                                value: _rt::string_lift(bytes125),
                                                                            },
                                                                            l126 as u64,
                                                                        )
                                                                    };
                                                                    V127::Handle(e127)
                                                                }
                                                            };
                                                            v127
                                                        };
                                                        result128.push(e128);
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base128,
                                                        len128 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: result128,
                                                    }
                                                };
                                                V152::ComponentModel(e152)
                                            }
                                            1 => {
                                                let e152 = {
                                                    let l129 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::TextReference as V140;
                                                    let v140 = match l129 {
                                                        0 => {
                                                            let e140 = {
                                                                let l130 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l131 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len132 = l131;
                                                                let bytes132 = _rt::Vec::from_raw_parts(
                                                                    l130.cast(),
                                                                    len132,
                                                                    len132,
                                                                );
                                                                _rt::string_lift(bytes132)
                                                            };
                                                            V140::Url(e140)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e140 = {
                                                                let l133 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l134 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len135 = l134;
                                                                let bytes135 = _rt::Vec::from_raw_parts(
                                                                    l133.cast(),
                                                                    len135,
                                                                    len135,
                                                                );
                                                                let l136 = i32::from(
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>(),
                                                                );
                                                                super::super::super::super::golem::agent::common::TextSource {
                                                                    data: _rt::string_lift(bytes135),
                                                                    text_type: match l136 {
                                                                        0 => None,
                                                                        1 => {
                                                                            let e = {
                                                                                let l137 = *base
                                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<*mut u8>();
                                                                                let l138 = *base
                                                                                    .add(8 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<usize>();
                                                                                let len139 = l138;
                                                                                let bytes139 = _rt::Vec::from_raw_parts(
                                                                                    l137.cast(),
                                                                                    len139,
                                                                                    len139,
                                                                                );
                                                                                super::super::super::super::golem::agent::common::TextType {
                                                                                    language_code: _rt::string_lift(bytes139),
                                                                                }
                                                                            };
                                                                            Some(e)
                                                                        }
                                                                        _ => _rt::invalid_enum_discriminant(),
                                                                    },
                                                                }
                                                            };
                                                            V140::Inline(e140)
                                                        }
                                                    };
                                                    v140
                                                };
                                                V152::UnstructuredText(e152)
                                            }
                                            n => {
                                                debug_assert_eq!(n, 2, "invalid enum discriminant");
                                                let e152 = {
                                                    let l141 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V151;
                                                    let v151 = match l141 {
                                                        0 => {
                                                            let e151 = {
                                                                let l142 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l143 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len144 = l143;
                                                                let bytes144 = _rt::Vec::from_raw_parts(
                                                                    l142.cast(),
                                                                    len144,
                                                                    len144,
                                                                );
                                                                _rt::string_lift(bytes144)
                                                            };
                                                            V151::Url(e151)
                                                        }
                                                        n => {
                                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                                            let e151 = {
                                                                let l145 = *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l146 = *base
                                                                    .add(5 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len147 = l146;
                                                                let l148 = *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<*mut u8>();
                                                                let l149 = *base
                                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<usize>();
                                                                let len150 = l149;
                                                                let bytes150 = _rt::Vec::from_raw_parts(
                                                                    l148.cast(),
                                                                    len150,
                                                                    len150,
                                                                );
                                                                super::super::super::super::golem::agent::common::BinarySource {
                                                                    data: _rt::Vec::from_raw_parts(l145.cast(), len147, len147),
                                                                    binary_type: super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: _rt::string_lift(bytes150),
                                                                    },
                                                                }
                                                            };
                                                            V151::Inline(e151)
                                                        }
                                                    };
                                                    v151
                                                };
                                                V152::UnstructuredBinary(e152)
                                            }
                                        };
                                        (_rt::string_lift(bytes79), v152)
                                    };
                                    result153.push(e153);
                                }
                                _rt::cabi_dealloc(
                                    base153,
                                    len153 * (9 * ::core::mem::size_of::<*const u8>()),
                                    ::core::mem::size_of::<*const u8>(),
                                );
                                result153
                            };
                            V154::Multimodal(e154)
                        }
                    };
                    let result155 = T::invoke_agent(
                        _rt::string_lift(bytes0),
                        _rt::string_lift(bytes1),
                        _rt::string_lift(bytes2),
                        v154,
                    );
                    let ptr156 = (&raw mut _RET_AREA.0).cast::<u8>();
                    match result155 {
                        Ok(e) => {
                            *ptr156.add(0).cast::<u8>() = (0i32) as u8;
                            use super::super::super::super::golem::agent::common::DataValue as V211;
                            match e {
                                V211::Tuple(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec182 = e;
                                    let len182 = vec182.len();
                                    let layout182 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec182.len() * (7 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result182 = if layout182.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout182).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout182);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec182.into_iter().enumerate() {
                                        let base = result182
                                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            use super::super::super::super::golem::agent::common::ElementValue as V181;
                                            match e {
                                                V181::ComponentModel(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: nodes157,
                                                    } = e;
                                                    let vec168 = nodes157;
                                                    let len168 = vec168.len();
                                                    let layout168 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec168.len()
                                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result168 = if layout168.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout168).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout168);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec168.into_iter().enumerate() {
                                                        let base = result168
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            use super::super::super::super::golem::rpc::types::WitNode as V167;
                                                            match e {
                                                                V167::RecordValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec158 = (e).into_boxed_slice();
                                                                    let ptr158 = vec158.as_ptr().cast::<u8>();
                                                                    let len158 = vec158.len();
                                                                    ::core::mem::forget(vec158);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len158;
                                                                    *base.add(8).cast::<*mut u8>() = ptr158.cast_mut();
                                                                }
                                                                V167::VariantValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let (t159_0, t159_1) = e;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t159_0);
                                                                    match t159_1 {
                                                                        Some(e) => {
                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V167::EnumValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V167::FlagsValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    let vec160 = e;
                                                                    let len160 = vec160.len();
                                                                    let layout160 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec160.len() * 1,
                                                                        1,
                                                                    );
                                                                    let result160 = if layout160.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout160).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout160);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec160.into_iter().enumerate() {
                                                                        let base = result160.add(i * 1);
                                                                        {
                                                                            *base.add(0).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len160;
                                                                    *base.add(8).cast::<*mut u8>() = result160;
                                                                }
                                                                V167::TupleValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                    let vec161 = (e).into_boxed_slice();
                                                                    let ptr161 = vec161.as_ptr().cast::<u8>();
                                                                    let len161 = vec161.len();
                                                                    ::core::mem::forget(vec161);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len161;
                                                                    *base.add(8).cast::<*mut u8>() = ptr161.cast_mut();
                                                                }
                                                                V167::ListValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec162 = (e).into_boxed_slice();
                                                                    let ptr162 = vec162.as_ptr().cast::<u8>();
                                                                    let len162 = vec162.len();
                                                                    ::core::mem::forget(vec162);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len162;
                                                                    *base.add(8).cast::<*mut u8>() = ptr162.cast_mut();
                                                                }
                                                                V167::OptionValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    match e {
                                                                        Some(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V167::ResultValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    match e {
                                                                        Ok(e) => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        Err(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    };
                                                                }
                                                                V167::PrimU8(e) => {
                                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V167::PrimU16(e) => {
                                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V167::PrimU32(e) => {
                                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V167::PrimU64(e) => {
                                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V167::PrimS8(e) => {
                                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V167::PrimS16(e) => {
                                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V167::PrimS32(e) => {
                                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V167::PrimS64(e) => {
                                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V167::PrimFloat32(e) => {
                                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                }
                                                                V167::PrimFloat64(e) => {
                                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V167::PrimChar(e) => {
                                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V167::PrimBool(e) => {
                                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V167::PrimString(e) => {
                                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                    let vec163 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr163 = vec163.as_ptr().cast::<u8>();
                                                                    let len163 = vec163.len();
                                                                    ::core::mem::forget(vec163);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len163;
                                                                    *base.add(8).cast::<*mut u8>() = ptr163.cast_mut();
                                                                }
                                                                V167::Handle(e) => {
                                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                    let (t164_0, t164_1) = e;
                                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                                        value: value165,
                                                                    } = t164_0;
                                                                    let vec166 = (value165.into_bytes()).into_boxed_slice();
                                                                    let ptr166 = vec166.as_ptr().cast::<u8>();
                                                                    let len166 = vec166.len();
                                                                    ::core::mem::forget(vec166);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len166;
                                                                    *base.add(8).cast::<*mut u8>() = ptr166.cast_mut();
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t164_1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len168;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result168;
                                                }
                                                V181::UnstructuredText(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::agent::common::TextReference as V174;
                                                    match e {
                                                        V174::Url(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec169 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr169 = vec169.as_ptr().cast::<u8>();
                                                            let len169 = vec169.len();
                                                            ::core::mem::forget(vec169);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len169;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr169.cast_mut();
                                                        }
                                                        V174::Inline(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextSource {
                                                                data: data170,
                                                                text_type: text_type170,
                                                            } = e;
                                                            let vec171 = (data170.into_bytes()).into_boxed_slice();
                                                            let ptr171 = vec171.as_ptr().cast::<u8>();
                                                            let len171 = vec171.len();
                                                            ::core::mem::forget(vec171);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len171;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr171.cast_mut();
                                                            match text_type170 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code172,
                                                                    } = e;
                                                                    let vec173 = (language_code172.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr173 = vec173.as_ptr().cast::<u8>();
                                                                    let len173 = vec173.len();
                                                                    ::core::mem::forget(vec173);
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len173;
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr173.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                                V181::UnstructuredBinary(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V180;
                                                    match e {
                                                        V180::Url(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec175 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr175 = vec175.as_ptr().cast::<u8>();
                                                            let len175 = vec175.len();
                                                            ::core::mem::forget(vec175);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len175;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr175.cast_mut();
                                                        }
                                                        V180::Inline(e) => {
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinarySource {
                                                                data: data176,
                                                                binary_type: binary_type176,
                                                            } = e;
                                                            let vec177 = (data176).into_boxed_slice();
                                                            let ptr177 = vec177.as_ptr().cast::<u8>();
                                                            let len177 = vec177.len();
                                                            ::core::mem::forget(vec177);
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len177;
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr177.cast_mut();
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type178,
                                                            } = binary_type176;
                                                            let vec179 = (mime_type178.into_bytes()).into_boxed_slice();
                                                            let ptr179 = vec179.as_ptr().cast::<u8>();
                                                            let len179 = vec179.len();
                                                            ::core::mem::forget(vec179);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len179;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr179.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len182;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result182;
                                }
                                V211::Multimodal(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec210 = e;
                                    let len210 = vec210.len();
                                    let layout210 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec210.len() * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result210 = if layout210.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout210).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout210);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec210.into_iter().enumerate() {
                                        let base = result210
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t183_0, t183_1) = e;
                                            let vec184 = (t183_0.into_bytes()).into_boxed_slice();
                                            let ptr184 = vec184.as_ptr().cast::<u8>();
                                            let len184 = vec184.len();
                                            ::core::mem::forget(vec184);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len184;
                                            *base.add(0).cast::<*mut u8>() = ptr184.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementValue as V209;
                                            match t183_1 {
                                                V209::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitValue {
                                                        nodes: nodes185,
                                                    } = e;
                                                    let vec196 = nodes185;
                                                    let len196 = vec196.len();
                                                    let layout196 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec196.len()
                                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result196 = if layout196.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout196).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout196);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec196.into_iter().enumerate() {
                                                        let base = result196
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            use super::super::super::super::golem::rpc::types::WitNode as V195;
                                                            match e {
                                                                V195::RecordValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                    let vec186 = (e).into_boxed_slice();
                                                                    let ptr186 = vec186.as_ptr().cast::<u8>();
                                                                    let len186 = vec186.len();
                                                                    ::core::mem::forget(vec186);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len186;
                                                                    *base.add(8).cast::<*mut u8>() = ptr186.cast_mut();
                                                                }
                                                                V195::VariantValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let (t187_0, t187_1) = e;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t187_0);
                                                                    match t187_1 {
                                                                        Some(e) => {
                                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V195::EnumValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V195::FlagsValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                                    let vec188 = e;
                                                                    let len188 = vec188.len();
                                                                    let layout188 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec188.len() * 1,
                                                                        1,
                                                                    );
                                                                    let result188 = if layout188.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout188).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout188);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec188.into_iter().enumerate() {
                                                                        let base = result188.add(i * 1);
                                                                        {
                                                                            *base.add(0).cast::<u8>() = (match e {
                                                                                true => 1,
                                                                                false => 0,
                                                                            }) as u8;
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len188;
                                                                    *base.add(8).cast::<*mut u8>() = result188;
                                                                }
                                                                V195::TupleValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                                    let vec189 = (e).into_boxed_slice();
                                                                    let ptr189 = vec189.as_ptr().cast::<u8>();
                                                                    let len189 = vec189.len();
                                                                    ::core::mem::forget(vec189);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len189;
                                                                    *base.add(8).cast::<*mut u8>() = ptr189.cast_mut();
                                                                }
                                                                V195::ListValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                                    let vec190 = (e).into_boxed_slice();
                                                                    let ptr190 = vec190.as_ptr().cast::<u8>();
                                                                    let len190 = vec190.len();
                                                                    ::core::mem::forget(vec190);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len190;
                                                                    *base.add(8).cast::<*mut u8>() = ptr190.cast_mut();
                                                                }
                                                                V195::OptionValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                                    match e {
                                                                        Some(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V195::ResultValue(e) => {
                                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                                    match e {
                                                                        Ok(e) => {
                                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        Err(e) => {
                                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                                            match e {
                                                                                Some(e) => {
                                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    };
                                                                }
                                                                V195::PrimU8(e) => {
                                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V195::PrimU16(e) => {
                                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V195::PrimU32(e) => {
                                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V195::PrimU64(e) => {
                                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V195::PrimS8(e) => {
                                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                                }
                                                                V195::PrimS16(e) => {
                                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                                }
                                                                V195::PrimS32(e) => {
                                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V195::PrimS64(e) => {
                                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                                }
                                                                V195::PrimFloat32(e) => {
                                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                                }
                                                                V195::PrimFloat64(e) => {
                                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                                }
                                                                V195::PrimChar(e) => {
                                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V195::PrimBool(e) => {
                                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                                    *base.add(8).cast::<u8>() = (match e {
                                                                        true => 1,
                                                                        false => 0,
                                                                    }) as u8;
                                                                }
                                                                V195::PrimString(e) => {
                                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                                    let vec191 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr191 = vec191.as_ptr().cast::<u8>();
                                                                    let len191 = vec191.len();
                                                                    ::core::mem::forget(vec191);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len191;
                                                                    *base.add(8).cast::<*mut u8>() = ptr191.cast_mut();
                                                                }
                                                                V195::Handle(e) => {
                                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                                    let (t192_0, t192_1) = e;
                                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                                        value: value193,
                                                                    } = t192_0;
                                                                    let vec194 = (value193.into_bytes()).into_boxed_slice();
                                                                    let ptr194 = vec194.as_ptr().cast::<u8>();
                                                                    let len194 = vec194.len();
                                                                    ::core::mem::forget(vec194);
                                                                    *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len194;
                                                                    *base.add(8).cast::<*mut u8>() = ptr194.cast_mut();
                                                                    *base
                                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t192_1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len196;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result196;
                                                }
                                                V209::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    use super::super::super::super::golem::agent::common::TextReference as V202;
                                                    match e {
                                                        V202::Url(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec197 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr197 = vec197.as_ptr().cast::<u8>();
                                                            let len197 = vec197.len();
                                                            ::core::mem::forget(vec197);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len197;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr197.cast_mut();
                                                        }
                                                        V202::Inline(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextSource {
                                                                data: data198,
                                                                text_type: text_type198,
                                                            } = e;
                                                            let vec199 = (data198.into_bytes()).into_boxed_slice();
                                                            let ptr199 = vec199.as_ptr().cast::<u8>();
                                                            let len199 = vec199.len();
                                                            ::core::mem::forget(vec199);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len199;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr199.cast_mut();
                                                            match text_type198 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code200,
                                                                    } = e;
                                                                    let vec201 = (language_code200.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr201 = vec201.as_ptr().cast::<u8>();
                                                                    let len201 = vec201.len();
                                                                    ::core::mem::forget(vec201);
                                                                    *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len201;
                                                                    *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr201.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                                V209::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    use super::super::super::super::golem::agent::common::BinaryReference as V208;
                                                    match e {
                                                        V208::Url(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let vec203 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr203 = vec203.as_ptr().cast::<u8>();
                                                            let len203 = vec203.len();
                                                            ::core::mem::forget(vec203);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len203;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr203.cast_mut();
                                                        }
                                                        V208::Inline(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinarySource {
                                                                data: data204,
                                                                binary_type: binary_type204,
                                                            } = e;
                                                            let vec205 = (data204).into_boxed_slice();
                                                            let ptr205 = vec205.as_ptr().cast::<u8>();
                                                            let len205 = vec205.len();
                                                            ::core::mem::forget(vec205);
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len205;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr205.cast_mut();
                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                mime_type: mime_type206,
                                                            } = binary_type204;
                                                            let vec207 = (mime_type206.into_bytes()).into_boxed_slice();
                                                            let ptr207 = vec207.as_ptr().cast::<u8>();
                                                            let len207 = vec207.len();
                                                            ::core::mem::forget(vec207);
                                                            *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len207;
                                                            *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = ptr207.cast_mut();
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len210;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result210;
                                }
                            }
                        }
                        Err(e) => {
                            *ptr156.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::golem::agent::common::AgentError as V248;
                            match e {
                                V248::InvalidInput(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec212 = (e.into_bytes()).into_boxed_slice();
                                    let ptr212 = vec212.as_ptr().cast::<u8>();
                                    let len212 = vec212.len();
                                    ::core::mem::forget(vec212);
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len212;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr212.cast_mut();
                                }
                                V248::InvalidMethod(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec213 = (e.into_bytes()).into_boxed_slice();
                                    let ptr213 = vec213.as_ptr().cast::<u8>();
                                    let len213 = vec213.len();
                                    ::core::mem::forget(vec213);
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len213;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr213.cast_mut();
                                }
                                V248::InvalidType(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (2i32) as u8;
                                    let vec214 = (e.into_bytes()).into_boxed_slice();
                                    let ptr214 = vec214.as_ptr().cast::<u8>();
                                    let len214 = vec214.len();
                                    ::core::mem::forget(vec214);
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len214;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr214.cast_mut();
                                }
                                V248::InvalidAgentId(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (3i32) as u8;
                                    let vec215 = (e.into_bytes()).into_boxed_slice();
                                    let ptr215 = vec215.as_ptr().cast::<u8>();
                                    let len215 = vec215.len();
                                    ::core::mem::forget(vec215);
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len215;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr215.cast_mut();
                                }
                                V248::CustomError(e) => {
                                    *ptr156
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (4i32) as u8;
                                    let super::super::super::super::golem::rpc::types::ValueAndType {
                                        value: value216,
                                        typ: typ216,
                                    } = e;
                                    let super::super::super::super::golem::rpc::types::WitValue {
                                        nodes: nodes217,
                                    } = value216;
                                    let vec228 = nodes217;
                                    let len228 = vec228.len();
                                    let layout228 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec228.len()
                                            * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result228 = if layout228.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout228).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout228);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec228.into_iter().enumerate() {
                                        let base = result228
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            use super::super::super::super::golem::rpc::types::WitNode as V227;
                                            match e {
                                                V227::RecordValue(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let vec218 = (e).into_boxed_slice();
                                                    let ptr218 = vec218.as_ptr().cast::<u8>();
                                                    let len218 = vec218.len();
                                                    ::core::mem::forget(vec218);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len218;
                                                    *base.add(8).cast::<*mut u8>() = ptr218.cast_mut();
                                                }
                                                V227::VariantValue(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let (t219_0, t219_1) = e;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(t219_0);
                                                    match t219_1 {
                                                        Some(e) => {
                                                            *base.add(12).cast::<u8>() = (1i32) as u8;
                                                            *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base.add(12).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V227::EnumValue(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V227::FlagsValue(e) => {
                                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                                    let vec220 = e;
                                                    let len220 = vec220.len();
                                                    let layout220 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec220.len() * 1,
                                                        1,
                                                    );
                                                    let result220 = if layout220.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout220).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout220);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec220.into_iter().enumerate() {
                                                        let base = result220.add(i * 1);
                                                        {
                                                            *base.add(0).cast::<u8>() = (match e {
                                                                true => 1,
                                                                false => 0,
                                                            }) as u8;
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len220;
                                                    *base.add(8).cast::<*mut u8>() = result220;
                                                }
                                                V227::TupleValue(e) => {
                                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                                    let vec221 = (e).into_boxed_slice();
                                                    let ptr221 = vec221.as_ptr().cast::<u8>();
                                                    let len221 = vec221.len();
                                                    ::core::mem::forget(vec221);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len221;
                                                    *base.add(8).cast::<*mut u8>() = ptr221.cast_mut();
                                                }
                                                V227::ListValue(e) => {
                                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                                    let vec222 = (e).into_boxed_slice();
                                                    let ptr222 = vec222.as_ptr().cast::<u8>();
                                                    let len222 = vec222.len();
                                                    ::core::mem::forget(vec222);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len222;
                                                    *base.add(8).cast::<*mut u8>() = ptr222.cast_mut();
                                                }
                                                V227::OptionValue(e) => {
                                                    *base.add(0).cast::<u8>() = (6i32) as u8;
                                                    match e {
                                                        Some(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            *base.add(12).cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V227::ResultValue(e) => {
                                                    *base.add(0).cast::<u8>() = (7i32) as u8;
                                                    match e {
                                                        Ok(e) => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                            match e {
                                                                Some(e) => {
                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        Err(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            match e {
                                                                Some(e) => {
                                                                    *base.add(12).cast::<u8>() = (1i32) as u8;
                                                                    *base.add(16).cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base.add(12).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    };
                                                }
                                                V227::PrimU8(e) => {
                                                    *base.add(0).cast::<u8>() = (8i32) as u8;
                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V227::PrimU16(e) => {
                                                    *base.add(0).cast::<u8>() = (9i32) as u8;
                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V227::PrimU32(e) => {
                                                    *base.add(0).cast::<u8>() = (10i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V227::PrimU64(e) => {
                                                    *base.add(0).cast::<u8>() = (11i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V227::PrimS8(e) => {
                                                    *base.add(0).cast::<u8>() = (12i32) as u8;
                                                    *base.add(8).cast::<u8>() = (_rt::as_i32(e)) as u8;
                                                }
                                                V227::PrimS16(e) => {
                                                    *base.add(0).cast::<u8>() = (13i32) as u8;
                                                    *base.add(8).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                                }
                                                V227::PrimS32(e) => {
                                                    *base.add(0).cast::<u8>() = (14i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V227::PrimS64(e) => {
                                                    *base.add(0).cast::<u8>() = (15i32) as u8;
                                                    *base.add(8).cast::<i64>() = _rt::as_i64(e);
                                                }
                                                V227::PrimFloat32(e) => {
                                                    *base.add(0).cast::<u8>() = (16i32) as u8;
                                                    *base.add(8).cast::<f32>() = _rt::as_f32(e);
                                                }
                                                V227::PrimFloat64(e) => {
                                                    *base.add(0).cast::<u8>() = (17i32) as u8;
                                                    *base.add(8).cast::<f64>() = _rt::as_f64(e);
                                                }
                                                V227::PrimChar(e) => {
                                                    *base.add(0).cast::<u8>() = (18i32) as u8;
                                                    *base.add(8).cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V227::PrimBool(e) => {
                                                    *base.add(0).cast::<u8>() = (19i32) as u8;
                                                    *base.add(8).cast::<u8>() = (match e {
                                                        true => 1,
                                                        false => 0,
                                                    }) as u8;
                                                }
                                                V227::PrimString(e) => {
                                                    *base.add(0).cast::<u8>() = (20i32) as u8;
                                                    let vec223 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr223 = vec223.as_ptr().cast::<u8>();
                                                    let len223 = vec223.len();
                                                    ::core::mem::forget(vec223);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len223;
                                                    *base.add(8).cast::<*mut u8>() = ptr223.cast_mut();
                                                }
                                                V227::Handle(e) => {
                                                    *base.add(0).cast::<u8>() = (21i32) as u8;
                                                    let (t224_0, t224_1) = e;
                                                    let super::super::super::super::golem::rpc::types::Uri {
                                                        value: value225,
                                                    } = t224_0;
                                                    let vec226 = (value225.into_bytes()).into_boxed_slice();
                                                    let ptr226 = vec226.as_ptr().cast::<u8>();
                                                    let len226 = vec226.len();
                                                    ::core::mem::forget(vec226);
                                                    *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len226;
                                                    *base.add(8).cast::<*mut u8>() = ptr226.cast_mut();
                                                    *base
                                                        .add(8 + 2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(t224_1);
                                                }
                                            }
                                        }
                                    }
                                    *ptr156
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len228;
                                    *ptr156
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result228;
                                    let super::super::super::super::golem::rpc::types::WitType {
                                        nodes: nodes229,
                                    } = typ216;
                                    let vec247 = nodes229;
                                    let len247 = vec247.len();
                                    let layout247 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec247.len()
                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let result247 = if layout247.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout247).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout247);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec247.into_iter().enumerate() {
                                        let base = result247
                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                name: name230,
                                                owner: owner230,
                                                type_: type_230,
                                            } = e;
                                            match name230 {
                                                Some(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let vec231 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr231 = vec231.as_ptr().cast::<u8>();
                                                    let len231 = vec231.len();
                                                    ::core::mem::forget(vec231);
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len231;
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr231.cast_mut();
                                                }
                                                None => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            match owner230 {
                                                Some(e) => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec232 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr232 = vec232.as_ptr().cast::<u8>();
                                                    let len232 = vec232.len();
                                                    ::core::mem::forget(vec232);
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len232;
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr232.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V246;
                                            match type_230 {
                                                V246::RecordType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec235 = e;
                                                    let len235 = vec235.len();
                                                    let layout235 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec235.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result235 = if layout235.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout235).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout235);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec235.into_iter().enumerate() {
                                                        let base = result235
                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t233_0, t233_1) = e;
                                                            let vec234 = (t233_0.into_bytes()).into_boxed_slice();
                                                            let ptr234 = vec234.as_ptr().cast::<u8>();
                                                            let len234 = vec234.len();
                                                            ::core::mem::forget(vec234);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len234;
                                                            *base.add(0).cast::<*mut u8>() = ptr234.cast_mut();
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(t233_1);
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len235;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result235;
                                                }
                                                V246::VariantType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec238 = e;
                                                    let len238 = vec238.len();
                                                    let layout238 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec238.len()
                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result238 = if layout238.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout238).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout238);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec238.into_iter().enumerate() {
                                                        let base = result238
                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t236_0, t236_1) = e;
                                                            let vec237 = (t236_0.into_bytes()).into_boxed_slice();
                                                            let ptr237 = vec237.as_ptr().cast::<u8>();
                                                            let len237 = vec237.len();
                                                            ::core::mem::forget(vec237);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len237;
                                                            *base.add(0).cast::<*mut u8>() = ptr237.cast_mut();
                                                            match t236_1 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    *base
                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len238;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result238;
                                                }
                                                V246::EnumType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let vec240 = e;
                                                    let len240 = vec240.len();
                                                    let layout240 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec240.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result240 = if layout240.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout240).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout240);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec240.into_iter().enumerate() {
                                                        let base = result240
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let vec239 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr239 = vec239.as_ptr().cast::<u8>();
                                                            let len239 = vec239.len();
                                                            ::core::mem::forget(vec239);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len239;
                                                            *base.add(0).cast::<*mut u8>() = ptr239.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len240;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result240;
                                                }
                                                V246::FlagsType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (3i32) as u8;
                                                    let vec242 = e;
                                                    let len242 = vec242.len();
                                                    let layout242 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec242.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result242 = if layout242.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout242).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout242);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec242.into_iter().enumerate() {
                                                        let base = result242
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let vec241 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr241 = vec241.as_ptr().cast::<u8>();
                                                            let len241 = vec241.len();
                                                            ::core::mem::forget(vec241);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len241;
                                                            *base.add(0).cast::<*mut u8>() = ptr241.cast_mut();
                                                        }
                                                    }
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len242;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result242;
                                                }
                                                V246::TupleType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (4i32) as u8;
                                                    let vec243 = (e).into_boxed_slice();
                                                    let ptr243 = vec243.as_ptr().cast::<u8>();
                                                    let len243 = vec243.len();
                                                    ::core::mem::forget(vec243);
                                                    *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len243;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr243.cast_mut();
                                                }
                                                V246::ListType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (5i32) as u8;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V246::OptionType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (6i32) as u8;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i32>() = _rt::as_i32(e);
                                                }
                                                V246::ResultType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (7i32) as u8;
                                                    let (t244_0, t244_1) = e;
                                                    match t244_0 {
                                                        Some(e) => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                    match t244_1 {
                                                        Some(e) => {
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            *base
                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<i32>() = _rt::as_i32(e);
                                                        }
                                                        None => {
                                                            *base
                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V246::PrimU8Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (8i32) as u8;
                                                }
                                                V246::PrimU16Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (9i32) as u8;
                                                }
                                                V246::PrimU32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (10i32) as u8;
                                                }
                                                V246::PrimU64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (11i32) as u8;
                                                }
                                                V246::PrimS8Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (12i32) as u8;
                                                }
                                                V246::PrimS16Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (13i32) as u8;
                                                }
                                                V246::PrimS32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (14i32) as u8;
                                                }
                                                V246::PrimS64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (15i32) as u8;
                                                }
                                                V246::PrimF32Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (16i32) as u8;
                                                }
                                                V246::PrimF64Type => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (17i32) as u8;
                                                }
                                                V246::PrimCharType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (18i32) as u8;
                                                }
                                                V246::PrimBoolType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (19i32) as u8;
                                                }
                                                V246::PrimStringType => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (20i32) as u8;
                                                }
                                                V246::HandleType(e) => {
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (21i32) as u8;
                                                    let (t245_0, t245_1) = e;
                                                    *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<i64>() = _rt::as_i64(t245_0);
                                                    *base
                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (t245_1.clone() as i32) as u8;
                                                }
                                            }
                                        }
                                    }
                                    *ptr156
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len247;
                                    *ptr156
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result247;
                                }
                            }
                        }
                    };
                    ptr156
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_invoke_agent<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l1 {
                                0 => {
                                    let l2 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l3 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base41 = l2;
                                    let len41 = l3;
                                    for i in 0..len41 {
                                        let base = base41
                                            .add(i * (7 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l4 = i32::from(*base.add(0).cast::<u8>());
                                            match l4 {
                                                0 => {
                                                    let l5 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l6 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base24 = l5;
                                                    let len24 = l6;
                                                    for i in 0..len24 {
                                                        let base = base24
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l7 = i32::from(*base.add(0).cast::<u8>());
                                                            match l7 {
                                                                0 => {
                                                                    let l8 = *base.add(8).cast::<*mut u8>();
                                                                    let l9 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base10 = l8;
                                                                    let len10 = l9;
                                                                    _rt::cabi_dealloc(base10, len10 * 4, 4);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {
                                                                    let l11 = *base.add(8).cast::<*mut u8>();
                                                                    let l12 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base13 = l11;
                                                                    let len13 = l12;
                                                                    _rt::cabi_dealloc(base13, len13 * 1, 1);
                                                                }
                                                                4 => {
                                                                    let l14 = *base.add(8).cast::<*mut u8>();
                                                                    let l15 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base16 = l14;
                                                                    let len16 = l15;
                                                                    _rt::cabi_dealloc(base16, len16 * 4, 4);
                                                                }
                                                                5 => {
                                                                    let l17 = *base.add(8).cast::<*mut u8>();
                                                                    let l18 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base19 = l17;
                                                                    let len19 = l18;
                                                                    _rt::cabi_dealloc(base19, len19 * 4, 4);
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {
                                                                    let l20 = *base.add(8).cast::<*mut u8>();
                                                                    let l21 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l20, l21, 1);
                                                                }
                                                                _ => {
                                                                    let l22 = *base.add(8).cast::<*mut u8>();
                                                                    let l23 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l22, l23, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base24,
                                                        len24 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l25 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    match l25 {
                                                        0 => {
                                                            let l26 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l27 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l26, l27, 1);
                                                        }
                                                        _ => {
                                                            let l28 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l29 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l28, l29, 1);
                                                            let l30 = i32::from(
                                                                *base
                                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l30 {
                                                                0 => {}
                                                                _ => {
                                                                    let l31 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l32 = *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l31, l32, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l33 = i32::from(
                                                        *base.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                                                    );
                                                    match l33 {
                                                        0 => {
                                                            let l34 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l35 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l34, l35, 1);
                                                        }
                                                        _ => {
                                                            let l36 = *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l37 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base38 = l36;
                                                            let len38 = l37;
                                                            _rt::cabi_dealloc(base38, len38 * 1, 1);
                                                            let l39 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l40 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l39, l40, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base41,
                                        len41 * (7 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l42 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l43 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base83 = l42;
                                    let len83 = l43;
                                    for i in 0..len83 {
                                        let base = base83
                                            .add(i * (9 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l44 = *base.add(0).cast::<*mut u8>();
                                            let l45 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l44, l45, 1);
                                            let l46 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l46 {
                                                0 => {
                                                    let l47 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l48 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base66 = l47;
                                                    let len66 = l48;
                                                    for i in 0..len66 {
                                                        let base = base66
                                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l49 = i32::from(*base.add(0).cast::<u8>());
                                                            match l49 {
                                                                0 => {
                                                                    let l50 = *base.add(8).cast::<*mut u8>();
                                                                    let l51 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base52 = l50;
                                                                    let len52 = l51;
                                                                    _rt::cabi_dealloc(base52, len52 * 4, 4);
                                                                }
                                                                1 => {}
                                                                2 => {}
                                                                3 => {
                                                                    let l53 = *base.add(8).cast::<*mut u8>();
                                                                    let l54 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base55 = l53;
                                                                    let len55 = l54;
                                                                    _rt::cabi_dealloc(base55, len55 * 1, 1);
                                                                }
                                                                4 => {
                                                                    let l56 = *base.add(8).cast::<*mut u8>();
                                                                    let l57 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base58 = l56;
                                                                    let len58 = l57;
                                                                    _rt::cabi_dealloc(base58, len58 * 4, 4);
                                                                }
                                                                5 => {
                                                                    let l59 = *base.add(8).cast::<*mut u8>();
                                                                    let l60 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base61 = l59;
                                                                    let len61 = l60;
                                                                    _rt::cabi_dealloc(base61, len61 * 4, 4);
                                                                }
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {
                                                                    let l62 = *base.add(8).cast::<*mut u8>();
                                                                    let l63 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                }
                                                                _ => {
                                                                    let l64 = *base.add(8).cast::<*mut u8>();
                                                                    let l65 = *base
                                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l64, l65, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base66,
                                                        len66 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l67 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l67 {
                                                        0 => {
                                                            let l68 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l69 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l68, l69, 1);
                                                        }
                                                        _ => {
                                                            let l70 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l71 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l70, l71, 1);
                                                            let l72 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l72 {
                                                                0 => {}
                                                                _ => {
                                                                    let l73 = *base
                                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l74 = *base
                                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l73, l74, 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l75 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l75 {
                                                        0 => {
                                                            let l76 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l77 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l76, l77, 1);
                                                        }
                                                        _ => {
                                                            let l78 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l79 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base80 = l78;
                                                            let len80 = l79;
                                                            _rt::cabi_dealloc(base80, len80 * 1, 1);
                                                            let l81 = *base
                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l82 = *base
                                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l81, l82, 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base83,
                                        len83 * (9 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                        }
                        _ => {
                            let l84 = i32::from(
                                *arg0.add(::core::mem::size_of::<*const u8>()).cast::<u8>(),
                            );
                            match l84 {
                                0 => {
                                    let l85 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l86 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l85, l86, 1);
                                }
                                1 => {
                                    let l87 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l88 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l87, l88, 1);
                                }
                                2 => {
                                    let l89 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l90 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l89, l90, 1);
                                }
                                3 => {
                                    let l91 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l92 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l91, l92, 1);
                                }
                                _ => {
                                    let l93 = *arg0
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l94 = *arg0
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base112 = l93;
                                    let len112 = l94;
                                    for i in 0..len112 {
                                        let base = base112
                                            .add(i * (16 + 2 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l95 = i32::from(*base.add(0).cast::<u8>());
                                            match l95 {
                                                0 => {
                                                    let l96 = *base.add(8).cast::<*mut u8>();
                                                    let l97 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base98 = l96;
                                                    let len98 = l97;
                                                    _rt::cabi_dealloc(base98, len98 * 4, 4);
                                                }
                                                1 => {}
                                                2 => {}
                                                3 => {
                                                    let l99 = *base.add(8).cast::<*mut u8>();
                                                    let l100 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base101 = l99;
                                                    let len101 = l100;
                                                    _rt::cabi_dealloc(base101, len101 * 1, 1);
                                                }
                                                4 => {
                                                    let l102 = *base.add(8).cast::<*mut u8>();
                                                    let l103 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base104 = l102;
                                                    let len104 = l103;
                                                    _rt::cabi_dealloc(base104, len104 * 4, 4);
                                                }
                                                5 => {
                                                    let l105 = *base.add(8).cast::<*mut u8>();
                                                    let l106 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base107 = l105;
                                                    let len107 = l106;
                                                    _rt::cabi_dealloc(base107, len107 * 4, 4);
                                                }
                                                6 => {}
                                                7 => {}
                                                8 => {}
                                                9 => {}
                                                10 => {}
                                                11 => {}
                                                12 => {}
                                                13 => {}
                                                14 => {}
                                                15 => {}
                                                16 => {}
                                                17 => {}
                                                18 => {}
                                                19 => {}
                                                20 => {
                                                    let l108 = *base.add(8).cast::<*mut u8>();
                                                    let l109 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l108, l109, 1);
                                                }
                                                _ => {
                                                    let l110 = *base.add(8).cast::<*mut u8>();
                                                    let l111 = *base
                                                        .add(8 + 1 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l110, l111, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base112,
                                        len112 * (16 + 2 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                    let l113 = *arg0
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l114 = *arg0
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base145 = l113;
                                    let len145 = l114;
                                    for i in 0..len145 {
                                        let base = base145
                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l115 = i32::from(*base.add(0).cast::<u8>());
                                            match l115 {
                                                0 => {}
                                                _ => {
                                                    let l116 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l117 = *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l116, l117, 1);
                                                }
                                            }
                                            let l118 = i32::from(
                                                *base
                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l118 {
                                                0 => {}
                                                _ => {
                                                    let l119 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l120 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l119, l120, 1);
                                                }
                                            }
                                            let l121 = i32::from(
                                                *base
                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l121 {
                                                0 => {
                                                    let l122 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l123 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base126 = l122;
                                                    let len126 = l123;
                                                    for i in 0..len126 {
                                                        let base = base126
                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l124 = *base.add(0).cast::<*mut u8>();
                                                            let l125 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l124, l125, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base126,
                                                        len126 * (3 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                1 => {
                                                    let l127 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l128 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base131 = l127;
                                                    let len131 = l128;
                                                    for i in 0..len131 {
                                                        let base = base131
                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l129 = *base.add(0).cast::<*mut u8>();
                                                            let l130 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l129, l130, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base131,
                                                        len131 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                2 => {
                                                    let l132 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l133 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base136 = l132;
                                                    let len136 = l133;
                                                    for i in 0..len136 {
                                                        let base = base136
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l134 = *base.add(0).cast::<*mut u8>();
                                                            let l135 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l134, l135, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base136,
                                                        len136 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                3 => {
                                                    let l137 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l138 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base141 = l137;
                                                    let len141 = l138;
                                                    for i in 0..len141 {
                                                        let base = base141
                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l139 = *base.add(0).cast::<*mut u8>();
                                                            let l140 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l139, l140, 1);
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base141,
                                                        len141 * (2 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                4 => {
                                                    let l142 = *base
                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l143 = *base
                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base144 = l142;
                                                    let len144 = l143;
                                                    _rt::cabi_dealloc(base144, len144 * 4, 4);
                                                }
                                                5 => {}
                                                6 => {}
                                                7 => {}
                                                8 => {}
                                                9 => {}
                                                10 => {}
                                                11 => {}
                                                12 => {}
                                                13 => {}
                                                14 => {}
                                                15 => {}
                                                16 => {}
                                                17 => {}
                                                18 => {}
                                                19 => {}
                                                20 => {}
                                                _ => {}
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base145,
                                        len145 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                        8,
                                    );
                                }
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_discover_agents_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::discover_agents();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec2 = result0;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec2.len() * 4,
                        4,
                    );
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = result2;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_discover_agents<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 4, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_discover_agent_types_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
                    let result0 = T::discover_agent_types();
                    let ptr1 = (&raw mut _RET_AREA.0).cast::<u8>();
                    let vec405 = result0;
                    let len405 = vec405.len();
                    let layout405 = _rt::alloc::Layout::from_size_align_unchecked(
                        vec405.len() * (19 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                    let result405 = if layout405.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout405).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout405);
                        }
                        ptr
                    } else {
                        ::core::ptr::null_mut()
                    };
                    for (i, e) in vec405.into_iter().enumerate() {
                        let base = result405
                            .add(i * (19 * ::core::mem::size_of::<*const u8>()));
                        {
                            let super::super::super::super::golem::agent::common::AgentType {
                                type_name: type_name2,
                                description: description2,
                                constructor: constructor2,
                                methods: methods2,
                                dependencies: dependencies2,
                            } = e;
                            let vec3 = (type_name2.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len3;
                            *base.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                            let vec4 = (description2.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len4;
                            *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr4.cast_mut();
                            let super::super::super::super::golem::agent::common::AgentConstructor {
                                name: name5,
                                description: description5,
                                prompt_hint: prompt_hint5,
                                input_schema: input_schema5,
                            } = constructor2;
                            match name5 {
                                Some(e) => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec6 = (e.into_bytes()).into_boxed_slice();
                                    let ptr6 = vec6.as_ptr().cast::<u8>();
                                    let len6 = vec6.len();
                                    ::core::mem::forget(vec6);
                                    *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len6;
                                    *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr6.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec7 = (description5.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len7;
                            *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = ptr7.cast_mut();
                            match prompt_hint5 {
                                Some(e) => {
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len8;
                                    *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                }
                            };
                            use super::super::super::super::golem::agent::common::DataSchema as V71;
                            match input_schema5 {
                                V71::Tuple(e) => {
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (0i32) as u8;
                                    let vec39 = e;
                                    let len39 = vec39.len();
                                    let layout39 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec39.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result39 = if layout39.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout39).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout39);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec39.into_iter().enumerate() {
                                        let base = result39
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t9_0, t9_1) = e;
                                            let vec10 = (t9_0.into_bytes()).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len10;
                                            *base.add(0).cast::<*mut u8>() = ptr10.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V38;
                                            match t9_1 {
                                                V38::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes11,
                                                    } = e;
                                                    let vec29 = nodes11;
                                                    let len29 = vec29.len();
                                                    let layout29 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec29.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result29 = if layout29.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout29).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout29);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec29.into_iter().enumerate() {
                                                        let base = result29
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name12,
                                                                owner: owner12,
                                                                type_: type_12,
                                                            } = e;
                                                            match name12 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec13 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr13 = vec13.as_ptr().cast::<u8>();
                                                                    let len13 = vec13.len();
                                                                    ::core::mem::forget(vec13);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len13;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr13.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner12 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec14 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr14 = vec14.as_ptr().cast::<u8>();
                                                                    let len14 = vec14.len();
                                                                    ::core::mem::forget(vec14);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len14;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr14.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V28;
                                                            match type_12 {
                                                                V28::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec17 = e;
                                                                    let len17 = vec17.len();
                                                                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec17.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result17 = if layout17.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout17);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec17.into_iter().enumerate() {
                                                                        let base = result17
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t15_0, t15_1) = e;
                                                                            let vec16 = (t15_0.into_bytes()).into_boxed_slice();
                                                                            let ptr16 = vec16.as_ptr().cast::<u8>();
                                                                            let len16 = vec16.len();
                                                                            ::core::mem::forget(vec16);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len16;
                                                                            *base.add(0).cast::<*mut u8>() = ptr16.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t15_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len17;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result17;
                                                                }
                                                                V28::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec20 = e;
                                                                    let len20 = vec20.len();
                                                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec20.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result20 = if layout20.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout20);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec20.into_iter().enumerate() {
                                                                        let base = result20
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t18_0, t18_1) = e;
                                                                            let vec19 = (t18_0.into_bytes()).into_boxed_slice();
                                                                            let ptr19 = vec19.as_ptr().cast::<u8>();
                                                                            let len19 = vec19.len();
                                                                            ::core::mem::forget(vec19);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len19;
                                                                            *base.add(0).cast::<*mut u8>() = ptr19.cast_mut();
                                                                            match t18_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len20;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result20;
                                                                }
                                                                V28::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec22 = e;
                                                                    let len22 = vec22.len();
                                                                    let layout22 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec22.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result22 = if layout22.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout22).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout22);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec22.into_iter().enumerate() {
                                                                        let base = result22
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec21 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr21 = vec21.as_ptr().cast::<u8>();
                                                                            let len21 = vec21.len();
                                                                            ::core::mem::forget(vec21);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len21;
                                                                            *base.add(0).cast::<*mut u8>() = ptr21.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len22;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result22;
                                                                }
                                                                V28::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec24 = e;
                                                                    let len24 = vec24.len();
                                                                    let layout24 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec24.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result24 = if layout24.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout24).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout24);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec24.into_iter().enumerate() {
                                                                        let base = result24
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec23 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                                                            let len23 = vec23.len();
                                                                            ::core::mem::forget(vec23);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len23;
                                                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len24;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result24;
                                                                }
                                                                V28::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec25 = (e).into_boxed_slice();
                                                                    let ptr25 = vec25.as_ptr().cast::<u8>();
                                                                    let len25 = vec25.len();
                                                                    ::core::mem::forget(vec25);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len25;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr25.cast_mut();
                                                                }
                                                                V28::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V28::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V28::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t26_0, t26_1) = e;
                                                                    match t26_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t26_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V28::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V28::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V28::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V28::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V28::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V28::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V28::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V28::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V28::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V28::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V28::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V28::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V28::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V28::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t27_0, t27_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t27_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t27_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len29;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result29;
                                                }
                                                V38::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions30,
                                                    } = e;
                                                    match restrictions30 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec33 = e;
                                                            let len33 = vec33.len();
                                                            let layout33 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec33.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result33 = if layout33.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout33).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout33);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec33.into_iter().enumerate() {
                                                                let base = result33
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code31,
                                                                    } = e;
                                                                    let vec32 = (language_code31.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr32 = vec32.as_ptr().cast::<u8>();
                                                                    let len32 = vec32.len();
                                                                    ::core::mem::forget(vec32);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len32;
                                                                    *base.add(0).cast::<*mut u8>() = ptr32.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len33;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result33;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V38::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions34,
                                                    } = e;
                                                    match restrictions34 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec37 = e;
                                                            let len37 = vec37.len();
                                                            let layout37 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec37.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result37 = if layout37.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout37).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout37);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec37.into_iter().enumerate() {
                                                                let base = result37
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type35,
                                                                    } = e;
                                                                    let vec36 = (mime_type35.into_bytes()).into_boxed_slice();
                                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                                    let len36 = vec36.len();
                                                                    ::core::mem::forget(vec36);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len36;
                                                                    *base.add(0).cast::<*mut u8>() = ptr36.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len37;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result37;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len39;
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result39;
                                }
                                V71::Multimodal(e) => {
                                    *base
                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                        .cast::<u8>() = (1i32) as u8;
                                    let vec70 = e;
                                    let len70 = vec70.len();
                                    let layout70 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec70.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result70 = if layout70.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout70).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout70);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec70.into_iter().enumerate() {
                                        let base = result70
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let (t40_0, t40_1) = e;
                                            let vec41 = (t40_0.into_bytes()).into_boxed_slice();
                                            let ptr41 = vec41.as_ptr().cast::<u8>();
                                            let len41 = vec41.len();
                                            ::core::mem::forget(vec41);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len41;
                                            *base.add(0).cast::<*mut u8>() = ptr41.cast_mut();
                                            use super::super::super::super::golem::agent::common::ElementSchema as V69;
                                            match t40_1 {
                                                V69::ComponentModel(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                        nodes: nodes42,
                                                    } = e;
                                                    let vec60 = nodes42;
                                                    let len60 = vec60.len();
                                                    let layout60 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec60.len()
                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                    let result60 = if layout60.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout60).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout60);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec60.into_iter().enumerate() {
                                                        let base = result60
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                name: name43,
                                                                owner: owner43,
                                                                type_: type_43,
                                                            } = e;
                                                            match name43 {
                                                                Some(e) => {
                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                    let vec44 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr44 = vec44.as_ptr().cast::<u8>();
                                                                    let len44 = vec44.len();
                                                                    ::core::mem::forget(vec44);
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len44;
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr44.cast_mut();
                                                                }
                                                                None => {
                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            match owner43 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec45 = (e.into_bytes()).into_boxed_slice();
                                                                    let ptr45 = vec45.as_ptr().cast::<u8>();
                                                                    let len45 = vec45.len();
                                                                    ::core::mem::forget(vec45);
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len45;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr45.cast_mut();
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V59;
                                                            match type_43 {
                                                                V59::RecordType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let vec48 = e;
                                                                    let len48 = vec48.len();
                                                                    let layout48 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec48.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result48 = if layout48.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout48).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout48);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec48.into_iter().enumerate() {
                                                                        let base = result48
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t46_0, t46_1) = e;
                                                                            let vec47 = (t46_0.into_bytes()).into_boxed_slice();
                                                                            let ptr47 = vec47.as_ptr().cast::<u8>();
                                                                            let len47 = vec47.len();
                                                                            ::core::mem::forget(vec47);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len47;
                                                                            *base.add(0).cast::<*mut u8>() = ptr47.cast_mut();
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(t46_1);
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len48;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result48;
                                                                }
                                                                V59::VariantType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec51 = e;
                                                                    let len51 = vec51.len();
                                                                    let layout51 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec51.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result51 = if layout51.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout51).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout51);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec51.into_iter().enumerate() {
                                                                        let base = result51
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let (t49_0, t49_1) = e;
                                                                            let vec50 = (t49_0.into_bytes()).into_boxed_slice();
                                                                            let ptr50 = vec50.as_ptr().cast::<u8>();
                                                                            let len50 = vec50.len();
                                                                            ::core::mem::forget(vec50);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len50;
                                                                            *base.add(0).cast::<*mut u8>() = ptr50.cast_mut();
                                                                            match t49_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len51;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result51;
                                                                }
                                                                V59::EnumType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let vec53 = e;
                                                                    let len53 = vec53.len();
                                                                    let layout53 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec53.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result53 = if layout53.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout53).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout53);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec53.into_iter().enumerate() {
                                                                        let base = result53
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec52 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                                                            let len52 = vec52.len();
                                                                            ::core::mem::forget(vec52);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len52;
                                                                            *base.add(0).cast::<*mut u8>() = ptr52.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len53;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result53;
                                                                }
                                                                V59::FlagsType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (3i32) as u8;
                                                                    let vec55 = e;
                                                                    let len55 = vec55.len();
                                                                    let layout55 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec55.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result55 = if layout55.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout55).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout55);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec55.into_iter().enumerate() {
                                                                        let base = result55
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let vec54 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr54 = vec54.as_ptr().cast::<u8>();
                                                                            let len54 = vec54.len();
                                                                            ::core::mem::forget(vec54);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len54;
                                                                            *base.add(0).cast::<*mut u8>() = ptr54.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len55;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result55;
                                                                }
                                                                V59::TupleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (4i32) as u8;
                                                                    let vec56 = (e).into_boxed_slice();
                                                                    let ptr56 = vec56.as_ptr().cast::<u8>();
                                                                    let len56 = vec56.len();
                                                                    ::core::mem::forget(vec56);
                                                                    *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len56;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = ptr56.cast_mut();
                                                                }
                                                                V59::ListType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (5i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V59::OptionType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (6i32) as u8;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                }
                                                                V59::ResultType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (7i32) as u8;
                                                                    let (t57_0, t57_1) = e;
                                                                    match t57_0 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match t57_1 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            *base
                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V59::PrimU8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (8i32) as u8;
                                                                }
                                                                V59::PrimU16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (9i32) as u8;
                                                                }
                                                                V59::PrimU32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (10i32) as u8;
                                                                }
                                                                V59::PrimU64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (11i32) as u8;
                                                                }
                                                                V59::PrimS8Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (12i32) as u8;
                                                                }
                                                                V59::PrimS16Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (13i32) as u8;
                                                                }
                                                                V59::PrimS32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (14i32) as u8;
                                                                }
                                                                V59::PrimS64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (15i32) as u8;
                                                                }
                                                                V59::PrimF32Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (16i32) as u8;
                                                                }
                                                                V59::PrimF64Type => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (17i32) as u8;
                                                                }
                                                                V59::PrimCharType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (18i32) as u8;
                                                                }
                                                                V59::PrimBoolType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (19i32) as u8;
                                                                }
                                                                V59::PrimStringType => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (20i32) as u8;
                                                                }
                                                                V59::HandleType(e) => {
                                                                    *base
                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (21i32) as u8;
                                                                    let (t58_0, t58_1) = e;
                                                                    *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<i64>() = _rt::as_i64(t58_0);
                                                                    *base
                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (t58_1.clone() as i32) as u8;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len60;
                                                    *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result60;
                                                }
                                                V69::UnstructuredText(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                        restrictions: restrictions61,
                                                    } = e;
                                                    match restrictions61 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec64 = e;
                                                            let len64 = vec64.len();
                                                            let layout64 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec64.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result64 = if layout64.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout64).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout64);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec64.into_iter().enumerate() {
                                                                let base = result64
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                        language_code: language_code62,
                                                                    } = e;
                                                                    let vec63 = (language_code62.into_bytes())
                                                                        .into_boxed_slice();
                                                                    let ptr63 = vec63.as_ptr().cast::<u8>();
                                                                    let len63 = vec63.len();
                                                                    ::core::mem::forget(vec63);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len63;
                                                                    *base.add(0).cast::<*mut u8>() = ptr63.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len64;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result64;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                                V69::UnstructuredBinary(e) => {
                                                    *base
                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (2i32) as u8;
                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                        restrictions: restrictions65,
                                                    } = e;
                                                    match restrictions65 {
                                                        Some(e) => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let vec68 = e;
                                                            let len68 = vec68.len();
                                                            let layout68 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec68.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                            let result68 = if layout68.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout68).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout68);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec68.into_iter().enumerate() {
                                                                let base = result68
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                        mime_type: mime_type66,
                                                                    } = e;
                                                                    let vec67 = (mime_type66.into_bytes()).into_boxed_slice();
                                                                    let ptr67 = vec67.as_ptr().cast::<u8>();
                                                                    let len67 = vec67.len();
                                                                    ::core::mem::forget(vec67);
                                                                    *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len67;
                                                                    *base.add(0).cast::<*mut u8>() = ptr67.cast_mut();
                                                                }
                                                            }
                                                            *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len68;
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result68;
                                                        }
                                                        None => {
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                        }
                                                    };
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len70;
                                    *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result70;
                                }
                            }
                            let vec202 = methods2;
                            let len202 = vec202.len();
                            let layout202 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec202.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result202 = if layout202.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout202).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout202);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec202.into_iter().enumerate() {
                                let base = result202
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::agent::common::AgentMethod {
                                        name: name72,
                                        description: description72,
                                        prompt_hint: prompt_hint72,
                                        input_schema: input_schema72,
                                        output_schema: output_schema72,
                                    } = e;
                                    let vec73 = (name72.into_bytes()).into_boxed_slice();
                                    let ptr73 = vec73.as_ptr().cast::<u8>();
                                    let len73 = vec73.len();
                                    ::core::mem::forget(vec73);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len73;
                                    *base.add(0).cast::<*mut u8>() = ptr73.cast_mut();
                                    let vec74 = (description72.into_bytes()).into_boxed_slice();
                                    let ptr74 = vec74.as_ptr().cast::<u8>();
                                    let len74 = vec74.len();
                                    ::core::mem::forget(vec74);
                                    *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len74;
                                    *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr74.cast_mut();
                                    match prompt_hint72 {
                                        Some(e) => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec75 = (e.into_bytes()).into_boxed_slice();
                                            let ptr75 = vec75.as_ptr().cast::<u8>();
                                            let len75 = vec75.len();
                                            ::core::mem::forget(vec75);
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len75;
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr75.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::golem::agent::common::DataSchema as V138;
                                    match input_schema72 {
                                        V138::Tuple(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec106 = e;
                                            let len106 = vec106.len();
                                            let layout106 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec106.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result106 = if layout106.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout106).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout106);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec106.into_iter().enumerate() {
                                                let base = result106
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t76_0, t76_1) = e;
                                                    let vec77 = (t76_0.into_bytes()).into_boxed_slice();
                                                    let ptr77 = vec77.as_ptr().cast::<u8>();
                                                    let len77 = vec77.len();
                                                    ::core::mem::forget(vec77);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len77;
                                                    *base.add(0).cast::<*mut u8>() = ptr77.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V105;
                                                    match t76_1 {
                                                        V105::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes78,
                                                            } = e;
                                                            let vec96 = nodes78;
                                                            let len96 = vec96.len();
                                                            let layout96 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec96.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result96 = if layout96.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout96).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout96);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec96.into_iter().enumerate() {
                                                                let base = result96
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name79,
                                                                        owner: owner79,
                                                                        type_: type_79,
                                                                    } = e;
                                                                    match name79 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec80 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr80 = vec80.as_ptr().cast::<u8>();
                                                                            let len80 = vec80.len();
                                                                            ::core::mem::forget(vec80);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len80;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr80.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner79 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec81 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr81 = vec81.as_ptr().cast::<u8>();
                                                                            let len81 = vec81.len();
                                                                            ::core::mem::forget(vec81);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len81;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr81.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V95;
                                                                    match type_79 {
                                                                        V95::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec84 = e;
                                                                            let len84 = vec84.len();
                                                                            let layout84 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec84.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result84 = if layout84.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout84).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout84);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec84.into_iter().enumerate() {
                                                                                let base = result84
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t82_0, t82_1) = e;
                                                                                    let vec83 = (t82_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr83 = vec83.as_ptr().cast::<u8>();
                                                                                    let len83 = vec83.len();
                                                                                    ::core::mem::forget(vec83);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len83;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr83.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t82_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len84;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result84;
                                                                        }
                                                                        V95::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec87 = e;
                                                                            let len87 = vec87.len();
                                                                            let layout87 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec87.len() * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result87 = if layout87.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout87).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout87);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec87.into_iter().enumerate() {
                                                                                let base = result87
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t85_0, t85_1) = e;
                                                                                    let vec86 = (t85_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr86 = vec86.as_ptr().cast::<u8>();
                                                                                    let len86 = vec86.len();
                                                                                    ::core::mem::forget(vec86);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len86;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr86.cast_mut();
                                                                                    match t85_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len87;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result87;
                                                                        }
                                                                        V95::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec89 = e;
                                                                            let len89 = vec89.len();
                                                                            let layout89 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec89.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result89 = if layout89.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout89).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout89);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec89.into_iter().enumerate() {
                                                                                let base = result89
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec88 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr88 = vec88.as_ptr().cast::<u8>();
                                                                                    let len88 = vec88.len();
                                                                                    ::core::mem::forget(vec88);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len88;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr88.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len89;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result89;
                                                                        }
                                                                        V95::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec91 = e;
                                                                            let len91 = vec91.len();
                                                                            let layout91 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec91.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result91 = if layout91.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout91).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout91);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec91.into_iter().enumerate() {
                                                                                let base = result91
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec90 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr90 = vec90.as_ptr().cast::<u8>();
                                                                                    let len90 = vec90.len();
                                                                                    ::core::mem::forget(vec90);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len90;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr90.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len91;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result91;
                                                                        }
                                                                        V95::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec92 = (e).into_boxed_slice();
                                                                            let ptr92 = vec92.as_ptr().cast::<u8>();
                                                                            let len92 = vec92.len();
                                                                            ::core::mem::forget(vec92);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len92;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr92.cast_mut();
                                                                        }
                                                                        V95::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V95::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V95::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t93_0, t93_1) = e;
                                                                            match t93_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t93_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V95::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V95::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V95::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V95::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V95::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V95::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V95::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V95::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V95::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V95::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V95::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V95::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V95::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V95::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t94_0, t94_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t94_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t94_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len96;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result96;
                                                        }
                                                        V105::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions97,
                                                            } = e;
                                                            match restrictions97 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec100 = e;
                                                                    let len100 = vec100.len();
                                                                    let layout100 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec100.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result100 = if layout100.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout100).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout100);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec100.into_iter().enumerate() {
                                                                        let base = result100
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code98,
                                                                            } = e;
                                                                            let vec99 = (language_code98.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr99 = vec99.as_ptr().cast::<u8>();
                                                                            let len99 = vec99.len();
                                                                            ::core::mem::forget(vec99);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len99;
                                                                            *base.add(0).cast::<*mut u8>() = ptr99.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len100;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result100;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V105::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions101,
                                                            } = e;
                                                            match restrictions101 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec104 = e;
                                                                    let len104 = vec104.len();
                                                                    let layout104 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec104.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result104 = if layout104.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout104).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout104);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec104.into_iter().enumerate() {
                                                                        let base = result104
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type102,
                                                                            } = e;
                                                                            let vec103 = (mime_type102.into_bytes()).into_boxed_slice();
                                                                            let ptr103 = vec103.as_ptr().cast::<u8>();
                                                                            let len103 = vec103.len();
                                                                            ::core::mem::forget(vec103);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len103;
                                                                            *base.add(0).cast::<*mut u8>() = ptr103.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len104;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result104;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len106;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result106;
                                        }
                                        V138::Multimodal(e) => {
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec137 = e;
                                            let len137 = vec137.len();
                                            let layout137 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec137.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result137 = if layout137.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout137).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout137);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec137.into_iter().enumerate() {
                                                let base = result137
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t107_0, t107_1) = e;
                                                    let vec108 = (t107_0.into_bytes()).into_boxed_slice();
                                                    let ptr108 = vec108.as_ptr().cast::<u8>();
                                                    let len108 = vec108.len();
                                                    ::core::mem::forget(vec108);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len108;
                                                    *base.add(0).cast::<*mut u8>() = ptr108.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V136;
                                                    match t107_1 {
                                                        V136::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes109,
                                                            } = e;
                                                            let vec127 = nodes109;
                                                            let len127 = vec127.len();
                                                            let layout127 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec127.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result127 = if layout127.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout127).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout127);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec127.into_iter().enumerate() {
                                                                let base = result127
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name110,
                                                                        owner: owner110,
                                                                        type_: type_110,
                                                                    } = e;
                                                                    match name110 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec111 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr111 = vec111.as_ptr().cast::<u8>();
                                                                            let len111 = vec111.len();
                                                                            ::core::mem::forget(vec111);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len111;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr111.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner110 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec112 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr112 = vec112.as_ptr().cast::<u8>();
                                                                            let len112 = vec112.len();
                                                                            ::core::mem::forget(vec112);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len112;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr112.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V126;
                                                                    match type_110 {
                                                                        V126::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec115 = e;
                                                                            let len115 = vec115.len();
                                                                            let layout115 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec115.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result115 = if layout115.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout115).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout115);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec115.into_iter().enumerate() {
                                                                                let base = result115
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t113_0, t113_1) = e;
                                                                                    let vec114 = (t113_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr114 = vec114.as_ptr().cast::<u8>();
                                                                                    let len114 = vec114.len();
                                                                                    ::core::mem::forget(vec114);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len114;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr114.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t113_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len115;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result115;
                                                                        }
                                                                        V126::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec118 = e;
                                                                            let len118 = vec118.len();
                                                                            let layout118 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec118.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result118 = if layout118.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout118).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout118);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec118.into_iter().enumerate() {
                                                                                let base = result118
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t116_0, t116_1) = e;
                                                                                    let vec117 = (t116_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr117 = vec117.as_ptr().cast::<u8>();
                                                                                    let len117 = vec117.len();
                                                                                    ::core::mem::forget(vec117);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len117;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr117.cast_mut();
                                                                                    match t116_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len118;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result118;
                                                                        }
                                                                        V126::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec120 = e;
                                                                            let len120 = vec120.len();
                                                                            let layout120 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec120.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result120 = if layout120.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout120).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout120);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec120.into_iter().enumerate() {
                                                                                let base = result120
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec119 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr119 = vec119.as_ptr().cast::<u8>();
                                                                                    let len119 = vec119.len();
                                                                                    ::core::mem::forget(vec119);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len119;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr119.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len120;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result120;
                                                                        }
                                                                        V126::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec122 = e;
                                                                            let len122 = vec122.len();
                                                                            let layout122 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec122.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result122 = if layout122.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout122).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout122);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec122.into_iter().enumerate() {
                                                                                let base = result122
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec121 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr121 = vec121.as_ptr().cast::<u8>();
                                                                                    let len121 = vec121.len();
                                                                                    ::core::mem::forget(vec121);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len121;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr121.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len122;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result122;
                                                                        }
                                                                        V126::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec123 = (e).into_boxed_slice();
                                                                            let ptr123 = vec123.as_ptr().cast::<u8>();
                                                                            let len123 = vec123.len();
                                                                            ::core::mem::forget(vec123);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len123;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr123.cast_mut();
                                                                        }
                                                                        V126::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V126::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V126::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t124_0, t124_1) = e;
                                                                            match t124_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t124_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V126::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V126::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V126::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V126::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V126::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V126::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V126::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V126::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V126::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V126::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V126::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V126::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V126::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V126::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t125_0, t125_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t125_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t125_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len127;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result127;
                                                        }
                                                        V136::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions128,
                                                            } = e;
                                                            match restrictions128 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec131 = e;
                                                                    let len131 = vec131.len();
                                                                    let layout131 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec131.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result131 = if layout131.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout131).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout131);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec131.into_iter().enumerate() {
                                                                        let base = result131
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code129,
                                                                            } = e;
                                                                            let vec130 = (language_code129.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr130 = vec130.as_ptr().cast::<u8>();
                                                                            let len130 = vec130.len();
                                                                            ::core::mem::forget(vec130);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len130;
                                                                            *base.add(0).cast::<*mut u8>() = ptr130.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len131;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result131;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V136::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions132,
                                                            } = e;
                                                            match restrictions132 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec135 = e;
                                                                    let len135 = vec135.len();
                                                                    let layout135 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec135.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result135 = if layout135.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout135).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout135);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec135.into_iter().enumerate() {
                                                                        let base = result135
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type133,
                                                                            } = e;
                                                                            let vec134 = (mime_type133.into_bytes()).into_boxed_slice();
                                                                            let ptr134 = vec134.as_ptr().cast::<u8>();
                                                                            let len134 = vec134.len();
                                                                            ::core::mem::forget(vec134);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len134;
                                                                            *base.add(0).cast::<*mut u8>() = ptr134.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len135;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result135;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len137;
                                            *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result137;
                                        }
                                    }
                                    use super::super::super::super::golem::agent::common::DataSchema as V201;
                                    match output_schema72 {
                                        V201::Tuple(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec169 = e;
                                            let len169 = vec169.len();
                                            let layout169 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec169.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result169 = if layout169.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout169).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout169);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec169.into_iter().enumerate() {
                                                let base = result169
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t139_0, t139_1) = e;
                                                    let vec140 = (t139_0.into_bytes()).into_boxed_slice();
                                                    let ptr140 = vec140.as_ptr().cast::<u8>();
                                                    let len140 = vec140.len();
                                                    ::core::mem::forget(vec140);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len140;
                                                    *base.add(0).cast::<*mut u8>() = ptr140.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V168;
                                                    match t139_1 {
                                                        V168::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes141,
                                                            } = e;
                                                            let vec159 = nodes141;
                                                            let len159 = vec159.len();
                                                            let layout159 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec159.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result159 = if layout159.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout159).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout159);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec159.into_iter().enumerate() {
                                                                let base = result159
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name142,
                                                                        owner: owner142,
                                                                        type_: type_142,
                                                                    } = e;
                                                                    match name142 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec143 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr143 = vec143.as_ptr().cast::<u8>();
                                                                            let len143 = vec143.len();
                                                                            ::core::mem::forget(vec143);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len143;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr143.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner142 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec144 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr144 = vec144.as_ptr().cast::<u8>();
                                                                            let len144 = vec144.len();
                                                                            ::core::mem::forget(vec144);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len144;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr144.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V158;
                                                                    match type_142 {
                                                                        V158::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec147 = e;
                                                                            let len147 = vec147.len();
                                                                            let layout147 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec147.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result147 = if layout147.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout147).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout147);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec147.into_iter().enumerate() {
                                                                                let base = result147
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t145_0, t145_1) = e;
                                                                                    let vec146 = (t145_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr146 = vec146.as_ptr().cast::<u8>();
                                                                                    let len146 = vec146.len();
                                                                                    ::core::mem::forget(vec146);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len146;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr146.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t145_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len147;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result147;
                                                                        }
                                                                        V158::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec150 = e;
                                                                            let len150 = vec150.len();
                                                                            let layout150 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec150.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result150 = if layout150.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout150).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout150);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec150.into_iter().enumerate() {
                                                                                let base = result150
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t148_0, t148_1) = e;
                                                                                    let vec149 = (t148_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr149 = vec149.as_ptr().cast::<u8>();
                                                                                    let len149 = vec149.len();
                                                                                    ::core::mem::forget(vec149);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len149;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr149.cast_mut();
                                                                                    match t148_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len150;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result150;
                                                                        }
                                                                        V158::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec152 = e;
                                                                            let len152 = vec152.len();
                                                                            let layout152 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec152.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result152 = if layout152.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout152).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout152);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec152.into_iter().enumerate() {
                                                                                let base = result152
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec151 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr151 = vec151.as_ptr().cast::<u8>();
                                                                                    let len151 = vec151.len();
                                                                                    ::core::mem::forget(vec151);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len151;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr151.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len152;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result152;
                                                                        }
                                                                        V158::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec154 = e;
                                                                            let len154 = vec154.len();
                                                                            let layout154 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec154.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result154 = if layout154.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout154).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout154);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec154.into_iter().enumerate() {
                                                                                let base = result154
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec153 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr153 = vec153.as_ptr().cast::<u8>();
                                                                                    let len153 = vec153.len();
                                                                                    ::core::mem::forget(vec153);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len153;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr153.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len154;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result154;
                                                                        }
                                                                        V158::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec155 = (e).into_boxed_slice();
                                                                            let ptr155 = vec155.as_ptr().cast::<u8>();
                                                                            let len155 = vec155.len();
                                                                            ::core::mem::forget(vec155);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len155;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr155.cast_mut();
                                                                        }
                                                                        V158::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V158::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V158::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t156_0, t156_1) = e;
                                                                            match t156_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t156_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V158::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V158::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V158::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V158::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V158::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V158::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V158::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V158::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V158::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V158::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V158::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V158::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V158::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V158::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t157_0, t157_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t157_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t157_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len159;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result159;
                                                        }
                                                        V168::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions160,
                                                            } = e;
                                                            match restrictions160 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec163 = e;
                                                                    let len163 = vec163.len();
                                                                    let layout163 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec163.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result163 = if layout163.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout163).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout163);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec163.into_iter().enumerate() {
                                                                        let base = result163
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code161,
                                                                            } = e;
                                                                            let vec162 = (language_code161.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr162 = vec162.as_ptr().cast::<u8>();
                                                                            let len162 = vec162.len();
                                                                            ::core::mem::forget(vec162);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len162;
                                                                            *base.add(0).cast::<*mut u8>() = ptr162.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len163;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result163;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V168::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions164,
                                                            } = e;
                                                            match restrictions164 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec167 = e;
                                                                    let len167 = vec167.len();
                                                                    let layout167 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec167.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result167 = if layout167.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout167).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout167);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec167.into_iter().enumerate() {
                                                                        let base = result167
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type165,
                                                                            } = e;
                                                                            let vec166 = (mime_type165.into_bytes()).into_boxed_slice();
                                                                            let ptr166 = vec166.as_ptr().cast::<u8>();
                                                                            let len166 = vec166.len();
                                                                            ::core::mem::forget(vec166);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len166;
                                                                            *base.add(0).cast::<*mut u8>() = ptr166.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len167;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result167;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len169;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result169;
                                        }
                                        V201::Multimodal(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec200 = e;
                                            let len200 = vec200.len();
                                            let layout200 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec200.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result200 = if layout200.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout200).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout200);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec200.into_iter().enumerate() {
                                                let base = result200
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t170_0, t170_1) = e;
                                                    let vec171 = (t170_0.into_bytes()).into_boxed_slice();
                                                    let ptr171 = vec171.as_ptr().cast::<u8>();
                                                    let len171 = vec171.len();
                                                    ::core::mem::forget(vec171);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len171;
                                                    *base.add(0).cast::<*mut u8>() = ptr171.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V199;
                                                    match t170_1 {
                                                        V199::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes172,
                                                            } = e;
                                                            let vec190 = nodes172;
                                                            let len190 = vec190.len();
                                                            let layout190 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec190.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result190 = if layout190.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout190).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout190);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec190.into_iter().enumerate() {
                                                                let base = result190
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name173,
                                                                        owner: owner173,
                                                                        type_: type_173,
                                                                    } = e;
                                                                    match name173 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec174 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr174 = vec174.as_ptr().cast::<u8>();
                                                                            let len174 = vec174.len();
                                                                            ::core::mem::forget(vec174);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len174;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr174.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner173 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec175 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr175 = vec175.as_ptr().cast::<u8>();
                                                                            let len175 = vec175.len();
                                                                            ::core::mem::forget(vec175);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len175;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr175.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V189;
                                                                    match type_173 {
                                                                        V189::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec178 = e;
                                                                            let len178 = vec178.len();
                                                                            let layout178 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec178.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result178 = if layout178.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout178).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout178);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec178.into_iter().enumerate() {
                                                                                let base = result178
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t176_0, t176_1) = e;
                                                                                    let vec177 = (t176_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr177 = vec177.as_ptr().cast::<u8>();
                                                                                    let len177 = vec177.len();
                                                                                    ::core::mem::forget(vec177);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len177;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr177.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t176_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len178;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result178;
                                                                        }
                                                                        V189::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec181 = e;
                                                                            let len181 = vec181.len();
                                                                            let layout181 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec181.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result181 = if layout181.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout181).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout181);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec181.into_iter().enumerate() {
                                                                                let base = result181
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t179_0, t179_1) = e;
                                                                                    let vec180 = (t179_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr180 = vec180.as_ptr().cast::<u8>();
                                                                                    let len180 = vec180.len();
                                                                                    ::core::mem::forget(vec180);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len180;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr180.cast_mut();
                                                                                    match t179_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len181;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result181;
                                                                        }
                                                                        V189::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec183 = e;
                                                                            let len183 = vec183.len();
                                                                            let layout183 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec183.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result183 = if layout183.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout183).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout183);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec183.into_iter().enumerate() {
                                                                                let base = result183
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec182 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr182 = vec182.as_ptr().cast::<u8>();
                                                                                    let len182 = vec182.len();
                                                                                    ::core::mem::forget(vec182);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len182;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr182.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len183;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result183;
                                                                        }
                                                                        V189::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec185 = e;
                                                                            let len185 = vec185.len();
                                                                            let layout185 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec185.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result185 = if layout185.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout185).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout185);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec185.into_iter().enumerate() {
                                                                                let base = result185
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec184 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr184 = vec184.as_ptr().cast::<u8>();
                                                                                    let len184 = vec184.len();
                                                                                    ::core::mem::forget(vec184);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len184;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr184.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len185;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result185;
                                                                        }
                                                                        V189::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec186 = (e).into_boxed_slice();
                                                                            let ptr186 = vec186.as_ptr().cast::<u8>();
                                                                            let len186 = vec186.len();
                                                                            ::core::mem::forget(vec186);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len186;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr186.cast_mut();
                                                                        }
                                                                        V189::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V189::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V189::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t187_0, t187_1) = e;
                                                                            match t187_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t187_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V189::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V189::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V189::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V189::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V189::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V189::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V189::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V189::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V189::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V189::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V189::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V189::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V189::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V189::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t188_0, t188_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t188_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t188_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len190;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result190;
                                                        }
                                                        V199::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions191,
                                                            } = e;
                                                            match restrictions191 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec194 = e;
                                                                    let len194 = vec194.len();
                                                                    let layout194 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec194.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result194 = if layout194.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout194).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout194);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec194.into_iter().enumerate() {
                                                                        let base = result194
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code192,
                                                                            } = e;
                                                                            let vec193 = (language_code192.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr193 = vec193.as_ptr().cast::<u8>();
                                                                            let len193 = vec193.len();
                                                                            ::core::mem::forget(vec193);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len193;
                                                                            *base.add(0).cast::<*mut u8>() = ptr193.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len194;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result194;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V199::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions195,
                                                            } = e;
                                                            match restrictions195 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec198 = e;
                                                                    let len198 = vec198.len();
                                                                    let layout198 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec198.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result198 = if layout198.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout198).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout198);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec198.into_iter().enumerate() {
                                                                        let base = result198
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type196,
                                                                            } = e;
                                                                            let vec197 = (mime_type196.into_bytes()).into_boxed_slice();
                                                                            let ptr197 = vec197.as_ptr().cast::<u8>();
                                                                            let len197 = vec197.len();
                                                                            ::core::mem::forget(vec197);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len197;
                                                                            *base.add(0).cast::<*mut u8>() = ptr197.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len198;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result198;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len200;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result200;
                                        }
                                    }
                                }
                            }
                            *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len202;
                            *base
                                .add(15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result202;
                            let vec404 = dependencies2;
                            let len404 = vec404.len();
                            let layout404 = _rt::alloc::Layout::from_size_align_unchecked(
                                vec404.len() * (18 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let result404 = if layout404.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout404).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout404);
                                }
                                ptr
                            } else {
                                ::core::ptr::null_mut()
                            };
                            for (i, e) in vec404.into_iter().enumerate() {
                                let base = result404
                                    .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let super::super::super::super::golem::agent::common::AgentDependency {
                                        type_name: type_name203,
                                        description: description203,
                                        constructor: constructor203,
                                        methods: methods203,
                                    } = e;
                                    let vec204 = (type_name203.into_bytes()).into_boxed_slice();
                                    let ptr204 = vec204.as_ptr().cast::<u8>();
                                    let len204 = vec204.len();
                                    ::core::mem::forget(vec204);
                                    *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len204;
                                    *base.add(0).cast::<*mut u8>() = ptr204.cast_mut();
                                    match description203 {
                                        Some(e) => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec205 = (e.into_bytes()).into_boxed_slice();
                                            let ptr205 = vec205.as_ptr().cast::<u8>();
                                            let len205 = vec205.len();
                                            ::core::mem::forget(vec205);
                                            *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len205;
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr205.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let super::super::super::super::golem::agent::common::AgentConstructor {
                                        name: name206,
                                        description: description206,
                                        prompt_hint: prompt_hint206,
                                        input_schema: input_schema206,
                                    } = constructor203;
                                    match name206 {
                                        Some(e) => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec207 = (e.into_bytes()).into_boxed_slice();
                                            let ptr207 = vec207.as_ptr().cast::<u8>();
                                            let len207 = vec207.len();
                                            ::core::mem::forget(vec207);
                                            *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len207;
                                            *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr207.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    let vec208 = (description206.into_bytes())
                                        .into_boxed_slice();
                                    let ptr208 = vec208.as_ptr().cast::<u8>();
                                    let len208 = vec208.len();
                                    ::core::mem::forget(vec208);
                                    *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len208;
                                    *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = ptr208.cast_mut();
                                    match prompt_hint206 {
                                        Some(e) => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec209 = (e.into_bytes()).into_boxed_slice();
                                            let ptr209 = vec209.as_ptr().cast::<u8>();
                                            let len209 = vec209.len();
                                            ::core::mem::forget(vec209);
                                            *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len209;
                                            *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr209.cast_mut();
                                        }
                                        None => {
                                            *base
                                                .add(10 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    use super::super::super::super::golem::agent::common::DataSchema as V272;
                                    match input_schema206 {
                                        V272::Tuple(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (0i32) as u8;
                                            let vec240 = e;
                                            let len240 = vec240.len();
                                            let layout240 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec240.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result240 = if layout240.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout240).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout240);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec240.into_iter().enumerate() {
                                                let base = result240
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t210_0, t210_1) = e;
                                                    let vec211 = (t210_0.into_bytes()).into_boxed_slice();
                                                    let ptr211 = vec211.as_ptr().cast::<u8>();
                                                    let len211 = vec211.len();
                                                    ::core::mem::forget(vec211);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len211;
                                                    *base.add(0).cast::<*mut u8>() = ptr211.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V239;
                                                    match t210_1 {
                                                        V239::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes212,
                                                            } = e;
                                                            let vec230 = nodes212;
                                                            let len230 = vec230.len();
                                                            let layout230 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec230.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result230 = if layout230.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout230).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout230);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec230.into_iter().enumerate() {
                                                                let base = result230
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name213,
                                                                        owner: owner213,
                                                                        type_: type_213,
                                                                    } = e;
                                                                    match name213 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec214 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr214 = vec214.as_ptr().cast::<u8>();
                                                                            let len214 = vec214.len();
                                                                            ::core::mem::forget(vec214);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len214;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr214.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner213 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec215 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr215 = vec215.as_ptr().cast::<u8>();
                                                                            let len215 = vec215.len();
                                                                            ::core::mem::forget(vec215);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len215;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr215.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V229;
                                                                    match type_213 {
                                                                        V229::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec218 = e;
                                                                            let len218 = vec218.len();
                                                                            let layout218 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec218.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result218 = if layout218.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout218).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout218);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec218.into_iter().enumerate() {
                                                                                let base = result218
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t216_0, t216_1) = e;
                                                                                    let vec217 = (t216_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr217 = vec217.as_ptr().cast::<u8>();
                                                                                    let len217 = vec217.len();
                                                                                    ::core::mem::forget(vec217);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len217;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr217.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t216_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len218;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result218;
                                                                        }
                                                                        V229::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec221 = e;
                                                                            let len221 = vec221.len();
                                                                            let layout221 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec221.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result221 = if layout221.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout221).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout221);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec221.into_iter().enumerate() {
                                                                                let base = result221
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t219_0, t219_1) = e;
                                                                                    let vec220 = (t219_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr220 = vec220.as_ptr().cast::<u8>();
                                                                                    let len220 = vec220.len();
                                                                                    ::core::mem::forget(vec220);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len220;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr220.cast_mut();
                                                                                    match t219_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len221;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result221;
                                                                        }
                                                                        V229::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec223 = e;
                                                                            let len223 = vec223.len();
                                                                            let layout223 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec223.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result223 = if layout223.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout223).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout223);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec223.into_iter().enumerate() {
                                                                                let base = result223
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec222 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr222 = vec222.as_ptr().cast::<u8>();
                                                                                    let len222 = vec222.len();
                                                                                    ::core::mem::forget(vec222);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len222;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr222.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len223;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result223;
                                                                        }
                                                                        V229::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec225 = e;
                                                                            let len225 = vec225.len();
                                                                            let layout225 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec225.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result225 = if layout225.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout225).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout225);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec225.into_iter().enumerate() {
                                                                                let base = result225
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec224 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr224 = vec224.as_ptr().cast::<u8>();
                                                                                    let len224 = vec224.len();
                                                                                    ::core::mem::forget(vec224);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len224;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr224.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len225;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result225;
                                                                        }
                                                                        V229::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec226 = (e).into_boxed_slice();
                                                                            let ptr226 = vec226.as_ptr().cast::<u8>();
                                                                            let len226 = vec226.len();
                                                                            ::core::mem::forget(vec226);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len226;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr226.cast_mut();
                                                                        }
                                                                        V229::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V229::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V229::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t227_0, t227_1) = e;
                                                                            match t227_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t227_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V229::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V229::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V229::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V229::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V229::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V229::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V229::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V229::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V229::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V229::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V229::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V229::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V229::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V229::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t228_0, t228_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t228_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t228_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len230;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result230;
                                                        }
                                                        V239::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions231,
                                                            } = e;
                                                            match restrictions231 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec234 = e;
                                                                    let len234 = vec234.len();
                                                                    let layout234 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec234.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result234 = if layout234.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout234).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout234);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec234.into_iter().enumerate() {
                                                                        let base = result234
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code232,
                                                                            } = e;
                                                                            let vec233 = (language_code232.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr233 = vec233.as_ptr().cast::<u8>();
                                                                            let len233 = vec233.len();
                                                                            ::core::mem::forget(vec233);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len233;
                                                                            *base.add(0).cast::<*mut u8>() = ptr233.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len234;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result234;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V239::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions235,
                                                            } = e;
                                                            match restrictions235 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec238 = e;
                                                                    let len238 = vec238.len();
                                                                    let layout238 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec238.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result238 = if layout238.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout238).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout238);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec238.into_iter().enumerate() {
                                                                        let base = result238
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type236,
                                                                            } = e;
                                                                            let vec237 = (mime_type236.into_bytes()).into_boxed_slice();
                                                                            let ptr237 = vec237.as_ptr().cast::<u8>();
                                                                            let len237 = vec237.len();
                                                                            ::core::mem::forget(vec237);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len237;
                                                                            *base.add(0).cast::<*mut u8>() = ptr237.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len238;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result238;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len240;
                                            *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result240;
                                        }
                                        V272::Multimodal(e) => {
                                            *base
                                                .add(13 * ::core::mem::size_of::<*const u8>())
                                                .cast::<u8>() = (1i32) as u8;
                                            let vec271 = e;
                                            let len271 = vec271.len();
                                            let layout271 = _rt::alloc::Layout::from_size_align_unchecked(
                                                vec271.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                            let result271 = if layout271.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout271).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout271);
                                                }
                                                ptr
                                            } else {
                                                ::core::ptr::null_mut()
                                            };
                                            for (i, e) in vec271.into_iter().enumerate() {
                                                let base = result271
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let (t241_0, t241_1) = e;
                                                    let vec242 = (t241_0.into_bytes()).into_boxed_slice();
                                                    let ptr242 = vec242.as_ptr().cast::<u8>();
                                                    let len242 = vec242.len();
                                                    ::core::mem::forget(vec242);
                                                    *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len242;
                                                    *base.add(0).cast::<*mut u8>() = ptr242.cast_mut();
                                                    use super::super::super::super::golem::agent::common::ElementSchema as V270;
                                                    match t241_1 {
                                                        V270::ComponentModel(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (0i32) as u8;
                                                            let super::super::super::super::golem::rpc::types::WitType {
                                                                nodes: nodes243,
                                                            } = e;
                                                            let vec261 = nodes243;
                                                            let len261 = vec261.len();
                                                            let layout261 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                vec261.len()
                                                                    * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                            let result261 = if layout261.size() != 0 {
                                                                let ptr = _rt::alloc::alloc(layout261).cast::<u8>();
                                                                if ptr.is_null() {
                                                                    _rt::alloc::handle_alloc_error(layout261);
                                                                }
                                                                ptr
                                                            } else {
                                                                ::core::ptr::null_mut()
                                                            };
                                                            for (i, e) in vec261.into_iter().enumerate() {
                                                                let base = result261
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                        name: name244,
                                                                        owner: owner244,
                                                                        type_: type_244,
                                                                    } = e;
                                                                    match name244 {
                                                                        Some(e) => {
                                                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                            let vec245 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr245 = vec245.as_ptr().cast::<u8>();
                                                                            let len245 = vec245.len();
                                                                            ::core::mem::forget(vec245);
                                                                            *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len245;
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr245.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    match owner244 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec246 = (e.into_bytes()).into_boxed_slice();
                                                                            let ptr246 = vec246.as_ptr().cast::<u8>();
                                                                            let len246 = vec246.len();
                                                                            ::core::mem::forget(vec246);
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len246;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr246.cast_mut();
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                    use super::super::super::super::golem::rpc::types::WitTypeNode as V260;
                                                                    match type_244 {
                                                                        V260::RecordType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                            let vec249 = e;
                                                                            let len249 = vec249.len();
                                                                            let layout249 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec249.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result249 = if layout249.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout249).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout249);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec249.into_iter().enumerate() {
                                                                                let base = result249
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t247_0, t247_1) = e;
                                                                                    let vec248 = (t247_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr248 = vec248.as_ptr().cast::<u8>();
                                                                                    let len248 = vec248.len();
                                                                                    ::core::mem::forget(vec248);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len248;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr248.cast_mut();
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(t247_1);
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len249;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result249;
                                                                        }
                                                                        V260::VariantType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec252 = e;
                                                                            let len252 = vec252.len();
                                                                            let layout252 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec252.len()
                                                                                    * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result252 = if layout252.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout252).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout252);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec252.into_iter().enumerate() {
                                                                                let base = result252
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let (t250_0, t250_1) = e;
                                                                                    let vec251 = (t250_0.into_bytes()).into_boxed_slice();
                                                                                    let ptr251 = vec251.as_ptr().cast::<u8>();
                                                                                    let len251 = vec251.len();
                                                                                    ::core::mem::forget(vec251);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len251;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr251.cast_mut();
                                                                                    match t250_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len252;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result252;
                                                                        }
                                                                        V260::EnumType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (2i32) as u8;
                                                                            let vec254 = e;
                                                                            let len254 = vec254.len();
                                                                            let layout254 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec254.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result254 = if layout254.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout254).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout254);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec254.into_iter().enumerate() {
                                                                                let base = result254
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec253 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr253 = vec253.as_ptr().cast::<u8>();
                                                                                    let len253 = vec253.len();
                                                                                    ::core::mem::forget(vec253);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len253;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr253.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len254;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result254;
                                                                        }
                                                                        V260::FlagsType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (3i32) as u8;
                                                                            let vec256 = e;
                                                                            let len256 = vec256.len();
                                                                            let layout256 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec256.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result256 = if layout256.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout256).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout256);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec256.into_iter().enumerate() {
                                                                                let base = result256
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let vec255 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr255 = vec255.as_ptr().cast::<u8>();
                                                                                    let len255 = vec255.len();
                                                                                    ::core::mem::forget(vec255);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len255;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr255.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len256;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result256;
                                                                        }
                                                                        V260::TupleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (4i32) as u8;
                                                                            let vec257 = (e).into_boxed_slice();
                                                                            let ptr257 = vec257.as_ptr().cast::<u8>();
                                                                            let len257 = vec257.len();
                                                                            ::core::mem::forget(vec257);
                                                                            *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len257;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = ptr257.cast_mut();
                                                                        }
                                                                        V260::ListType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (5i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V260::OptionType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (6i32) as u8;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                        }
                                                                        V260::ResultType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (7i32) as u8;
                                                                            let (t258_0, t258_1) = e;
                                                                            match t258_0 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match t258_1 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    *base
                                                                                        .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                        }
                                                                        V260::PrimU8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (8i32) as u8;
                                                                        }
                                                                        V260::PrimU16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (9i32) as u8;
                                                                        }
                                                                        V260::PrimU32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (10i32) as u8;
                                                                        }
                                                                        V260::PrimU64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (11i32) as u8;
                                                                        }
                                                                        V260::PrimS8Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (12i32) as u8;
                                                                        }
                                                                        V260::PrimS16Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (13i32) as u8;
                                                                        }
                                                                        V260::PrimS32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (14i32) as u8;
                                                                        }
                                                                        V260::PrimS64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (15i32) as u8;
                                                                        }
                                                                        V260::PrimF32Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (16i32) as u8;
                                                                        }
                                                                        V260::PrimF64Type => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (17i32) as u8;
                                                                        }
                                                                        V260::PrimCharType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (18i32) as u8;
                                                                        }
                                                                        V260::PrimBoolType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (19i32) as u8;
                                                                        }
                                                                        V260::PrimStringType => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (20i32) as u8;
                                                                        }
                                                                        V260::HandleType(e) => {
                                                                            *base
                                                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (21i32) as u8;
                                                                            let (t259_0, t259_1) = e;
                                                                            *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<i64>() = _rt::as_i64(t259_0);
                                                                            *base
                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (t259_1.clone() as i32) as u8;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len261;
                                                            *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>() = result261;
                                                        }
                                                        V270::UnstructuredText(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (1i32) as u8;
                                                            let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                restrictions: restrictions262,
                                                            } = e;
                                                            match restrictions262 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec265 = e;
                                                                    let len265 = vec265.len();
                                                                    let layout265 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec265.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result265 = if layout265.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout265).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout265);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec265.into_iter().enumerate() {
                                                                        let base = result265
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::TextType {
                                                                                language_code: language_code263,
                                                                            } = e;
                                                                            let vec264 = (language_code263.into_bytes())
                                                                                .into_boxed_slice();
                                                                            let ptr264 = vec264.as_ptr().cast::<u8>();
                                                                            let len264 = vec264.len();
                                                                            ::core::mem::forget(vec264);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len264;
                                                                            *base.add(0).cast::<*mut u8>() = ptr264.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len265;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result265;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                        V270::UnstructuredBinary(e) => {
                                                            *base
                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<u8>() = (2i32) as u8;
                                                            let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                restrictions: restrictions266,
                                                            } = e;
                                                            match restrictions266 {
                                                                Some(e) => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let vec269 = e;
                                                                    let len269 = vec269.len();
                                                                    let layout269 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec269.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                    let result269 = if layout269.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout269).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout269);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec269.into_iter().enumerate() {
                                                                        let base = result269
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::agent::common::BinaryType {
                                                                                mime_type: mime_type267,
                                                                            } = e;
                                                                            let vec268 = (mime_type267.into_bytes()).into_boxed_slice();
                                                                            let ptr268 = vec268.as_ptr().cast::<u8>();
                                                                            let len268 = vec268.len();
                                                                            ::core::mem::forget(vec268);
                                                                            *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len268;
                                                                            *base.add(0).cast::<*mut u8>() = ptr268.cast_mut();
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len269;
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result269;
                                                                }
                                                                None => {
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                }
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                            *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len271;
                                            *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = result271;
                                        }
                                    }
                                    let vec403 = methods203;
                                    let len403 = vec403.len();
                                    let layout403 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec403.len() * (13 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                    let result403 = if layout403.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout403).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout403);
                                        }
                                        ptr
                                    } else {
                                        ::core::ptr::null_mut()
                                    };
                                    for (i, e) in vec403.into_iter().enumerate() {
                                        let base = result403
                                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let super::super::super::super::golem::agent::common::AgentMethod {
                                                name: name273,
                                                description: description273,
                                                prompt_hint: prompt_hint273,
                                                input_schema: input_schema273,
                                                output_schema: output_schema273,
                                            } = e;
                                            let vec274 = (name273.into_bytes()).into_boxed_slice();
                                            let ptr274 = vec274.as_ptr().cast::<u8>();
                                            let len274 = vec274.len();
                                            ::core::mem::forget(vec274);
                                            *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len274;
                                            *base.add(0).cast::<*mut u8>() = ptr274.cast_mut();
                                            let vec275 = (description273.into_bytes())
                                                .into_boxed_slice();
                                            let ptr275 = vec275.as_ptr().cast::<u8>();
                                            let len275 = vec275.len();
                                            ::core::mem::forget(vec275);
                                            *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>() = len275;
                                            *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>() = ptr275.cast_mut();
                                            match prompt_hint273 {
                                                Some(e) => {
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec276 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr276 = vec276.as_ptr().cast::<u8>();
                                                    let len276 = vec276.len();
                                                    ::core::mem::forget(vec276);
                                                    *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len276;
                                                    *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = ptr276.cast_mut();
                                                }
                                                None => {
                                                    *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                            use super::super::super::super::golem::agent::common::DataSchema as V339;
                                            match input_schema273 {
                                                V339::Tuple(e) => {
                                                    *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec307 = e;
                                                    let len307 = vec307.len();
                                                    let layout307 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec307.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result307 = if layout307.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout307).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout307);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec307.into_iter().enumerate() {
                                                        let base = result307
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t277_0, t277_1) = e;
                                                            let vec278 = (t277_0.into_bytes()).into_boxed_slice();
                                                            let ptr278 = vec278.as_ptr().cast::<u8>();
                                                            let len278 = vec278.len();
                                                            ::core::mem::forget(vec278);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len278;
                                                            *base.add(0).cast::<*mut u8>() = ptr278.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V306;
                                                            match t277_1 {
                                                                V306::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes279,
                                                                    } = e;
                                                                    let vec297 = nodes279;
                                                                    let len297 = vec297.len();
                                                                    let layout297 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec297.len()
                                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result297 = if layout297.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout297).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout297);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec297.into_iter().enumerate() {
                                                                        let base = result297
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name280,
                                                                                owner: owner280,
                                                                                type_: type_280,
                                                                            } = e;
                                                                            match name280 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec281 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr281 = vec281.as_ptr().cast::<u8>();
                                                                                    let len281 = vec281.len();
                                                                                    ::core::mem::forget(vec281);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len281;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr281.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match owner280 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec282 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr282 = vec282.as_ptr().cast::<u8>();
                                                                                    let len282 = vec282.len();
                                                                                    ::core::mem::forget(vec282);
                                                                                    *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len282;
                                                                                    *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr282.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V296;
                                                                            match type_280 {
                                                                                V296::RecordType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec285 = e;
                                                                                    let len285 = vec285.len();
                                                                                    let layout285 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec285.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result285 = if layout285.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout285).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout285);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec285.into_iter().enumerate() {
                                                                                        let base = result285
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t283_0, t283_1) = e;
                                                                                            let vec284 = (t283_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr284 = vec284.as_ptr().cast::<u8>();
                                                                                            let len284 = vec284.len();
                                                                                            ::core::mem::forget(vec284);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len284;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr284.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t283_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len285;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result285;
                                                                                }
                                                                                V296::VariantType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec288 = e;
                                                                                    let len288 = vec288.len();
                                                                                    let layout288 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec288.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result288 = if layout288.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout288).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout288);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec288.into_iter().enumerate() {
                                                                                        let base = result288
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t286_0, t286_1) = e;
                                                                                            let vec287 = (t286_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr287 = vec287.as_ptr().cast::<u8>();
                                                                                            let len287 = vec287.len();
                                                                                            ::core::mem::forget(vec287);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len287;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr287.cast_mut();
                                                                                            match t286_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len288;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result288;
                                                                                }
                                                                                V296::EnumType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec290 = e;
                                                                                    let len290 = vec290.len();
                                                                                    let layout290 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec290.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result290 = if layout290.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout290).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout290);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec290.into_iter().enumerate() {
                                                                                        let base = result290
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec289 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr289 = vec289.as_ptr().cast::<u8>();
                                                                                            let len289 = vec289.len();
                                                                                            ::core::mem::forget(vec289);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len289;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr289.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len290;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result290;
                                                                                }
                                                                                V296::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec292 = e;
                                                                                    let len292 = vec292.len();
                                                                                    let layout292 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec292.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result292 = if layout292.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout292).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout292);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec292.into_iter().enumerate() {
                                                                                        let base = result292
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec291 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr291 = vec291.as_ptr().cast::<u8>();
                                                                                            let len291 = vec291.len();
                                                                                            ::core::mem::forget(vec291);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len291;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr291.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len292;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result292;
                                                                                }
                                                                                V296::TupleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec293 = (e).into_boxed_slice();
                                                                                    let ptr293 = vec293.as_ptr().cast::<u8>();
                                                                                    let len293 = vec293.len();
                                                                                    ::core::mem::forget(vec293);
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len293;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr293.cast_mut();
                                                                                }
                                                                                V296::ListType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V296::OptionType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V296::ResultType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t294_0, t294_1) = e;
                                                                                    match t294_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t294_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V296::PrimU8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V296::PrimU16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V296::PrimU32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V296::PrimU64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V296::PrimS8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V296::PrimS16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V296::PrimS32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V296::PrimS64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V296::PrimF32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V296::PrimF64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V296::PrimCharType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V296::PrimBoolType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V296::PrimStringType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V296::HandleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t295_0, t295_1) = e;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t295_0);
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t295_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len297;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result297;
                                                                }
                                                                V306::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions298,
                                                                    } = e;
                                                                    match restrictions298 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec301 = e;
                                                                            let len301 = vec301.len();
                                                                            let layout301 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec301.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result301 = if layout301.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout301).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout301);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec301.into_iter().enumerate() {
                                                                                let base = result301
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code299,
                                                                                    } = e;
                                                                                    let vec300 = (language_code299.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr300 = vec300.as_ptr().cast::<u8>();
                                                                                    let len300 = vec300.len();
                                                                                    ::core::mem::forget(vec300);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len300;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr300.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len301;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result301;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V306::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions302,
                                                                    } = e;
                                                                    match restrictions302 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec305 = e;
                                                                            let len305 = vec305.len();
                                                                            let layout305 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec305.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result305 = if layout305.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout305).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout305);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec305.into_iter().enumerate() {
                                                                                let base = result305
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type303,
                                                                                    } = e;
                                                                                    let vec304 = (mime_type303.into_bytes()).into_boxed_slice();
                                                                                    let ptr304 = vec304.as_ptr().cast::<u8>();
                                                                                    let len304 = vec304.len();
                                                                                    ::core::mem::forget(vec304);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len304;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr304.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len305;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result305;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len307;
                                                    *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result307;
                                                }
                                                V339::Multimodal(e) => {
                                                    *base
                                                        .add(7 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec338 = e;
                                                    let len338 = vec338.len();
                                                    let layout338 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec338.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result338 = if layout338.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout338).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout338);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec338.into_iter().enumerate() {
                                                        let base = result338
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t308_0, t308_1) = e;
                                                            let vec309 = (t308_0.into_bytes()).into_boxed_slice();
                                                            let ptr309 = vec309.as_ptr().cast::<u8>();
                                                            let len309 = vec309.len();
                                                            ::core::mem::forget(vec309);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len309;
                                                            *base.add(0).cast::<*mut u8>() = ptr309.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V337;
                                                            match t308_1 {
                                                                V337::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes310,
                                                                    } = e;
                                                                    let vec328 = nodes310;
                                                                    let len328 = vec328.len();
                                                                    let layout328 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec328.len()
                                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result328 = if layout328.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout328).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout328);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec328.into_iter().enumerate() {
                                                                        let base = result328
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name311,
                                                                                owner: owner311,
                                                                                type_: type_311,
                                                                            } = e;
                                                                            match name311 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec312 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr312 = vec312.as_ptr().cast::<u8>();
                                                                                    let len312 = vec312.len();
                                                                                    ::core::mem::forget(vec312);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len312;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr312.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match owner311 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec313 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr313 = vec313.as_ptr().cast::<u8>();
                                                                                    let len313 = vec313.len();
                                                                                    ::core::mem::forget(vec313);
                                                                                    *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len313;
                                                                                    *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr313.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V327;
                                                                            match type_311 {
                                                                                V327::RecordType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec316 = e;
                                                                                    let len316 = vec316.len();
                                                                                    let layout316 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec316.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result316 = if layout316.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout316).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout316);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec316.into_iter().enumerate() {
                                                                                        let base = result316
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t314_0, t314_1) = e;
                                                                                            let vec315 = (t314_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr315 = vec315.as_ptr().cast::<u8>();
                                                                                            let len315 = vec315.len();
                                                                                            ::core::mem::forget(vec315);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len315;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr315.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t314_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len316;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result316;
                                                                                }
                                                                                V327::VariantType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec319 = e;
                                                                                    let len319 = vec319.len();
                                                                                    let layout319 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec319.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result319 = if layout319.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout319).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout319);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec319.into_iter().enumerate() {
                                                                                        let base = result319
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t317_0, t317_1) = e;
                                                                                            let vec318 = (t317_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr318 = vec318.as_ptr().cast::<u8>();
                                                                                            let len318 = vec318.len();
                                                                                            ::core::mem::forget(vec318);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len318;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr318.cast_mut();
                                                                                            match t317_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len319;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result319;
                                                                                }
                                                                                V327::EnumType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec321 = e;
                                                                                    let len321 = vec321.len();
                                                                                    let layout321 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec321.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result321 = if layout321.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout321).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout321);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec321.into_iter().enumerate() {
                                                                                        let base = result321
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec320 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr320 = vec320.as_ptr().cast::<u8>();
                                                                                            let len320 = vec320.len();
                                                                                            ::core::mem::forget(vec320);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len320;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr320.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len321;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result321;
                                                                                }
                                                                                V327::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec323 = e;
                                                                                    let len323 = vec323.len();
                                                                                    let layout323 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec323.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result323 = if layout323.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout323).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout323);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec323.into_iter().enumerate() {
                                                                                        let base = result323
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec322 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr322 = vec322.as_ptr().cast::<u8>();
                                                                                            let len322 = vec322.len();
                                                                                            ::core::mem::forget(vec322);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len322;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr322.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len323;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result323;
                                                                                }
                                                                                V327::TupleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec324 = (e).into_boxed_slice();
                                                                                    let ptr324 = vec324.as_ptr().cast::<u8>();
                                                                                    let len324 = vec324.len();
                                                                                    ::core::mem::forget(vec324);
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len324;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr324.cast_mut();
                                                                                }
                                                                                V327::ListType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V327::OptionType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V327::ResultType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t325_0, t325_1) = e;
                                                                                    match t325_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t325_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V327::PrimU8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V327::PrimU16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V327::PrimU32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V327::PrimU64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V327::PrimS8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V327::PrimS16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V327::PrimS32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V327::PrimS64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V327::PrimF32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V327::PrimF64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V327::PrimCharType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V327::PrimBoolType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V327::PrimStringType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V327::HandleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t326_0, t326_1) = e;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t326_0);
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t326_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len328;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result328;
                                                                }
                                                                V337::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions329,
                                                                    } = e;
                                                                    match restrictions329 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec332 = e;
                                                                            let len332 = vec332.len();
                                                                            let layout332 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec332.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result332 = if layout332.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout332).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout332);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec332.into_iter().enumerate() {
                                                                                let base = result332
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code330,
                                                                                    } = e;
                                                                                    let vec331 = (language_code330.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr331 = vec331.as_ptr().cast::<u8>();
                                                                                    let len331 = vec331.len();
                                                                                    ::core::mem::forget(vec331);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len331;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr331.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len332;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result332;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V337::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions333,
                                                                    } = e;
                                                                    match restrictions333 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec336 = e;
                                                                            let len336 = vec336.len();
                                                                            let layout336 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec336.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result336 = if layout336.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout336).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout336);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec336.into_iter().enumerate() {
                                                                                let base = result336
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type334,
                                                                                    } = e;
                                                                                    let vec335 = (mime_type334.into_bytes()).into_boxed_slice();
                                                                                    let ptr335 = vec335.as_ptr().cast::<u8>();
                                                                                    let len335 = vec335.len();
                                                                                    ::core::mem::forget(vec335);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len335;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr335.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len336;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result336;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len338;
                                                    *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result338;
                                                }
                                            }
                                            use super::super::super::super::golem::agent::common::DataSchema as V402;
                                            match output_schema273 {
                                                V402::Tuple(e) => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (0i32) as u8;
                                                    let vec370 = e;
                                                    let len370 = vec370.len();
                                                    let layout370 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec370.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result370 = if layout370.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout370).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout370);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec370.into_iter().enumerate() {
                                                        let base = result370
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t340_0, t340_1) = e;
                                                            let vec341 = (t340_0.into_bytes()).into_boxed_slice();
                                                            let ptr341 = vec341.as_ptr().cast::<u8>();
                                                            let len341 = vec341.len();
                                                            ::core::mem::forget(vec341);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len341;
                                                            *base.add(0).cast::<*mut u8>() = ptr341.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V369;
                                                            match t340_1 {
                                                                V369::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes342,
                                                                    } = e;
                                                                    let vec360 = nodes342;
                                                                    let len360 = vec360.len();
                                                                    let layout360 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec360.len()
                                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result360 = if layout360.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout360).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout360);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec360.into_iter().enumerate() {
                                                                        let base = result360
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name343,
                                                                                owner: owner343,
                                                                                type_: type_343,
                                                                            } = e;
                                                                            match name343 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec344 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr344 = vec344.as_ptr().cast::<u8>();
                                                                                    let len344 = vec344.len();
                                                                                    ::core::mem::forget(vec344);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len344;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr344.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match owner343 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec345 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr345 = vec345.as_ptr().cast::<u8>();
                                                                                    let len345 = vec345.len();
                                                                                    ::core::mem::forget(vec345);
                                                                                    *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len345;
                                                                                    *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr345.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V359;
                                                                            match type_343 {
                                                                                V359::RecordType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec348 = e;
                                                                                    let len348 = vec348.len();
                                                                                    let layout348 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec348.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result348 = if layout348.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout348).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout348);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec348.into_iter().enumerate() {
                                                                                        let base = result348
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t346_0, t346_1) = e;
                                                                                            let vec347 = (t346_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr347 = vec347.as_ptr().cast::<u8>();
                                                                                            let len347 = vec347.len();
                                                                                            ::core::mem::forget(vec347);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len347;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr347.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t346_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len348;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result348;
                                                                                }
                                                                                V359::VariantType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec351 = e;
                                                                                    let len351 = vec351.len();
                                                                                    let layout351 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec351.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result351 = if layout351.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout351).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout351);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec351.into_iter().enumerate() {
                                                                                        let base = result351
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t349_0, t349_1) = e;
                                                                                            let vec350 = (t349_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr350 = vec350.as_ptr().cast::<u8>();
                                                                                            let len350 = vec350.len();
                                                                                            ::core::mem::forget(vec350);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len350;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr350.cast_mut();
                                                                                            match t349_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len351;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result351;
                                                                                }
                                                                                V359::EnumType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec353 = e;
                                                                                    let len353 = vec353.len();
                                                                                    let layout353 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec353.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result353 = if layout353.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout353).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout353);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec353.into_iter().enumerate() {
                                                                                        let base = result353
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec352 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr352 = vec352.as_ptr().cast::<u8>();
                                                                                            let len352 = vec352.len();
                                                                                            ::core::mem::forget(vec352);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len352;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr352.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len353;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result353;
                                                                                }
                                                                                V359::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec355 = e;
                                                                                    let len355 = vec355.len();
                                                                                    let layout355 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec355.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result355 = if layout355.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout355).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout355);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec355.into_iter().enumerate() {
                                                                                        let base = result355
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec354 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr354 = vec354.as_ptr().cast::<u8>();
                                                                                            let len354 = vec354.len();
                                                                                            ::core::mem::forget(vec354);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len354;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr354.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len355;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result355;
                                                                                }
                                                                                V359::TupleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec356 = (e).into_boxed_slice();
                                                                                    let ptr356 = vec356.as_ptr().cast::<u8>();
                                                                                    let len356 = vec356.len();
                                                                                    ::core::mem::forget(vec356);
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len356;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr356.cast_mut();
                                                                                }
                                                                                V359::ListType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V359::OptionType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V359::ResultType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t357_0, t357_1) = e;
                                                                                    match t357_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t357_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V359::PrimU8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V359::PrimU16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V359::PrimU32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V359::PrimU64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V359::PrimS8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V359::PrimS16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V359::PrimS32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V359::PrimS64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V359::PrimF32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V359::PrimF64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V359::PrimCharType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V359::PrimBoolType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V359::PrimStringType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V359::HandleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t358_0, t358_1) = e;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t358_0);
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t358_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len360;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result360;
                                                                }
                                                                V369::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions361,
                                                                    } = e;
                                                                    match restrictions361 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec364 = e;
                                                                            let len364 = vec364.len();
                                                                            let layout364 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec364.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result364 = if layout364.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout364).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout364);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec364.into_iter().enumerate() {
                                                                                let base = result364
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code362,
                                                                                    } = e;
                                                                                    let vec363 = (language_code362.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr363 = vec363.as_ptr().cast::<u8>();
                                                                                    let len363 = vec363.len();
                                                                                    ::core::mem::forget(vec363);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len363;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr363.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len364;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result364;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V369::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions365,
                                                                    } = e;
                                                                    match restrictions365 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec368 = e;
                                                                            let len368 = vec368.len();
                                                                            let layout368 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec368.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result368 = if layout368.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout368).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout368);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec368.into_iter().enumerate() {
                                                                                let base = result368
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type366,
                                                                                    } = e;
                                                                                    let vec367 = (mime_type366.into_bytes()).into_boxed_slice();
                                                                                    let ptr367 = vec367.as_ptr().cast::<u8>();
                                                                                    let len367 = vec367.len();
                                                                                    ::core::mem::forget(vec367);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len367;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr367.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len368;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result368;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len370;
                                                    *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result370;
                                                }
                                                V402::Multimodal(e) => {
                                                    *base
                                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<u8>() = (1i32) as u8;
                                                    let vec401 = e;
                                                    let len401 = vec401.len();
                                                    let layout401 = _rt::alloc::Layout::from_size_align_unchecked(
                                                        vec401.len() * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                    let result401 = if layout401.size() != 0 {
                                                        let ptr = _rt::alloc::alloc(layout401).cast::<u8>();
                                                        if ptr.is_null() {
                                                            _rt::alloc::handle_alloc_error(layout401);
                                                        }
                                                        ptr
                                                    } else {
                                                        ::core::ptr::null_mut()
                                                    };
                                                    for (i, e) in vec401.into_iter().enumerate() {
                                                        let base = result401
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let (t371_0, t371_1) = e;
                                                            let vec372 = (t371_0.into_bytes()).into_boxed_slice();
                                                            let ptr372 = vec372.as_ptr().cast::<u8>();
                                                            let len372 = vec372.len();
                                                            ::core::mem::forget(vec372);
                                                            *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>() = len372;
                                                            *base.add(0).cast::<*mut u8>() = ptr372.cast_mut();
                                                            use super::super::super::super::golem::agent::common::ElementSchema as V400;
                                                            match t371_1 {
                                                                V400::ComponentModel(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (0i32) as u8;
                                                                    let super::super::super::super::golem::rpc::types::WitType {
                                                                        nodes: nodes373,
                                                                    } = e;
                                                                    let vec391 = nodes373;
                                                                    let len391 = vec391.len();
                                                                    let layout391 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                        vec391.len()
                                                                            * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                    let result391 = if layout391.size() != 0 {
                                                                        let ptr = _rt::alloc::alloc(layout391).cast::<u8>();
                                                                        if ptr.is_null() {
                                                                            _rt::alloc::handle_alloc_error(layout391);
                                                                        }
                                                                        ptr
                                                                    } else {
                                                                        ::core::ptr::null_mut()
                                                                    };
                                                                    for (i, e) in vec391.into_iter().enumerate() {
                                                                        let base = result391
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let super::super::super::super::golem::rpc::types::NamedWitTypeNode {
                                                                                name: name374,
                                                                                owner: owner374,
                                                                                type_: type_374,
                                                                            } = e;
                                                                            match name374 {
                                                                                Some(e) => {
                                                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                                                    let vec375 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr375 = vec375.as_ptr().cast::<u8>();
                                                                                    let len375 = vec375.len();
                                                                                    ::core::mem::forget(vec375);
                                                                                    *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len375;
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr375.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            match owner374 {
                                                                                Some(e) => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec376 = (e.into_bytes()).into_boxed_slice();
                                                                                    let ptr376 = vec376.as_ptr().cast::<u8>();
                                                                                    let len376 = vec376.len();
                                                                                    ::core::mem::forget(vec376);
                                                                                    *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len376;
                                                                                    *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr376.cast_mut();
                                                                                }
                                                                                None => {
                                                                                    *base
                                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                }
                                                                            };
                                                                            use super::super::super::super::golem::rpc::types::WitTypeNode as V390;
                                                                            match type_374 {
                                                                                V390::RecordType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                    let vec379 = e;
                                                                                    let len379 = vec379.len();
                                                                                    let layout379 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec379.len() * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result379 = if layout379.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout379).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout379);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec379.into_iter().enumerate() {
                                                                                        let base = result379
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t377_0, t377_1) = e;
                                                                                            let vec378 = (t377_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr378 = vec378.as_ptr().cast::<u8>();
                                                                                            let len378 = vec378.len();
                                                                                            ::core::mem::forget(vec378);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len378;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr378.cast_mut();
                                                                                            *base
                                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(t377_1);
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len379;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result379;
                                                                                }
                                                                                V390::VariantType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                    let vec382 = e;
                                                                                    let len382 = vec382.len();
                                                                                    let layout382 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec382.len()
                                                                                            * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result382 = if layout382.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout382).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout382);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec382.into_iter().enumerate() {
                                                                                        let base = result382
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let (t380_0, t380_1) = e;
                                                                                            let vec381 = (t380_0.into_bytes()).into_boxed_slice();
                                                                                            let ptr381 = vec381.as_ptr().cast::<u8>();
                                                                                            let len381 = vec381.len();
                                                                                            ::core::mem::forget(vec381);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len381;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr381.cast_mut();
                                                                                            match t380_1 {
                                                                                                Some(e) => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (1i32) as u8;
                                                                                                    *base
                                                                                                        .add(4 + 2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                                }
                                                                                                None => {
                                                                                                    *base
                                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                                        .cast::<u8>() = (0i32) as u8;
                                                                                                }
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len382;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result382;
                                                                                }
                                                                                V390::EnumType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (2i32) as u8;
                                                                                    let vec384 = e;
                                                                                    let len384 = vec384.len();
                                                                                    let layout384 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec384.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result384 = if layout384.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout384).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout384);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec384.into_iter().enumerate() {
                                                                                        let base = result384
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec383 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr383 = vec383.as_ptr().cast::<u8>();
                                                                                            let len383 = vec383.len();
                                                                                            ::core::mem::forget(vec383);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len383;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr383.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len384;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result384;
                                                                                }
                                                                                V390::FlagsType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (3i32) as u8;
                                                                                    let vec386 = e;
                                                                                    let len386 = vec386.len();
                                                                                    let layout386 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                        vec386.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                    let result386 = if layout386.size() != 0 {
                                                                                        let ptr = _rt::alloc::alloc(layout386).cast::<u8>();
                                                                                        if ptr.is_null() {
                                                                                            _rt::alloc::handle_alloc_error(layout386);
                                                                                        }
                                                                                        ptr
                                                                                    } else {
                                                                                        ::core::ptr::null_mut()
                                                                                    };
                                                                                    for (i, e) in vec386.into_iter().enumerate() {
                                                                                        let base = result386
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let vec385 = (e.into_bytes()).into_boxed_slice();
                                                                                            let ptr385 = vec385.as_ptr().cast::<u8>();
                                                                                            let len385 = vec385.len();
                                                                                            ::core::mem::forget(vec385);
                                                                                            *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>() = len385;
                                                                                            *base.add(0).cast::<*mut u8>() = ptr385.cast_mut();
                                                                                        }
                                                                                    }
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len386;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = result386;
                                                                                }
                                                                                V390::TupleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (4i32) as u8;
                                                                                    let vec387 = (e).into_boxed_slice();
                                                                                    let ptr387 = vec387.as_ptr().cast::<u8>();
                                                                                    let len387 = vec387.len();
                                                                                    ::core::mem::forget(vec387);
                                                                                    *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len387;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>() = ptr387.cast_mut();
                                                                                }
                                                                                V390::ListType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (5i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V390::OptionType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (6i32) as u8;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i32>() = _rt::as_i32(e);
                                                                                }
                                                                                V390::ResultType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (7i32) as u8;
                                                                                    let (t388_0, t388_1) = e;
                                                                                    match t388_0 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(12 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                    match t388_1 {
                                                                                        Some(e) => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (1i32) as u8;
                                                                                            *base
                                                                                                .add(20 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<i32>() = _rt::as_i32(e);
                                                                                        }
                                                                                        None => {
                                                                                            *base
                                                                                                .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                                .cast::<u8>() = (0i32) as u8;
                                                                                        }
                                                                                    };
                                                                                }
                                                                                V390::PrimU8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (8i32) as u8;
                                                                                }
                                                                                V390::PrimU16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (9i32) as u8;
                                                                                }
                                                                                V390::PrimU32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (10i32) as u8;
                                                                                }
                                                                                V390::PrimU64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (11i32) as u8;
                                                                                }
                                                                                V390::PrimS8Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (12i32) as u8;
                                                                                }
                                                                                V390::PrimS16Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (13i32) as u8;
                                                                                }
                                                                                V390::PrimS32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (14i32) as u8;
                                                                                }
                                                                                V390::PrimS64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (15i32) as u8;
                                                                                }
                                                                                V390::PrimF32Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (16i32) as u8;
                                                                                }
                                                                                V390::PrimF64Type => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (17i32) as u8;
                                                                                }
                                                                                V390::PrimCharType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (18i32) as u8;
                                                                                }
                                                                                V390::PrimBoolType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (19i32) as u8;
                                                                                }
                                                                                V390::PrimStringType => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (20i32) as u8;
                                                                                }
                                                                                V390::HandleType(e) => {
                                                                                    *base
                                                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (21i32) as u8;
                                                                                    let (t389_0, t389_1) = e;
                                                                                    *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<i64>() = _rt::as_i64(t389_0);
                                                                                    *base
                                                                                        .add(16 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<u8>() = (t389_1.clone() as i32) as u8;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>() = len391;
                                                                    *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>() = result391;
                                                                }
                                                                V400::UnstructuredText(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (1i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::TextDescriptor {
                                                                        restrictions: restrictions392,
                                                                    } = e;
                                                                    match restrictions392 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec395 = e;
                                                                            let len395 = vec395.len();
                                                                            let layout395 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec395.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result395 = if layout395.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout395).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout395);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec395.into_iter().enumerate() {
                                                                                let base = result395
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::TextType {
                                                                                        language_code: language_code393,
                                                                                    } = e;
                                                                                    let vec394 = (language_code393.into_bytes())
                                                                                        .into_boxed_slice();
                                                                                    let ptr394 = vec394.as_ptr().cast::<u8>();
                                                                                    let len394 = vec394.len();
                                                                                    ::core::mem::forget(vec394);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len394;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr394.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len395;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result395;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                                V400::UnstructuredBinary(e) => {
                                                                    *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<u8>() = (2i32) as u8;
                                                                    let super::super::super::super::golem::agent::common::BinaryDescriptor {
                                                                        restrictions: restrictions396,
                                                                    } = e;
                                                                    match restrictions396 {
                                                                        Some(e) => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (1i32) as u8;
                                                                            let vec399 = e;
                                                                            let len399 = vec399.len();
                                                                            let layout399 = _rt::alloc::Layout::from_size_align_unchecked(
                                                                                vec399.len() * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                            let result399 = if layout399.size() != 0 {
                                                                                let ptr = _rt::alloc::alloc(layout399).cast::<u8>();
                                                                                if ptr.is_null() {
                                                                                    _rt::alloc::handle_alloc_error(layout399);
                                                                                }
                                                                                ptr
                                                                            } else {
                                                                                ::core::ptr::null_mut()
                                                                            };
                                                                            for (i, e) in vec399.into_iter().enumerate() {
                                                                                let base = result399
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let super::super::super::super::golem::agent::common::BinaryType {
                                                                                        mime_type: mime_type397,
                                                                                    } = e;
                                                                                    let vec398 = (mime_type397.into_bytes()).into_boxed_slice();
                                                                                    let ptr398 = vec398.as_ptr().cast::<u8>();
                                                                                    let len398 = vec398.len();
                                                                                    ::core::mem::forget(vec398);
                                                                                    *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>() = len398;
                                                                                    *base.add(0).cast::<*mut u8>() = ptr398.cast_mut();
                                                                                }
                                                                            }
                                                                            *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>() = len399;
                                                                            *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>() = result399;
                                                                        }
                                                                        None => {
                                                                            *base
                                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<u8>() = (0i32) as u8;
                                                                        }
                                                                    };
                                                                }
                                                            }
                                                        }
                                                    }
                                                    *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>() = len401;
                                                    *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>() = result401;
                                                }
                                            }
                                        }
                                    }
                                    *base
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>() = len403;
                                    *base
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>() = result403;
                                }
                            }
                            *base
                                .add(18 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>() = len404;
                            *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>() = result404;
                        }
                    }
                    *ptr1.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len405;
                    *ptr1.add(0).cast::<*mut u8>() = result405;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_discover_agent_types<T: Guest>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    let base668 = l0;
                    let len668 = l1;
                    for i in 0..len668 {
                        let base = base668
                            .add(i * (19 * ::core::mem::size_of::<*const u8>()));
                        {
                            let l2 = *base.add(0).cast::<*mut u8>();
                            let l3 = *base
                                .add(::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l2, l3, 1);
                            let l4 = *base
                                .add(2 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l5 = *base
                                .add(3 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                            let l6 = i32::from(
                                *base
                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l6 {
                                0 => {}
                                _ => {
                                    let l7 = *base
                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l8 = *base
                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l7, l8, 1);
                                }
                            }
                            let l9 = *base
                                .add(7 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l10 = *base
                                .add(8 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            _rt::cabi_dealloc(l9, l10, 1);
                            let l11 = i32::from(
                                *base
                                    .add(9 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l11 {
                                0 => {}
                                _ => {
                                    let l12 = *base
                                        .add(10 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l13 = *base
                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l12, l13, 1);
                                }
                            }
                            let l14 = i32::from(
                                *base
                                    .add(12 * ::core::mem::size_of::<*const u8>())
                                    .cast::<u8>(),
                            );
                            match l14 {
                                0 => {
                                    let l15 = *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l16 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base65 = l15;
                                    let len65 = l16;
                                    for i in 0..len65 {
                                        let base = base65
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l17 = *base.add(0).cast::<*mut u8>();
                                            let l18 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l17, l18, 1);
                                            let l19 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l19 {
                                                0 => {
                                                    let l20 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l21 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base52 = l20;
                                                    let len52 = l21;
                                                    for i in 0..len52 {
                                                        let base = base52
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l22 = i32::from(*base.add(0).cast::<u8>());
                                                            match l22 {
                                                                0 => {}
                                                                _ => {
                                                                    let l23 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l24 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l23, l24, 1);
                                                                }
                                                            }
                                                            let l25 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l25 {
                                                                0 => {}
                                                                _ => {
                                                                    let l26 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l27 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l26, l27, 1);
                                                                }
                                                            }
                                                            let l28 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l28 {
                                                                0 => {
                                                                    let l29 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l30 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base33 = l29;
                                                                    let len33 = l30;
                                                                    for i in 0..len33 {
                                                                        let base = base33
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l31 = *base.add(0).cast::<*mut u8>();
                                                                            let l32 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l31, l32, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base33,
                                                                        len33 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l34 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l35 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base38 = l34;
                                                                    let len38 = l35;
                                                                    for i in 0..len38 {
                                                                        let base = base38
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l36 = *base.add(0).cast::<*mut u8>();
                                                                            let l37 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l36, l37, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base38,
                                                                        len38 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l39 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l40 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base43 = l39;
                                                                    let len43 = l40;
                                                                    for i in 0..len43 {
                                                                        let base = base43
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l41 = *base.add(0).cast::<*mut u8>();
                                                                            let l42 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l41, l42, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base43,
                                                                        len43 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l44 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l45 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base48 = l44;
                                                                    let len48 = l45;
                                                                    for i in 0..len48 {
                                                                        let base = base48
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l46 = *base.add(0).cast::<*mut u8>();
                                                                            let l47 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l46, l47, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base48,
                                                                        len48 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l49 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l50 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base51 = l49;
                                                                    let len51 = l50;
                                                                    _rt::cabi_dealloc(base51, len51 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base52,
                                                        len52 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l53 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l53 {
                                                        0 => {}
                                                        _ => {
                                                            let l54 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l55 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base58 = l54;
                                                            let len58 = l55;
                                                            for i in 0..len58 {
                                                                let base = base58
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l56 = *base.add(0).cast::<*mut u8>();
                                                                    let l57 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l56, l57, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base58,
                                                                len58 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l59 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l59 {
                                                        0 => {}
                                                        _ => {
                                                            let l60 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l61 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base64 = l60;
                                                            let len64 = l61;
                                                            for i in 0..len64 {
                                                                let base = base64
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l62 = *base.add(0).cast::<*mut u8>();
                                                                    let l63 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l62, l63, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base64,
                                                                len64 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base65,
                                        len65 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                                _ => {
                                    let l66 = *base
                                        .add(13 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l67 = *base
                                        .add(14 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base116 = l66;
                                    let len116 = l67;
                                    for i in 0..len116 {
                                        let base = base116
                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l68 = *base.add(0).cast::<*mut u8>();
                                            let l69 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l68, l69, 1);
                                            let l70 = i32::from(
                                                *base
                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l70 {
                                                0 => {
                                                    let l71 = *base
                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l72 = *base
                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base103 = l71;
                                                    let len103 = l72;
                                                    for i in 0..len103 {
                                                        let base = base103
                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l73 = i32::from(*base.add(0).cast::<u8>());
                                                            match l73 {
                                                                0 => {}
                                                                _ => {
                                                                    let l74 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l75 = *base
                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l74, l75, 1);
                                                                }
                                                            }
                                                            let l76 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l76 {
                                                                0 => {}
                                                                _ => {
                                                                    let l77 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l78 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l77, l78, 1);
                                                                }
                                                            }
                                                            let l79 = i32::from(
                                                                *base
                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l79 {
                                                                0 => {
                                                                    let l80 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l81 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base84 = l80;
                                                                    let len84 = l81;
                                                                    for i in 0..len84 {
                                                                        let base = base84
                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l82 = *base.add(0).cast::<*mut u8>();
                                                                            let l83 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l82, l83, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base84,
                                                                        len84 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l85 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l86 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base89 = l85;
                                                                    let len89 = l86;
                                                                    for i in 0..len89 {
                                                                        let base = base89
                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l87 = *base.add(0).cast::<*mut u8>();
                                                                            let l88 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l87, l88, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base89,
                                                                        len89 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                2 => {
                                                                    let l90 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l91 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base94 = l90;
                                                                    let len94 = l91;
                                                                    for i in 0..len94 {
                                                                        let base = base94
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l92 = *base.add(0).cast::<*mut u8>();
                                                                            let l93 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l92, l93, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base94,
                                                                        len94 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                3 => {
                                                                    let l95 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l96 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base99 = l95;
                                                                    let len99 = l96;
                                                                    for i in 0..len99 {
                                                                        let base = base99
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l97 = *base.add(0).cast::<*mut u8>();
                                                                            let l98 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l97, l98, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base99,
                                                                        len99 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                                4 => {
                                                                    let l100 = *base
                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l101 = *base
                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base102 = l100;
                                                                    let len102 = l101;
                                                                    _rt::cabi_dealloc(base102, len102 * 4, 4);
                                                                }
                                                                5 => {}
                                                                6 => {}
                                                                7 => {}
                                                                8 => {}
                                                                9 => {}
                                                                10 => {}
                                                                11 => {}
                                                                12 => {}
                                                                13 => {}
                                                                14 => {}
                                                                15 => {}
                                                                16 => {}
                                                                17 => {}
                                                                18 => {}
                                                                19 => {}
                                                                20 => {}
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base103,
                                                        len103 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                        8,
                                                    );
                                                }
                                                1 => {
                                                    let l104 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l104 {
                                                        0 => {}
                                                        _ => {
                                                            let l105 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l106 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base109 = l105;
                                                            let len109 = l106;
                                                            for i in 0..len109 {
                                                                let base = base109
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l107 = *base.add(0).cast::<*mut u8>();
                                                                    let l108 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l107, l108, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base109,
                                                                len109 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l110 = i32::from(
                                                        *base
                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l110 {
                                                        0 => {}
                                                        _ => {
                                                            let l111 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l112 = *base
                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base115 = l111;
                                                            let len115 = l112;
                                                            for i in 0..len115 {
                                                                let base = base115
                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l113 = *base.add(0).cast::<*mut u8>();
                                                                    let l114 = *base
                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    _rt::cabi_dealloc(l113, l114, 1);
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base115,
                                                                len115 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                ::core::mem::size_of::<*const u8>(),
                                                            );
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base116,
                                        len116 * (6 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            let l117 = *base
                                .add(15 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l118 = *base
                                .add(16 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base332 = l117;
                            let len332 = l118;
                            for i in 0..len332 {
                                let base = base332
                                    .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l119 = *base.add(0).cast::<*mut u8>();
                                    let l120 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l119, l120, 1);
                                    let l121 = *base
                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l122 = *base
                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l121, l122, 1);
                                    let l123 = i32::from(
                                        *base
                                            .add(4 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l123 {
                                        0 => {}
                                        _ => {
                                            let l124 = *base
                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l125 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l124, l125, 1);
                                        }
                                    }
                                    let l126 = i32::from(
                                        *base
                                            .add(7 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l126 {
                                        0 => {
                                            let l127 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l128 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base177 = l127;
                                            let len177 = l128;
                                            for i in 0..len177 {
                                                let base = base177
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l129 = *base.add(0).cast::<*mut u8>();
                                                    let l130 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l129, l130, 1);
                                                    let l131 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l131 {
                                                        0 => {
                                                            let l132 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l133 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base164 = l132;
                                                            let len164 = l133;
                                                            for i in 0..len164 {
                                                                let base = base164
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l134 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l134 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l135 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l136 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l135, l136, 1);
                                                                        }
                                                                    }
                                                                    let l137 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l137 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l138 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l139 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l138, l139, 1);
                                                                        }
                                                                    }
                                                                    let l140 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l140 {
                                                                        0 => {
                                                                            let l141 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l142 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base145 = l141;
                                                                            let len145 = l142;
                                                                            for i in 0..len145 {
                                                                                let base = base145
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l143 = *base.add(0).cast::<*mut u8>();
                                                                                    let l144 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l143, l144, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base145,
                                                                                len145 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l146 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l147 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base150 = l146;
                                                                            let len150 = l147;
                                                                            for i in 0..len150 {
                                                                                let base = base150
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l148 = *base.add(0).cast::<*mut u8>();
                                                                                    let l149 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l148, l149, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base150,
                                                                                len150 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l151 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l152 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base155 = l151;
                                                                            let len155 = l152;
                                                                            for i in 0..len155 {
                                                                                let base = base155
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l153 = *base.add(0).cast::<*mut u8>();
                                                                                    let l154 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l153, l154, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base155,
                                                                                len155 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l156 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l157 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base160 = l156;
                                                                            let len160 = l157;
                                                                            for i in 0..len160 {
                                                                                let base = base160
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l158 = *base.add(0).cast::<*mut u8>();
                                                                                    let l159 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l158, l159, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base160,
                                                                                len160 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l161 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l162 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base163 = l161;
                                                                            let len163 = l162;
                                                                            _rt::cabi_dealloc(base163, len163 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base164,
                                                                len164 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l165 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l165 {
                                                                0 => {}
                                                                _ => {
                                                                    let l166 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l167 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base170 = l166;
                                                                    let len170 = l167;
                                                                    for i in 0..len170 {
                                                                        let base = base170
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l168 = *base.add(0).cast::<*mut u8>();
                                                                            let l169 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l168, l169, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base170,
                                                                        len170 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l171 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l171 {
                                                                0 => {}
                                                                _ => {
                                                                    let l172 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l173 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base176 = l172;
                                                                    let len176 = l173;
                                                                    for i in 0..len176 {
                                                                        let base = base176
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l174 = *base.add(0).cast::<*mut u8>();
                                                                            let l175 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l174, l175, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base176,
                                                                        len176 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base177,
                                                len177 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l178 = *base
                                                .add(8 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l179 = *base
                                                .add(9 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base228 = l178;
                                            let len228 = l179;
                                            for i in 0..len228 {
                                                let base = base228
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l180 = *base.add(0).cast::<*mut u8>();
                                                    let l181 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l180, l181, 1);
                                                    let l182 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l182 {
                                                        0 => {
                                                            let l183 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l184 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base215 = l183;
                                                            let len215 = l184;
                                                            for i in 0..len215 {
                                                                let base = base215
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l185 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l185 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l186 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l187 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l186, l187, 1);
                                                                        }
                                                                    }
                                                                    let l188 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l188 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l189 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l190 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l189, l190, 1);
                                                                        }
                                                                    }
                                                                    let l191 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l191 {
                                                                        0 => {
                                                                            let l192 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l193 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base196 = l192;
                                                                            let len196 = l193;
                                                                            for i in 0..len196 {
                                                                                let base = base196
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l194 = *base.add(0).cast::<*mut u8>();
                                                                                    let l195 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l194, l195, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base196,
                                                                                len196 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l197 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l198 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base201 = l197;
                                                                            let len201 = l198;
                                                                            for i in 0..len201 {
                                                                                let base = base201
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l199 = *base.add(0).cast::<*mut u8>();
                                                                                    let l200 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l199, l200, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base201,
                                                                                len201 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l202 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l203 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base206 = l202;
                                                                            let len206 = l203;
                                                                            for i in 0..len206 {
                                                                                let base = base206
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l204 = *base.add(0).cast::<*mut u8>();
                                                                                    let l205 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l204, l205, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base206,
                                                                                len206 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l207 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l208 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base211 = l207;
                                                                            let len211 = l208;
                                                                            for i in 0..len211 {
                                                                                let base = base211
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l209 = *base.add(0).cast::<*mut u8>();
                                                                                    let l210 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l209, l210, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base211,
                                                                                len211 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l212 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l213 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base214 = l212;
                                                                            let len214 = l213;
                                                                            _rt::cabi_dealloc(base214, len214 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base215,
                                                                len215 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l216 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l216 {
                                                                0 => {}
                                                                _ => {
                                                                    let l217 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l218 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base221 = l217;
                                                                    let len221 = l218;
                                                                    for i in 0..len221 {
                                                                        let base = base221
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l219 = *base.add(0).cast::<*mut u8>();
                                                                            let l220 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l219, l220, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base221,
                                                                        len221 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l222 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l222 {
                                                                0 => {}
                                                                _ => {
                                                                    let l223 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l224 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base227 = l223;
                                                                    let len227 = l224;
                                                                    for i in 0..len227 {
                                                                        let base = base227
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l225 = *base.add(0).cast::<*mut u8>();
                                                                            let l226 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l225, l226, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base227,
                                                                        len227 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base228,
                                                len228 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l229 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l229 {
                                        0 => {
                                            let l230 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l231 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base280 = l230;
                                            let len280 = l231;
                                            for i in 0..len280 {
                                                let base = base280
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l232 = *base.add(0).cast::<*mut u8>();
                                                    let l233 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l232, l233, 1);
                                                    let l234 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l234 {
                                                        0 => {
                                                            let l235 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l236 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base267 = l235;
                                                            let len267 = l236;
                                                            for i in 0..len267 {
                                                                let base = base267
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l237 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l237 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l238 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l239 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l238, l239, 1);
                                                                        }
                                                                    }
                                                                    let l240 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l240 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l241 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l242 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l241, l242, 1);
                                                                        }
                                                                    }
                                                                    let l243 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l243 {
                                                                        0 => {
                                                                            let l244 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l245 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base248 = l244;
                                                                            let len248 = l245;
                                                                            for i in 0..len248 {
                                                                                let base = base248
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l246 = *base.add(0).cast::<*mut u8>();
                                                                                    let l247 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l246, l247, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base248,
                                                                                len248 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l249 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l250 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base253 = l249;
                                                                            let len253 = l250;
                                                                            for i in 0..len253 {
                                                                                let base = base253
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l251 = *base.add(0).cast::<*mut u8>();
                                                                                    let l252 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l251, l252, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base253,
                                                                                len253 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l254 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l255 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base258 = l254;
                                                                            let len258 = l255;
                                                                            for i in 0..len258 {
                                                                                let base = base258
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l256 = *base.add(0).cast::<*mut u8>();
                                                                                    let l257 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l256, l257, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base258,
                                                                                len258 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l259 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l260 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base263 = l259;
                                                                            let len263 = l260;
                                                                            for i in 0..len263 {
                                                                                let base = base263
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l261 = *base.add(0).cast::<*mut u8>();
                                                                                    let l262 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l261, l262, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base263,
                                                                                len263 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l264 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l265 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base266 = l264;
                                                                            let len266 = l265;
                                                                            _rt::cabi_dealloc(base266, len266 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base267,
                                                                len267 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l268 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l268 {
                                                                0 => {}
                                                                _ => {
                                                                    let l269 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l270 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base273 = l269;
                                                                    let len273 = l270;
                                                                    for i in 0..len273 {
                                                                        let base = base273
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l271 = *base.add(0).cast::<*mut u8>();
                                                                            let l272 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l271, l272, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base273,
                                                                        len273 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l274 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l274 {
                                                                0 => {}
                                                                _ => {
                                                                    let l275 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l276 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base279 = l275;
                                                                    let len279 = l276;
                                                                    for i in 0..len279 {
                                                                        let base = base279
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l277 = *base.add(0).cast::<*mut u8>();
                                                                            let l278 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l277, l278, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base279,
                                                                        len279 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base280,
                                                len280 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l281 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l282 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base331 = l281;
                                            let len331 = l282;
                                            for i in 0..len331 {
                                                let base = base331
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l283 = *base.add(0).cast::<*mut u8>();
                                                    let l284 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l283, l284, 1);
                                                    let l285 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l285 {
                                                        0 => {
                                                            let l286 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l287 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base318 = l286;
                                                            let len318 = l287;
                                                            for i in 0..len318 {
                                                                let base = base318
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l288 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l288 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l289 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l290 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l289, l290, 1);
                                                                        }
                                                                    }
                                                                    let l291 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l291 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l292 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l293 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l292, l293, 1);
                                                                        }
                                                                    }
                                                                    let l294 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l294 {
                                                                        0 => {
                                                                            let l295 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l296 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base299 = l295;
                                                                            let len299 = l296;
                                                                            for i in 0..len299 {
                                                                                let base = base299
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l297 = *base.add(0).cast::<*mut u8>();
                                                                                    let l298 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l297, l298, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base299,
                                                                                len299 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l300 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l301 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base304 = l300;
                                                                            let len304 = l301;
                                                                            for i in 0..len304 {
                                                                                let base = base304
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l302 = *base.add(0).cast::<*mut u8>();
                                                                                    let l303 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l302, l303, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base304,
                                                                                len304 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l305 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l306 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base309 = l305;
                                                                            let len309 = l306;
                                                                            for i in 0..len309 {
                                                                                let base = base309
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l307 = *base.add(0).cast::<*mut u8>();
                                                                                    let l308 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l307, l308, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base309,
                                                                                len309 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l310 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l311 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base314 = l310;
                                                                            let len314 = l311;
                                                                            for i in 0..len314 {
                                                                                let base = base314
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l312 = *base.add(0).cast::<*mut u8>();
                                                                                    let l313 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l312, l313, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base314,
                                                                                len314 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l315 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l316 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base317 = l315;
                                                                            let len317 = l316;
                                                                            _rt::cabi_dealloc(base317, len317 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base318,
                                                                len318 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l319 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l319 {
                                                                0 => {}
                                                                _ => {
                                                                    let l320 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l321 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base324 = l320;
                                                                    let len324 = l321;
                                                                    for i in 0..len324 {
                                                                        let base = base324
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l322 = *base.add(0).cast::<*mut u8>();
                                                                            let l323 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l322, l323, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base324,
                                                                        len324 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l325 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l325 {
                                                                0 => {}
                                                                _ => {
                                                                    let l326 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l327 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base330 = l326;
                                                                    let len330 = l327;
                                                                    for i in 0..len330 {
                                                                        let base = base330
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l328 = *base.add(0).cast::<*mut u8>();
                                                                            let l329 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l328, l329, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base330,
                                                                        len330 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base331,
                                                len331 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(
                                base332,
                                len332 * (13 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                            let l333 = *base
                                .add(17 * ::core::mem::size_of::<*const u8>())
                                .cast::<*mut u8>();
                            let l334 = *base
                                .add(18 * ::core::mem::size_of::<*const u8>())
                                .cast::<usize>();
                            let base667 = l333;
                            let len667 = l334;
                            for i in 0..len667 {
                                let base = base667
                                    .add(i * (18 * ::core::mem::size_of::<*const u8>()));
                                {
                                    let l335 = *base.add(0).cast::<*mut u8>();
                                    let l336 = *base
                                        .add(::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l335, l336, 1);
                                    let l337 = i32::from(
                                        *base
                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l337 {
                                        0 => {}
                                        _ => {
                                            let l338 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l339 = *base
                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l338, l339, 1);
                                        }
                                    }
                                    let l340 = i32::from(
                                        *base
                                            .add(5 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l340 {
                                        0 => {}
                                        _ => {
                                            let l341 = *base
                                                .add(6 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l342 = *base
                                                .add(7 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l341, l342, 1);
                                        }
                                    }
                                    let l343 = *base
                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l344 = *base
                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    _rt::cabi_dealloc(l343, l344, 1);
                                    let l345 = i32::from(
                                        *base
                                            .add(10 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l345 {
                                        0 => {}
                                        _ => {
                                            let l346 = *base
                                                .add(11 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l347 = *base
                                                .add(12 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l346, l347, 1);
                                        }
                                    }
                                    let l348 = i32::from(
                                        *base
                                            .add(13 * ::core::mem::size_of::<*const u8>())
                                            .cast::<u8>(),
                                    );
                                    match l348 {
                                        0 => {
                                            let l349 = *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l350 = *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base399 = l349;
                                            let len399 = l350;
                                            for i in 0..len399 {
                                                let base = base399
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l351 = *base.add(0).cast::<*mut u8>();
                                                    let l352 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l351, l352, 1);
                                                    let l353 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l353 {
                                                        0 => {
                                                            let l354 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l355 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base386 = l354;
                                                            let len386 = l355;
                                                            for i in 0..len386 {
                                                                let base = base386
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l356 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l356 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l357 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l358 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l357, l358, 1);
                                                                        }
                                                                    }
                                                                    let l359 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l359 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l360 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l361 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l360, l361, 1);
                                                                        }
                                                                    }
                                                                    let l362 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l362 {
                                                                        0 => {
                                                                            let l363 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l364 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base367 = l363;
                                                                            let len367 = l364;
                                                                            for i in 0..len367 {
                                                                                let base = base367
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l365 = *base.add(0).cast::<*mut u8>();
                                                                                    let l366 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l365, l366, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base367,
                                                                                len367 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l368 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l369 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base372 = l368;
                                                                            let len372 = l369;
                                                                            for i in 0..len372 {
                                                                                let base = base372
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l370 = *base.add(0).cast::<*mut u8>();
                                                                                    let l371 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l370, l371, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base372,
                                                                                len372 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l373 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l374 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base377 = l373;
                                                                            let len377 = l374;
                                                                            for i in 0..len377 {
                                                                                let base = base377
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l375 = *base.add(0).cast::<*mut u8>();
                                                                                    let l376 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l375, l376, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base377,
                                                                                len377 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l378 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l379 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base382 = l378;
                                                                            let len382 = l379;
                                                                            for i in 0..len382 {
                                                                                let base = base382
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l380 = *base.add(0).cast::<*mut u8>();
                                                                                    let l381 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l380, l381, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base382,
                                                                                len382 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l383 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l384 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base385 = l383;
                                                                            let len385 = l384;
                                                                            _rt::cabi_dealloc(base385, len385 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base386,
                                                                len386 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l387 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l387 {
                                                                0 => {}
                                                                _ => {
                                                                    let l388 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l389 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base392 = l388;
                                                                    let len392 = l389;
                                                                    for i in 0..len392 {
                                                                        let base = base392
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l390 = *base.add(0).cast::<*mut u8>();
                                                                            let l391 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l390, l391, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base392,
                                                                        len392 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l393 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l393 {
                                                                0 => {}
                                                                _ => {
                                                                    let l394 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l395 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base398 = l394;
                                                                    let len398 = l395;
                                                                    for i in 0..len398 {
                                                                        let base = base398
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l396 = *base.add(0).cast::<*mut u8>();
                                                                            let l397 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l396, l397, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base398,
                                                                        len398 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base399,
                                                len399 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                        _ => {
                                            let l400 = *base
                                                .add(14 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l401 = *base
                                                .add(15 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            let base450 = l400;
                                            let len450 = l401;
                                            for i in 0..len450 {
                                                let base = base450
                                                    .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                {
                                                    let l402 = *base.add(0).cast::<*mut u8>();
                                                    let l403 = *base
                                                        .add(::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l402, l403, 1);
                                                    let l404 = i32::from(
                                                        *base
                                                            .add(2 * ::core::mem::size_of::<*const u8>())
                                                            .cast::<u8>(),
                                                    );
                                                    match l404 {
                                                        0 => {
                                                            let l405 = *base
                                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<*mut u8>();
                                                            let l406 = *base
                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            let base437 = l405;
                                                            let len437 = l406;
                                                            for i in 0..len437 {
                                                                let base = base437
                                                                    .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                {
                                                                    let l407 = i32::from(*base.add(0).cast::<u8>());
                                                                    match l407 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l408 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l409 = *base
                                                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l408, l409, 1);
                                                                        }
                                                                    }
                                                                    let l410 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l410 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l411 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l412 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l411, l412, 1);
                                                                        }
                                                                    }
                                                                    let l413 = i32::from(
                                                                        *base
                                                                            .add(6 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l413 {
                                                                        0 => {
                                                                            let l414 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l415 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base418 = l414;
                                                                            let len418 = l415;
                                                                            for i in 0..len418 {
                                                                                let base = base418
                                                                                    .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l416 = *base.add(0).cast::<*mut u8>();
                                                                                    let l417 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l416, l417, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base418,
                                                                                len418 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        1 => {
                                                                            let l419 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l420 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base423 = l419;
                                                                            let len423 = l420;
                                                                            for i in 0..len423 {
                                                                                let base = base423
                                                                                    .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l421 = *base.add(0).cast::<*mut u8>();
                                                                                    let l422 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l421, l422, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base423,
                                                                                len423 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        2 => {
                                                                            let l424 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l425 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base428 = l424;
                                                                            let len428 = l425;
                                                                            for i in 0..len428 {
                                                                                let base = base428
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l426 = *base.add(0).cast::<*mut u8>();
                                                                                    let l427 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l426, l427, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base428,
                                                                                len428 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        3 => {
                                                                            let l429 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l430 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base433 = l429;
                                                                            let len433 = l430;
                                                                            for i in 0..len433 {
                                                                                let base = base433
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l431 = *base.add(0).cast::<*mut u8>();
                                                                                    let l432 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l431, l432, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base433,
                                                                                len433 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                        4 => {
                                                                            let l434 = *base
                                                                                .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l435 = *base
                                                                                .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base436 = l434;
                                                                            let len436 = l435;
                                                                            _rt::cabi_dealloc(base436, len436 * 4, 4);
                                                                        }
                                                                        5 => {}
                                                                        6 => {}
                                                                        7 => {}
                                                                        8 => {}
                                                                        9 => {}
                                                                        10 => {}
                                                                        11 => {}
                                                                        12 => {}
                                                                        13 => {}
                                                                        14 => {}
                                                                        15 => {}
                                                                        16 => {}
                                                                        17 => {}
                                                                        18 => {}
                                                                        19 => {}
                                                                        20 => {}
                                                                        _ => {}
                                                                    }
                                                                }
                                                            }
                                                            _rt::cabi_dealloc(
                                                                base437,
                                                                len437 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                8,
                                                            );
                                                        }
                                                        1 => {
                                                            let l438 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l438 {
                                                                0 => {}
                                                                _ => {
                                                                    let l439 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l440 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base443 = l439;
                                                                    let len443 = l440;
                                                                    for i in 0..len443 {
                                                                        let base = base443
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l441 = *base.add(0).cast::<*mut u8>();
                                                                            let l442 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l441, l442, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base443,
                                                                        len443 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                        _ => {
                                                            let l444 = i32::from(
                                                                *base
                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l444 {
                                                                0 => {}
                                                                _ => {
                                                                    let l445 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l446 = *base
                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base449 = l445;
                                                                    let len449 = l446;
                                                                    for i in 0..len449 {
                                                                        let base = base449
                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l447 = *base.add(0).cast::<*mut u8>();
                                                                            let l448 = *base
                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            _rt::cabi_dealloc(l447, l448, 1);
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base449,
                                                                        len449 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                        ::core::mem::size_of::<*const u8>(),
                                                                    );
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            _rt::cabi_dealloc(
                                                base450,
                                                len450 * (6 * ::core::mem::size_of::<*const u8>()),
                                                ::core::mem::size_of::<*const u8>(),
                                            );
                                        }
                                    }
                                    let l451 = *base
                                        .add(16 * ::core::mem::size_of::<*const u8>())
                                        .cast::<*mut u8>();
                                    let l452 = *base
                                        .add(17 * ::core::mem::size_of::<*const u8>())
                                        .cast::<usize>();
                                    let base666 = l451;
                                    let len666 = l452;
                                    for i in 0..len666 {
                                        let base = base666
                                            .add(i * (13 * ::core::mem::size_of::<*const u8>()));
                                        {
                                            let l453 = *base.add(0).cast::<*mut u8>();
                                            let l454 = *base
                                                .add(::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l453, l454, 1);
                                            let l455 = *base
                                                .add(2 * ::core::mem::size_of::<*const u8>())
                                                .cast::<*mut u8>();
                                            let l456 = *base
                                                .add(3 * ::core::mem::size_of::<*const u8>())
                                                .cast::<usize>();
                                            _rt::cabi_dealloc(l455, l456, 1);
                                            let l457 = i32::from(
                                                *base
                                                    .add(4 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l457 {
                                                0 => {}
                                                _ => {
                                                    let l458 = *base
                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l459 = *base
                                                        .add(6 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    _rt::cabi_dealloc(l458, l459, 1);
                                                }
                                            }
                                            let l460 = i32::from(
                                                *base
                                                    .add(7 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l460 {
                                                0 => {
                                                    let l461 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l462 = *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base511 = l461;
                                                    let len511 = l462;
                                                    for i in 0..len511 {
                                                        let base = base511
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l463 = *base.add(0).cast::<*mut u8>();
                                                            let l464 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l463, l464, 1);
                                                            let l465 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l465 {
                                                                0 => {
                                                                    let l466 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l467 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base498 = l466;
                                                                    let len498 = l467;
                                                                    for i in 0..len498 {
                                                                        let base = base498
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l468 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l468 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l469 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l470 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l469, l470, 1);
                                                                                }
                                                                            }
                                                                            let l471 = i32::from(
                                                                                *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l471 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l472 = *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l473 = *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l472, l473, 1);
                                                                                }
                                                                            }
                                                                            let l474 = i32::from(
                                                                                *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l474 {
                                                                                0 => {
                                                                                    let l475 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l476 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base479 = l475;
                                                                                    let len479 = l476;
                                                                                    for i in 0..len479 {
                                                                                        let base = base479
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l477 = *base.add(0).cast::<*mut u8>();
                                                                                            let l478 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l477, l478, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base479,
                                                                                        len479 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l480 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l481 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base484 = l480;
                                                                                    let len484 = l481;
                                                                                    for i in 0..len484 {
                                                                                        let base = base484
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l482 = *base.add(0).cast::<*mut u8>();
                                                                                            let l483 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l482, l483, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base484,
                                                                                        len484 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l485 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l486 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base489 = l485;
                                                                                    let len489 = l486;
                                                                                    for i in 0..len489 {
                                                                                        let base = base489
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l487 = *base.add(0).cast::<*mut u8>();
                                                                                            let l488 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l487, l488, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base489,
                                                                                        len489 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l490 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l491 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base494 = l490;
                                                                                    let len494 = l491;
                                                                                    for i in 0..len494 {
                                                                                        let base = base494
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l492 = *base.add(0).cast::<*mut u8>();
                                                                                            let l493 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l492, l493, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base494,
                                                                                        len494 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l495 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l496 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base497 = l495;
                                                                                    let len497 = l496;
                                                                                    _rt::cabi_dealloc(base497, len497 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base498,
                                                                        len498 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l499 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l499 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l500 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l501 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base504 = l500;
                                                                            let len504 = l501;
                                                                            for i in 0..len504 {
                                                                                let base = base504
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l502 = *base.add(0).cast::<*mut u8>();
                                                                                    let l503 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l502, l503, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base504,
                                                                                len504 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l505 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l505 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l506 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l507 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base510 = l506;
                                                                            let len510 = l507;
                                                                            for i in 0..len510 {
                                                                                let base = base510
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l508 = *base.add(0).cast::<*mut u8>();
                                                                                    let l509 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l508, l509, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base510,
                                                                                len510 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base511,
                                                        len511 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l512 = *base
                                                        .add(8 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l513 = *base
                                                        .add(9 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base562 = l512;
                                                    let len562 = l513;
                                                    for i in 0..len562 {
                                                        let base = base562
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l514 = *base.add(0).cast::<*mut u8>();
                                                            let l515 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l514, l515, 1);
                                                            let l516 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l516 {
                                                                0 => {
                                                                    let l517 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l518 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base549 = l517;
                                                                    let len549 = l518;
                                                                    for i in 0..len549 {
                                                                        let base = base549
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l519 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l519 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l520 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l521 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l520, l521, 1);
                                                                                }
                                                                            }
                                                                            let l522 = i32::from(
                                                                                *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l522 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l523 = *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l524 = *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l523, l524, 1);
                                                                                }
                                                                            }
                                                                            let l525 = i32::from(
                                                                                *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l525 {
                                                                                0 => {
                                                                                    let l526 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l527 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base530 = l526;
                                                                                    let len530 = l527;
                                                                                    for i in 0..len530 {
                                                                                        let base = base530
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l528 = *base.add(0).cast::<*mut u8>();
                                                                                            let l529 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l528, l529, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base530,
                                                                                        len530 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l531 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l532 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base535 = l531;
                                                                                    let len535 = l532;
                                                                                    for i in 0..len535 {
                                                                                        let base = base535
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l533 = *base.add(0).cast::<*mut u8>();
                                                                                            let l534 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l533, l534, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base535,
                                                                                        len535 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l536 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l537 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base540 = l536;
                                                                                    let len540 = l537;
                                                                                    for i in 0..len540 {
                                                                                        let base = base540
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l538 = *base.add(0).cast::<*mut u8>();
                                                                                            let l539 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l538, l539, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base540,
                                                                                        len540 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l541 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l542 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base545 = l541;
                                                                                    let len545 = l542;
                                                                                    for i in 0..len545 {
                                                                                        let base = base545
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l543 = *base.add(0).cast::<*mut u8>();
                                                                                            let l544 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l543, l544, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base545,
                                                                                        len545 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l546 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l547 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base548 = l546;
                                                                                    let len548 = l547;
                                                                                    _rt::cabi_dealloc(base548, len548 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base549,
                                                                        len549 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l550 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l550 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l551 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l552 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base555 = l551;
                                                                            let len555 = l552;
                                                                            for i in 0..len555 {
                                                                                let base = base555
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l553 = *base.add(0).cast::<*mut u8>();
                                                                                    let l554 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l553, l554, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base555,
                                                                                len555 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l556 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l556 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l557 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l558 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base561 = l557;
                                                                            let len561 = l558;
                                                                            for i in 0..len561 {
                                                                                let base = base561
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l559 = *base.add(0).cast::<*mut u8>();
                                                                                    let l560 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l559, l560, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base561,
                                                                                len561 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base562,
                                                        len562 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                            let l563 = i32::from(
                                                *base
                                                    .add(10 * ::core::mem::size_of::<*const u8>())
                                                    .cast::<u8>(),
                                            );
                                            match l563 {
                                                0 => {
                                                    let l564 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l565 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base614 = l564;
                                                    let len614 = l565;
                                                    for i in 0..len614 {
                                                        let base = base614
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l566 = *base.add(0).cast::<*mut u8>();
                                                            let l567 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l566, l567, 1);
                                                            let l568 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l568 {
                                                                0 => {
                                                                    let l569 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l570 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base601 = l569;
                                                                    let len601 = l570;
                                                                    for i in 0..len601 {
                                                                        let base = base601
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l571 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l571 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l572 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l573 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l572, l573, 1);
                                                                                }
                                                                            }
                                                                            let l574 = i32::from(
                                                                                *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l574 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l575 = *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l576 = *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l575, l576, 1);
                                                                                }
                                                                            }
                                                                            let l577 = i32::from(
                                                                                *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l577 {
                                                                                0 => {
                                                                                    let l578 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l579 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base582 = l578;
                                                                                    let len582 = l579;
                                                                                    for i in 0..len582 {
                                                                                        let base = base582
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l580 = *base.add(0).cast::<*mut u8>();
                                                                                            let l581 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l580, l581, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base582,
                                                                                        len582 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l583 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l584 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base587 = l583;
                                                                                    let len587 = l584;
                                                                                    for i in 0..len587 {
                                                                                        let base = base587
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l585 = *base.add(0).cast::<*mut u8>();
                                                                                            let l586 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l585, l586, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base587,
                                                                                        len587 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l588 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l589 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base592 = l588;
                                                                                    let len592 = l589;
                                                                                    for i in 0..len592 {
                                                                                        let base = base592
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l590 = *base.add(0).cast::<*mut u8>();
                                                                                            let l591 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l590, l591, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base592,
                                                                                        len592 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l593 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l594 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base597 = l593;
                                                                                    let len597 = l594;
                                                                                    for i in 0..len597 {
                                                                                        let base = base597
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l595 = *base.add(0).cast::<*mut u8>();
                                                                                            let l596 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l595, l596, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base597,
                                                                                        len597 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l598 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l599 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base600 = l598;
                                                                                    let len600 = l599;
                                                                                    _rt::cabi_dealloc(base600, len600 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base601,
                                                                        len601 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l602 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l602 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l603 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l604 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base607 = l603;
                                                                            let len607 = l604;
                                                                            for i in 0..len607 {
                                                                                let base = base607
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l605 = *base.add(0).cast::<*mut u8>();
                                                                                    let l606 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l605, l606, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base607,
                                                                                len607 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l608 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l608 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l609 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l610 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base613 = l609;
                                                                            let len613 = l610;
                                                                            for i in 0..len613 {
                                                                                let base = base613
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l611 = *base.add(0).cast::<*mut u8>();
                                                                                    let l612 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l611, l612, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base613,
                                                                                len613 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base614,
                                                        len614 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                                _ => {
                                                    let l615 = *base
                                                        .add(11 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<*mut u8>();
                                                    let l616 = *base
                                                        .add(12 * ::core::mem::size_of::<*const u8>())
                                                        .cast::<usize>();
                                                    let base665 = l615;
                                                    let len665 = l616;
                                                    for i in 0..len665 {
                                                        let base = base665
                                                            .add(i * (6 * ::core::mem::size_of::<*const u8>()));
                                                        {
                                                            let l617 = *base.add(0).cast::<*mut u8>();
                                                            let l618 = *base
                                                                .add(::core::mem::size_of::<*const u8>())
                                                                .cast::<usize>();
                                                            _rt::cabi_dealloc(l617, l618, 1);
                                                            let l619 = i32::from(
                                                                *base
                                                                    .add(2 * ::core::mem::size_of::<*const u8>())
                                                                    .cast::<u8>(),
                                                            );
                                                            match l619 {
                                                                0 => {
                                                                    let l620 = *base
                                                                        .add(3 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<*mut u8>();
                                                                    let l621 = *base
                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                        .cast::<usize>();
                                                                    let base652 = l620;
                                                                    let len652 = l621;
                                                                    for i in 0..len652 {
                                                                        let base = base652
                                                                            .add(i * (24 + 6 * ::core::mem::size_of::<*const u8>()));
                                                                        {
                                                                            let l622 = i32::from(*base.add(0).cast::<u8>());
                                                                            match l622 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l623 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l624 = *base
                                                                                        .add(2 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l623, l624, 1);
                                                                                }
                                                                            }
                                                                            let l625 = i32::from(
                                                                                *base
                                                                                    .add(3 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l625 {
                                                                                0 => {}
                                                                                _ => {
                                                                                    let l626 = *base
                                                                                        .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l627 = *base
                                                                                        .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l626, l627, 1);
                                                                                }
                                                                            }
                                                                            let l628 = i32::from(
                                                                                *base
                                                                                    .add(6 * ::core::mem::size_of::<*const u8>())
                                                                                    .cast::<u8>(),
                                                                            );
                                                                            match l628 {
                                                                                0 => {
                                                                                    let l629 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l630 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base633 = l629;
                                                                                    let len633 = l630;
                                                                                    for i in 0..len633 {
                                                                                        let base = base633
                                                                                            .add(i * (3 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l631 = *base.add(0).cast::<*mut u8>();
                                                                                            let l632 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l631, l632, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base633,
                                                                                        len633 * (3 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                1 => {
                                                                                    let l634 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l635 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base638 = l634;
                                                                                    let len638 = l635;
                                                                                    for i in 0..len638 {
                                                                                        let base = base638
                                                                                            .add(i * (8 + 2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l636 = *base.add(0).cast::<*mut u8>();
                                                                                            let l637 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l636, l637, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base638,
                                                                                        len638 * (8 + 2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                2 => {
                                                                                    let l639 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l640 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base643 = l639;
                                                                                    let len643 = l640;
                                                                                    for i in 0..len643 {
                                                                                        let base = base643
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l641 = *base.add(0).cast::<*mut u8>();
                                                                                            let l642 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l641, l642, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base643,
                                                                                        len643 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                3 => {
                                                                                    let l644 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l645 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base648 = l644;
                                                                                    let len648 = l645;
                                                                                    for i in 0..len648 {
                                                                                        let base = base648
                                                                                            .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                        {
                                                                                            let l646 = *base.add(0).cast::<*mut u8>();
                                                                                            let l647 = *base
                                                                                                .add(::core::mem::size_of::<*const u8>())
                                                                                                .cast::<usize>();
                                                                                            _rt::cabi_dealloc(l646, l647, 1);
                                                                                        }
                                                                                    }
                                                                                    _rt::cabi_dealloc(
                                                                                        base648,
                                                                                        len648 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                        ::core::mem::size_of::<*const u8>(),
                                                                                    );
                                                                                }
                                                                                4 => {
                                                                                    let l649 = *base
                                                                                        .add(8 + 6 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<*mut u8>();
                                                                                    let l650 = *base
                                                                                        .add(8 + 7 * ::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    let base651 = l649;
                                                                                    let len651 = l650;
                                                                                    _rt::cabi_dealloc(base651, len651 * 4, 4);
                                                                                }
                                                                                5 => {}
                                                                                6 => {}
                                                                                7 => {}
                                                                                8 => {}
                                                                                9 => {}
                                                                                10 => {}
                                                                                11 => {}
                                                                                12 => {}
                                                                                13 => {}
                                                                                14 => {}
                                                                                15 => {}
                                                                                16 => {}
                                                                                17 => {}
                                                                                18 => {}
                                                                                19 => {}
                                                                                20 => {}
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base652,
                                                                        len652 * (24 + 6 * ::core::mem::size_of::<*const u8>()),
                                                                        8,
                                                                    );
                                                                }
                                                                1 => {
                                                                    let l653 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l653 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l654 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l655 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base658 = l654;
                                                                            let len658 = l655;
                                                                            for i in 0..len658 {
                                                                                let base = base658
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l656 = *base.add(0).cast::<*mut u8>();
                                                                                    let l657 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l656, l657, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base658,
                                                                                len658 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                                _ => {
                                                                    let l659 = i32::from(
                                                                        *base
                                                                            .add(3 * ::core::mem::size_of::<*const u8>())
                                                                            .cast::<u8>(),
                                                                    );
                                                                    match l659 {
                                                                        0 => {}
                                                                        _ => {
                                                                            let l660 = *base
                                                                                .add(4 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<*mut u8>();
                                                                            let l661 = *base
                                                                                .add(5 * ::core::mem::size_of::<*const u8>())
                                                                                .cast::<usize>();
                                                                            let base664 = l660;
                                                                            let len664 = l661;
                                                                            for i in 0..len664 {
                                                                                let base = base664
                                                                                    .add(i * (2 * ::core::mem::size_of::<*const u8>()));
                                                                                {
                                                                                    let l662 = *base.add(0).cast::<*mut u8>();
                                                                                    let l663 = *base
                                                                                        .add(::core::mem::size_of::<*const u8>())
                                                                                        .cast::<usize>();
                                                                                    _rt::cabi_dealloc(l662, l663, 1);
                                                                                }
                                                                            }
                                                                            _rt::cabi_dealloc(
                                                                                base664,
                                                                                len664 * (2 * ::core::mem::size_of::<*const u8>()),
                                                                                ::core::mem::size_of::<*const u8>(),
                                                                            );
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _rt::cabi_dealloc(
                                                        base665,
                                                        len665 * (6 * ::core::mem::size_of::<*const u8>()),
                                                        ::core::mem::size_of::<*const u8>(),
                                                    );
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(
                                        base666,
                                        len666 * (13 * ::core::mem::size_of::<*const u8>()),
                                        ::core::mem::size_of::<*const u8>(),
                                    );
                                }
                            }
                            _rt::cabi_dealloc(
                                base667,
                                len667 * (18 * ::core::mem::size_of::<*const u8>()),
                                ::core::mem::size_of::<*const u8>(),
                            );
                        }
                    }
                    _rt::cabi_dealloc(
                        base668,
                        len668 * (19 * ::core::mem::size_of::<*const u8>()),
                        ::core::mem::size_of::<*const u8>(),
                    );
                }
                pub trait Guest {
                    type Agent: GuestAgent;
                    fn get_agent(
                        agent_type: _rt::String,
                        agent_id: _rt::String,
                    ) -> Agent;
                    /// Invokes an agent method on an agent of a given type and ID.
                    /// Equivalent of getting an agent with `get-agent` and calling `invoke` on that.
                    fn invoke_agent(
                        agent_type: _rt::String,
                        agent_id: _rt::String,
                        method_name: _rt::String,
                        input: DataValue,
                    ) -> Result<DataValue, AgentError>;
                    fn discover_agents() -> _rt::Vec<Agent>;
                    fn discover_agent_types() -> _rt::Vec<AgentType>;
                }
                pub trait GuestAgent: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agent/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-new]agent"]
                                fn new(_: *mut u8) -> u32;
                            }
                            unsafe { new(val) }
                        }
                    }
                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }
                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]golem:agent/guest")]
                            unsafe extern "C" {
                                #[link_name = "[resource-rep]agent"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                    fn create(
                        agent_type: _rt::String,
                        input: DataValue,
                    ) -> Result<Agent, AgentError>;
                    fn get_id(&self) -> _rt::String;
                    fn invoke(
                        &self,
                        method_name: _rt::String,
                        input: DataValue,
                    ) -> Result<DataValue, AgentError>;
                    fn get_definition(&self) -> AgentType;
                }
                #[doc(hidden)]
                macro_rules! __export_golem_agent_guest_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _ : () = { #[unsafe (export_name =
                        "golem:agent/guest#[static]agent.create")] unsafe extern "C" fn
                        export_static_agent_create(arg0 : * mut u8, arg1 : usize, arg2 :
                        i32, arg3 : * mut u8, arg4 : usize,) -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_static_agent_create_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0, arg1, arg2, arg3,
                        arg4) } } #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#[static]agent.create")] unsafe
                        extern "C" fn _post_return_static_agent_create(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_static_agent_create::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#[method]agent.get-id")] unsafe extern "C" fn
                        export_method_agent_get_id(arg0 : * mut u8,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_method_agent_get_id_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:agent/guest#[method]agent.get-id")] unsafe
                        extern "C" fn _post_return_method_agent_get_id(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_agent_get_id::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#[method]agent.invoke")] unsafe extern "C" fn
                        export_method_agent_invoke(arg0 : * mut u8, arg1 : * mut u8, arg2
                        : usize, arg3 : i32, arg4 : * mut u8, arg5 : usize,) -> * mut u8
                        { unsafe { $($path_to_types)*::
                        _export_method_agent_invoke_cabi::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0, arg1, arg2, arg3, arg4, arg5) } }
                        #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#[method]agent.invoke")] unsafe
                        extern "C" fn _post_return_method_agent_invoke(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_method_agent_invoke::<<$ty as $($path_to_types)*::
                        Guest >::Agent > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#[method]agent.get-definition")] unsafe extern
                        "C" fn export_method_agent_get_definition(arg0 : * mut u8,) -> *
                        mut u8 { unsafe { $($path_to_types)*::
                        _export_method_agent_get_definition_cabi::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } } #[unsafe
                        (export_name =
                        "cabi_post_golem:agent/guest#[method]agent.get-definition")]
                        unsafe extern "C" fn
                        _post_return_method_agent_get_definition(arg0 : * mut u8,) {
                        unsafe { $($path_to_types)*::
                        __post_return_method_agent_get_definition::<<$ty as
                        $($path_to_types)*:: Guest >::Agent > (arg0) } } #[unsafe
                        (export_name = "golem:agent/guest#get-agent")] unsafe extern "C"
                        fn export_get_agent(arg0 : * mut u8, arg1 : usize, arg2 : * mut
                        u8, arg3 : usize,) -> i32 { unsafe { $($path_to_types)*::
                        _export_get_agent_cabi::<$ty > (arg0, arg1, arg2, arg3) } }
                        #[unsafe (export_name = "golem:agent/guest#invoke-agent")] unsafe
                        extern "C" fn export_invoke_agent(arg0 : * mut u8, arg1 : usize,
                        arg2 : * mut u8, arg3 : usize, arg4 : * mut u8, arg5 : usize,
                        arg6 : i32, arg7 : * mut u8, arg8 : usize,) -> * mut u8 { unsafe
                        { $($path_to_types)*:: _export_invoke_agent_cabi::<$ty > (arg0,
                        arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) } } #[unsafe
                        (export_name = "cabi_post_golem:agent/guest#invoke-agent")]
                        unsafe extern "C" fn _post_return_invoke_agent(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*:: __post_return_invoke_agent::<$ty
                        > (arg0) } } #[unsafe (export_name =
                        "golem:agent/guest#discover-agents")] unsafe extern "C" fn
                        export_discover_agents() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_discover_agents_cabi::<$ty > () } }
                        #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#discover-agents")] unsafe extern "C"
                        fn _post_return_discover_agents(arg0 : * mut u8,) { unsafe {
                        $($path_to_types)*:: __post_return_discover_agents::<$ty > (arg0)
                        } } #[unsafe (export_name =
                        "golem:agent/guest#discover-agent-types")] unsafe extern "C" fn
                        export_discover_agent_types() -> * mut u8 { unsafe {
                        $($path_to_types)*:: _export_discover_agent_types_cabi::<$ty > ()
                        } } #[unsafe (export_name =
                        "cabi_post_golem:agent/guest#discover-agent-types")] unsafe
                        extern "C" fn _post_return_discover_agent_types(arg0 : * mut u8,)
                        { unsafe { $($path_to_types)*::
                        __post_return_discover_agent_types::<$ty > (arg0) } } const _ :
                        () = { #[doc(hidden)] #[unsafe (export_name =
                        "golem:agent/guest#[dtor]agent")] #[allow(non_snake_case)] unsafe
                        extern "C" fn dtor(rep : * mut u8) { unsafe {
                        $($path_to_types)*:: Agent::dtor::< <$ty as $($path_to_types)*::
                        Guest >::Agent > (rep) } } }; };
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_golem_agent_guest_cabi;
                #[cfg_attr(target_pointer_width = "64", repr(align(8)))]
                #[cfg_attr(target_pointer_width = "32", repr(align(4)))]
                struct _RetArea(
                    [::core::mem::MaybeUninit<
                        u8,
                    >; 19 * ::core::mem::size_of::<*const u8>()],
                );
                static mut _RET_AREA: _RetArea = _RetArea(
                    [::core::mem::MaybeUninit::uninit(); 19
                        * ::core::mem::size_of::<*const u8>()],
                );
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};
    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }
    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }
    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }
        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }
        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }
    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }
    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    u32::MAX => {}
                    other => T::drop(other),
                }
            }
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::vec::Vec;
    pub use alloc_crate::alloc;
    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }
    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }
    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }
    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub use alloc_crate::string::String;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            unsafe { core::hint::unreachable_unchecked() }
        }
    }
    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }
    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }
    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }
    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub fn as_f32<T: AsF32>(t: T) -> f32 {
        t.as_f32()
    }
    pub trait AsF32 {
        fn as_f32(self) -> f32;
    }
    impl<'a, T: Copy + AsF32> AsF32 for &'a T {
        fn as_f32(self) -> f32 {
            (*self).as_f32()
        }
    }
    impl AsF32 for f32 {
        #[inline]
        fn as_f32(self) -> f32 {
            self as f32
        }
    }
    pub fn as_f64<T: AsF64>(t: T) -> f64 {
        t.as_f64()
    }
    pub trait AsF64 {
        fn as_f64(self) -> f64;
    }
    impl<'a, T: Copy + AsF64> AsF64 for &'a T {
        fn as_f64(self) -> f64 {
            (*self).as_f64()
        }
    }
    impl AsF64 for f64 {
        #[inline]
        fn as_f64(self) -> f64 {
            self as f64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub unsafe fn char_lift(val: u32) -> char {
        if cfg!(debug_assertions) {
            core::char::from_u32(val).unwrap()
        } else {
            core::char::from_u32_unchecked(val)
        }
    }
    pub use alloc_crate::boxed::Box;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_agent_guest_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*::
        exports::golem::agent::guest::__export_golem_agent_guest_cabi!($ty with_types_in
        $($path_to_types_root)*:: exports::golem::agent::guest);
    };
}
#[doc(inline)]
pub(crate) use __export_agent_guest_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:golem:agent-guest:agent-guest:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 7107] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc16\x01A\x02\x01A\x1a\
\x01B\x0a\x04\0\x08pollable\x03\x01\x01h\0\x01@\x01\x04self\x01\0\x7f\x04\0\x16[\
method]pollable.ready\x01\x02\x01@\x01\x04self\x01\x01\0\x04\0\x16[method]pollab\
le.block\x01\x03\x01p\x01\x01py\x01@\x01\x02in\x04\0\x05\x04\0\x04poll\x01\x06\x03\
\0\x12wasi:io/poll@0.2.3\x05\0\x02\x03\0\0\x08pollable\x01B\x0f\x02\x03\x02\x01\x01\
\x04\0\x08pollable\x03\0\0\x01w\x04\0\x07instant\x03\0\x02\x01w\x04\0\x08duratio\
n\x03\0\x04\x01@\0\0\x03\x04\0\x03now\x01\x06\x01@\0\0\x05\x04\0\x0aresolution\x01\
\x07\x01i\x01\x01@\x01\x04when\x03\0\x08\x04\0\x11subscribe-instant\x01\x09\x01@\
\x01\x04when\x05\0\x08\x04\0\x12subscribe-duration\x01\x0a\x03\0!wasi:clocks/mon\
otonic-clock@0.2.3\x05\x02\x01B\x05\x01r\x02\x07secondsw\x0bnanosecondsy\x04\0\x08\
datetime\x03\0\0\x01@\0\0\x01\x04\0\x03now\x01\x02\x04\0\x0aresolution\x01\x02\x03\
\0\x1cwasi:clocks/wall-clock@0.2.3\x05\x03\x02\x03\0\x02\x08datetime\x01B[\x02\x03\
\x02\x01\x04\x04\0\x08datetime\x03\0\0\x02\x03\x02\x01\x01\x04\0\x08pollable\x03\
\0\x02\x01r\x02\x09high-bitsw\x08low-bitsw\x04\0\x04uuid\x03\0\x04\x01r\x01\x04u\
uid\x05\x04\0\x0ccomponent-id\x03\0\x06\x01r\x02\x0ccomponent-id\x07\x0bworker-n\
ames\x04\0\x09worker-id\x03\0\x08\x01z\x04\0\x0anode-index\x03\0\x0a\x01w\x04\0\x0b\
resource-id\x03\0\x0c\x01m\x02\x05owned\x08borrowed\x04\0\x0dresource-mode\x03\0\
\x0e\x01o\x02s\x0b\x01p\x10\x01k\x0b\x01o\x02s\x12\x01p\x13\x01ps\x01p\x0b\x01o\x02\
\x12\x12\x01o\x02\x0d\x0f\x01q\x16\x0brecord-type\x01\x11\0\x0cvariant-type\x01\x14\
\0\x09enum-type\x01\x15\0\x0aflags-type\x01\x15\0\x0atuple-type\x01\x16\0\x09lis\
t-type\x01\x0b\0\x0boption-type\x01\x0b\0\x0bresult-type\x01\x17\0\x0cprim-u8-ty\
pe\0\0\x0dprim-u16-type\0\0\x0dprim-u32-type\0\0\x0dprim-u64-type\0\0\x0cprim-s8\
-type\0\0\x0dprim-s16-type\0\0\x0dprim-s32-type\0\0\x0dprim-s64-type\0\0\x0dprim\
-f32-type\0\0\x0dprim-f64-type\0\0\x0eprim-char-type\0\0\x0eprim-bool-type\0\0\x10\
prim-string-type\0\0\x0bhandle-type\x01\x18\0\x04\0\x0dwit-type-node\x03\0\x19\x01\
ks\x01r\x03\x04name\x1b\x05owner\x1b\x04type\x1a\x04\0\x13named-wit-type-node\x03\
\0\x1c\x01p\x1d\x01r\x01\x05nodes\x1e\x04\0\x08wit-type\x03\0\x1f\x01r\x01\x05va\
lues\x04\0\x03uri\x03\0!\x01o\x02y\x12\x01p\x7f\x01j\x01\x12\x01\x12\x01o\x02\"w\
\x01q\x16\x0crecord-value\x01\x16\0\x0dvariant-value\x01#\0\x0aenum-value\x01y\0\
\x0bflags-value\x01$\0\x0btuple-value\x01\x16\0\x0alist-value\x01\x16\0\x0coptio\
n-value\x01\x12\0\x0cresult-value\x01%\0\x07prim-u8\x01}\0\x08prim-u16\x01{\0\x08\
prim-u32\x01y\0\x08prim-u64\x01w\0\x07prim-s8\x01~\0\x08prim-s16\x01|\0\x08prim-\
s32\x01z\0\x08prim-s64\x01x\0\x0cprim-float32\x01v\0\x0cprim-float64\x01u\0\x09p\
rim-char\x01t\0\x09prim-bool\x01\x7f\0\x0bprim-string\x01s\0\x06handle\x01&\0\x04\
\0\x08wit-node\x03\0'\x01p(\x01r\x01\x05nodes)\x04\0\x09wit-value\x03\0*\x01r\x02\
\x05value+\x03typ\x20\x04\0\x0evalue-and-type\x03\0,\x01q\x04\x0eprotocol-error\x01\
s\0\x06denied\x01s\0\x09not-found\x01s\0\x15remote-internal-error\x01s\0\x04\0\x09\
rpc-error\x03\0.\x04\0\x08wasm-rpc\x03\x01\x04\0\x14future-invoke-result\x03\x01\
\x04\0\x12cancellation-token\x03\x01\x01i0\x01@\x01\x09worker-id\x09\03\x04\0\x15\
[constructor]wasm-rpc\x014\x01@\x01\x0ccomponent-id\x07\03\x04\0\x1a[static]wasm\
-rpc.ephemeral\x015\x01h0\x01p+\x01j\x01+\x01/\x01@\x03\x04self6\x0dfunction-nam\
es\x0ffunction-params7\08\x04\0![method]wasm-rpc.invoke-and-await\x019\x01j\0\x01\
/\x01@\x03\x04self6\x0dfunction-names\x0ffunction-params7\0:\x04\0\x17[method]wa\
sm-rpc.invoke\x01;\x01i1\x01@\x03\x04self6\x0dfunction-names\x0ffunction-params7\
\0<\x04\0'[method]wasm-rpc.async-invoke-and-await\x01=\x01@\x04\x04self6\x0esche\
duled-time\x01\x0dfunction-names\x0ffunction-params7\x01\0\x04\0$[method]wasm-rp\
c.schedule-invocation\x01>\x01i2\x01@\x04\x04self6\x0escheduled-time\x01\x0dfunc\
tion-names\x0ffunction-params7\0?\x04\0/[method]wasm-rpc.schedule-cancelable-inv\
ocation\x01@\x01h1\x01i\x03\x01@\x01\x04self\xc1\0\0\xc2\0\x04\0&[method]future-\
invoke-result.subscribe\x01C\x01k8\x01@\x01\x04self\xc1\0\0\xc4\0\x04\0\x20[meth\
od]future-invoke-result.get\x01E\x01h2\x01@\x01\x04self\xc6\0\x01\0\x04\0![metho\
d]cancellation-token.cancel\x01G\x01j\x01\x05\x01s\x01@\x01\x04uuids\0\xc8\0\x04\
\0\x0aparse-uuid\x01I\x01@\x01\x04uuid\x05\0s\x04\0\x0euuid-to-string\x01J\x01@\x01\
\x03vnt-\0+\x04\0\x0dextract-value\x01K\x01@\x01\x03vnt-\0\x20\x04\0\x0cextract-\
type\x01L\x03\0\x15golem:rpc/types@0.2.2\x05\x05\x02\x03\0\x01\x08duration\x02\x03\
\0\x03\x0ccomponent-id\x02\x03\0\x03\x04uuid\x02\x03\0\x03\x0evalue-and-type\x02\
\x03\0\x03\x09worker-id\x01B\x7f\x02\x03\x02\x01\x06\x04\0\x08duration\x03\0\0\x02\
\x03\x02\x01\x07\x04\0\x0ccomponent-id\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x04uu\
id\x03\0\x04\x02\x03\x02\x01\x09\x04\0\x0evalue-and-type\x03\0\x06\x02\x03\x02\x01\
\x0a\x04\0\x09worker-id\x03\0\x08\x01w\x04\0\x0boplog-index\x03\0\x0a\x01r\x02\x09\
worker-id\x09\x09oplog-idx\x0b\x04\0\x0apromise-id\x03\0\x0c\x01w\x04\0\x11compo\
nent-version\x03\0\x0e\x01r\x01\x05values\x04\0\x0aaccount-id\x03\0\x10\x01r\x01\
\x04uuid\x05\x04\0\x0aproject-id\x03\0\x12\x01ku\x01r\x05\x0cmax-attemptsy\x09mi\
n-delay\x01\x09max-delay\x01\x0amultiplieru\x11max-jitter-factor\x14\x04\0\x0cre\
try-policy\x03\0\x15\x01q\x03\x0fpersist-nothing\0\0\x1bpersist-remote-side-effe\
cts\0\0\x05smart\0\0\x04\0\x11persistence-level\x03\0\x17\x01m\x02\x09automatic\x0e\
snapshot-based\x04\0\x0bupdate-mode\x03\0\x19\x01m\x06\x05equal\x09not-equal\x0d\
greater-equal\x07greater\x0aless-equal\x04less\x04\0\x11filter-comparator\x03\0\x1b\
\x01m\x04\x05equal\x09not-equal\x04like\x08not-like\x04\0\x18string-filter-compa\
rator\x03\0\x1d\x01m\x07\x07running\x04idle\x09suspended\x0binterrupted\x08retry\
ing\x06failed\x06exited\x04\0\x0dworker-status\x03\0\x1f\x01r\x02\x0acomparator\x1e\
\x05values\x04\0\x12worker-name-filter\x03\0!\x01r\x02\x0acomparator\x1c\x05valu\
e\x20\x04\0\x14worker-status-filter\x03\0#\x01r\x02\x0acomparator\x1c\x05valuew\x04\
\0\x15worker-version-filter\x03\0%\x01r\x02\x0acomparator\x1c\x05valuew\x04\0\x18\
worker-created-at-filter\x03\0'\x01r\x03\x04names\x0acomparator\x1e\x05values\x04\
\0\x11worker-env-filter\x03\0)\x01r\x03\x04names\x0acomparator\x1e\x05values\x04\
\0\x1eworker-wasi-config-vars-filter\x03\0+\x01q\x06\x04name\x01\"\0\x06status\x01\
$\0\x07version\x01&\0\x0acreated-at\x01(\0\x03env\x01*\0\x10wasi-config-vars\x01\
,\0\x04\0\x16worker-property-filter\x03\0-\x01p.\x01r\x01\x07filters/\x04\0\x11w\
orker-all-filter\x03\00\x01p1\x01r\x01\x07filters2\x04\0\x11worker-any-filter\x03\
\03\x01ps\x01o\x02ss\x01p6\x01r\x07\x09worker-id\x09\x04args5\x03env7\x10wasi-co\
nfig-vars7\x06status\x20\x11component-versionw\x0bretry-countw\x04\0\x0fworker-m\
etadata\x03\08\x04\0\x0bget-workers\x03\x01\x01q\x02\x15revert-to-oplog-index\x01\
\x0b\0\x17revert-last-invocations\x01w\0\x04\0\x14revert-worker-target\x03\0;\x01\
m\x02\x08original\x06forked\x04\0\x0bfork-result\x03\0=\x01k4\x01i:\x01@\x03\x0c\
component-id\x03\x06filter?\x07precise\x7f\0\xc0\0\x04\0\x18[constructor]get-wor\
kers\x01A\x01h:\x01p9\x01k\xc3\0\x01@\x01\x04self\xc2\0\0\xc4\0\x04\0\x1c[method\
]get-workers.get-next\x01E\x01@\0\0\x0d\x04\0\x0ecreate-promise\x01F\x01p}\x01@\x01\
\x0apromise-id\x0d\0\xc7\0\x04\0\x0dawait-promise\x01H\x01k\xc7\0\x01@\x01\x0apr\
omise-id\x0d\0\xc9\0\x04\0\x0cpoll-promise\x01J\x01@\x02\x0apromise-id\x0d\x04da\
ta\xc7\0\0\x7f\x04\0\x10complete-promise\x01K\x01@\x01\x0apromise-id\x0d\x01\0\x04\
\0\x0edelete-promise\x01L\x01@\0\0\x0b\x04\0\x0fget-oplog-index\x01M\x01@\x01\x09\
oplog-idx\x0b\x01\0\x04\0\x0fset-oplog-index\x01N\x01@\x01\x08replicas}\x01\0\x04\
\0\x0coplog-commit\x01O\x04\0\x14mark-begin-operation\x01M\x01@\x01\x05begin\x0b\
\x01\0\x04\0\x12mark-end-operation\x01P\x01@\0\0\x16\x04\0\x10get-retry-policy\x01\
Q\x01@\x01\x10new-retry-policy\x16\x01\0\x04\0\x10set-retry-policy\x01R\x01@\0\0\
\x18\x04\0\x1bget-oplog-persistence-level\x01S\x01@\x01\x15new-persistence-level\
\x18\x01\0\x04\0\x1bset-oplog-persistence-level\x01T\x01@\0\0\x7f\x04\0\x14get-i\
dempotence-mode\x01U\x01@\x01\x0aidempotent\x7f\x01\0\x04\0\x14set-idempotence-m\
ode\x01V\x01@\0\0\x05\x04\0\x18generate-idempotency-key\x01W\x01@\x03\x09worker-\
id\x09\x0etarget-version\x0f\x04mode\x1a\x01\0\x04\0\x0dupdate-worker\x01X\x01@\0\
\09\x04\0\x11get-self-metadata\x01Y\x01k9\x01@\x01\x09worker-id\x09\0\xda\0\x04\0\
\x13get-worker-metadata\x01[\x01@\x03\x10source-worker-id\x09\x10target-worker-i\
d\x09\x11oplog-idx-cut-off\x0b\x01\0\x04\0\x0bfork-worker\x01\\\x01@\x02\x09work\
er-id\x09\x0drevert-target<\x01\0\x04\0\x0drevert-worker\x01]\x01k\x03\x01@\x01\x13\
component-references\0\xde\0\x04\0\x14resolve-component-id\x01_\x01k\x09\x01@\x02\
\x13component-references\x0bworker-names\0\xe0\0\x04\0\x11resolve-worker-id\x01a\
\x04\0\x18resolve-worker-id-strict\x01a\x01@\x01\x08new-names\0>\x04\0\x04fork\x01\
b\x03\0\x14golem:api/host@1.1.7\x05\x0b\x02\x03\0\x03\x08wit-type\x02\x03\0\x03\x09\
wit-value\x01B8\x02\x03\x02\x01\x09\x04\0\x0evalue-and-type\x03\0\0\x02\x03\x02\x01\
\x0c\x04\0\x08wit-type\x03\0\x02\x02\x03\x02\x01\x0d\x04\0\x09wit-value\x03\0\x04\
\x01s\x04\0\x03url\x03\0\x06\x01r\x01\x0dlanguage-codes\x04\0\x09text-type\x03\0\
\x08\x01k\x09\x01r\x02\x04datas\x09text-type\x0a\x04\0\x0btext-source\x03\0\x0b\x01\
q\x02\x03url\x01s\0\x06inline\x01\x0c\0\x04\0\x0etext-reference\x03\0\x0d\x01p\x09\
\x01k\x0f\x01r\x01\x0crestrictions\x10\x04\0\x0ftext-descriptor\x03\0\x11\x01r\x01\
\x09mime-types\x04\0\x0bbinary-type\x03\0\x13\x01p\x14\x01k\x15\x01r\x01\x0crest\
rictions\x16\x04\0\x11binary-descriptor\x03\0\x17\x01q\x03\x0fcomponent-model\x01\
\x03\0\x11unstructured-text\x01\x12\0\x13unstructured-binary\x01\x18\0\x04\0\x0e\
element-schema\x03\0\x19\x01o\x02s\x1a\x01p\x1b\x01q\x02\x05tuple\x01\x1c\0\x0am\
ultimodal\x01\x1c\0\x04\0\x0bdata-schema\x03\0\x1d\x01ks\x01r\x05\x04names\x0bde\
scriptions\x0bprompt-hint\x1f\x0cinput-schema\x1e\x0doutput-schema\x1e\x04\0\x0c\
agent-method\x03\0\x20\x01r\x04\x04name\x1f\x0bdescriptions\x0bprompt-hint\x1f\x0c\
input-schema\x1e\x04\0\x11agent-constructor\x03\0\"\x01p!\x01r\x04\x09type-names\
\x0bdescription\x1f\x0bconstructor#\x07methods$\x04\0\x10agent-dependency\x03\0%\
\x01p&\x01r\x05\x09type-names\x0bdescriptions\x0bconstructor#\x07methods$\x0cdep\
endencies'\x04\0\x0aagent-type\x03\0(\x01p}\x01r\x02\x04data*\x0bbinary-type\x14\
\x04\0\x0dbinary-source\x03\0+\x01q\x02\x03url\x01\x07\0\x06inline\x01,\0\x04\0\x10\
binary-reference\x03\0-\x01q\x03\x0fcomponent-model\x01\x05\0\x11unstructured-te\
xt\x01\x0e\0\x13unstructured-binary\x01.\0\x04\0\x0delement-value\x03\0/\x01p0\x01\
o\x02s0\x01p2\x01q\x02\x05tuple\x011\0\x0amultimodal\x013\0\x04\0\x0adata-value\x03\
\04\x01q\x05\x0dinvalid-input\x01s\0\x0einvalid-method\x01s\0\x0cinvalid-type\x01\
s\0\x10invalid-agent-id\x01s\0\x0ccustom-error\x01\x01\0\x04\0\x0bagent-error\x03\
\06\x03\0\x12golem:agent/common\x05\x0e\x02\x03\0\x05\x0bagent-error\x02\x03\0\x05\
\x0aagent-type\x02\x03\0\x05\x0adata-value\x01B\x1d\x02\x03\x02\x01\x0f\x04\0\x0b\
agent-error\x03\0\0\x02\x03\x02\x01\x10\x04\0\x0aagent-type\x03\0\x02\x02\x03\x02\
\x01\x11\x04\0\x0adata-value\x03\0\x04\x04\0\x05agent\x03\x01\x01i\x06\x01j\x01\x07\
\x01\x01\x01@\x02\x0aagent-types\x05input\x05\0\x08\x04\0\x14[static]agent.creat\
e\x01\x09\x01h\x06\x01@\x01\x04self\x0a\0s\x04\0\x14[method]agent.get-id\x01\x0b\
\x01j\x01\x05\x01\x01\x01@\x03\x04self\x0a\x0bmethod-names\x05input\x05\0\x0c\x04\
\0\x14[method]agent.invoke\x01\x0d\x01@\x01\x04self\x0a\0\x03\x04\0\x1c[method]a\
gent.get-definition\x01\x0e\x01@\x02\x0aagent-types\x08agent-ids\0\x07\x04\0\x09\
get-agent\x01\x0f\x01@\x04\x0aagent-types\x08agent-ids\x0bmethod-names\x05input\x05\
\0\x0c\x04\0\x0cinvoke-agent\x01\x10\x01p\x07\x01@\0\0\x11\x04\0\x0fdiscover-age\
nts\x01\x12\x01p\x03\x01@\0\0\x13\x04\0\x14discover-agent-types\x01\x14\x04\0\x11\
golem:agent/guest\x05\x12\x04\0\x1dgolem:agent-guest/agent-guest\x04\0\x0b\x11\x01\
\0\x0bagent-guest\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compone\
nt\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
